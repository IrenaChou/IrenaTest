{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1}],"Cache":[{"_id":"source/_posts/16-04-29-coreImageDemo.md","shasum":"061aa6133df08c757d8b99d8f6b88760372c1159","modified":1462190026000},{"_id":"source/_posts/16-04-29-博客迁移.md","shasum":"3cef11f44e57e978fec557df5a8213c70ce603fb","modified":1461912508000},{"_id":"source/_posts/16-05-02-pictureCompress.md","shasum":"268a6e1b930c116219b8c59d44ec86f40e8ad34c","modified":1462190784000},{"_id":"source/_posts/16-05-02-ssh公钥.md","shasum":"7143067b6a036552790773e8d82c1897c5ddb1b0","modified":1465292739000},{"_id":"source/_posts/16-05-02-获取storyboard箭头指向的根控制器.md","shasum":"2098a2a48a6da56f2f033e5347bf67e7d269a8cf","modified":1462190204000},{"_id":"source/_posts/16-05-02-迪士尼七宝.md","shasum":"e877e5698412dee9ca6f796671e1d9f9f25804dc","modified":1462200426000},{"_id":"source/_posts/16-05-09-NSStringConvertNSData.md","shasum":"65e8aad3aad622759a7145c3d667ba6d0d013b40","modified":1462771591000},{"_id":"source/_posts/16-05-20-navigationBarBackgroundTransparent.md","shasum":"a0735e520a4585801b99a5ccdf1faaf5b6b0296f","modified":1463986782000},{"_id":"source/_posts/16-05-03-bug.md","shasum":"c6c8497b7fbfdb16a0620eb02d9c5544c66a772b","modified":1462282400000},{"_id":"source/_posts/16-05-23-supportedInterfaceOrientationsForWindow.md","shasum":"16ff12cbed09c149eac3eeae222c9a323a106128","modified":1463988424000},{"_id":"source/_posts/16-05-25-ASI-WebService.md","shasum":"651690784636f6708d357405dda3225a95a58abe","modified":1464165353000},{"_id":"source/_posts/16-05-03-runtime-getPropertyNameList.md","shasum":"baae1f45cab45eb18283626e0f4a0bf8c16ddb3b","modified":1462267202000},{"_id":"source/_posts/16-06-07-AFNetworking-SOAP.md","shasum":"b1ec17fd4d86f247597406f48dd129f9449c4c52","modified":1465289145000},{"_id":"source/_posts/16-05-05-labelLineHeightAndtextIndex.md","shasum":"cf3b62e48022d55858949cbeb1fa1a79b0705f2e","modified":1462434189000},{"_id":"source/_posts/16-06-14-ViewClipSubviews.md","shasum":"96a18fda299cfca3512f64f6d646a795049d9f4d","modified":1465898319000},{"_id":"source/_posts/3DTouch.md","shasum":"3175492f5c7ad500ffaad72fdd4be5fa6f2ae7bb","modified":1460598031000},{"_id":"source/_posts/Flashlight.md","shasum":"e2a56273a1d84c7f721774d5b45dcd1f6db052ae","modified":1459145248000},{"_id":"source/_posts/16-06-13-CFStringTransform.md","shasum":"84936fc1eaa3dd052949a388f0980ec374d38b21","modified":1465799611000},{"_id":"source/_posts/16-06-13-UIMenuController.md","shasum":"d0ce5146c97acac45f5ee1d40d78602883275c63","modified":1465805961000},{"_id":"source/_posts/appleDeveloperAccount.md","shasum":"33a7c346b67b2eb2b3100c9efa4c7f76f986dfe9","modified":1456368417000},{"_id":"source/_posts/applePayDemo.md","shasum":"e07e24516df0115c3a6a4dd6acae65053f74f52f","modified":1457072124000},{"_id":"source/_posts/brightNess.md","shasum":"641dbbce1fdf320e5aff4cb05802ccea7c83ba23","modified":1456797196000},{"_id":"source/_posts/a-file-makeAndUse.md","shasum":"82b2839ff3b065426846acddcaabdf3da8cd5b4f","modified":1465194489000},{"_id":"source/_posts/capturePicture.md","shasum":"72a385b873bb71696ee495f133cac651f2a7dfd4","modified":1464689174000},{"_id":"source/_posts/bug1.md","shasum":"8ac7e04ff6a07d5a77486323f29b848d3188d762","modified":1456812655000},{"_id":"source/_posts/StringIsNumber.md","shasum":"811e4e7c1af37d15189a7e67aca958341430e30c","modified":1460692228000},{"_id":"source/_posts/16-05-23-TouchID.md","shasum":"16042bf74e9e10e9a3f8b5d6844ff1a256c72b6a","modified":1464053590000},{"_id":"source/_posts/cgpoint.md","shasum":"2ba1d37d002361409e28fa0b5b9c4ef85f417f93","modified":1460455641000},{"_id":"source/_posts/drawDashLine.md","shasum":"029e70a8164ebe70ed768e9fe941197df6278ad6","modified":1456302501000},{"_id":"source/_posts/dunsApply.md","shasum":"6f9575ccec23d66cd623ad202d54cc7b3de61f80","modified":1455700873000},{"_id":"source/_posts/gradientColor.md","shasum":"cd324e0e2a23984dc39a7f1315e0dfa051d321d2","modified":1456799525000},{"_id":"source/_posts/hello-world.md","shasum":"570984ae3daab6865e3b6541355d2201e30670ef","modified":1455605742000},{"_id":"source/_posts/hexStringConvertUIColor.md","shasum":"5d83bd8b9081247a5c505f355b4abddd4ca85c7e","modified":1456292797000},{"_id":"source/_posts/rsaBase64.md","shasum":"7f15f6bb2d35314794e949ab0df26de1bd32d1a7","modified":1463733002000},{"_id":"source/_posts/isValidateBankCardAndMobile.md","shasum":"0393ea1ad70e239a33655d4046ff8ac0c08403b1","modified":1457676651000},{"_id":"source/_posts/isNotNULL.md","shasum":"e263a969caf8d16b963baa5083616be449eea61c","modified":1457676186000},{"_id":"source/_posts/macInstallWithUdisk.md","shasum":"e512420b9ab507bb8d212c62606911cb169e2e58","modified":1457076244000},{"_id":"source/_posts/statusBarBackgroundColor.md","shasum":"af774c117a9bc02b14651930229ee3e6547be8c1","modified":1463743669000},{"_id":"source/_posts/seeSandboxDirectory.md","shasum":"0a1cfab0a5bf946d9481850bcc62b08286de4e98","modified":1458698988000},{"_id":"source/_posts/sendMail.md","shasum":"dfacca377f9a8c1e043e8f79bdc8709611b2f156","modified":1455701599000},{"_id":"source/_posts/sendMailPop.md","shasum":"f8ad255c6e9a7c7946a2e160ec5deb0aa32f38c9","modified":1457679384000},{"_id":"source/_posts/suibi.md","shasum":"c1eeacc52351af62deab561f2ab2f0d178d67bae","modified":1455441484000},{"_id":"source/_posts/uitouch.md","shasum":"4cef699b2392d49b4d4950a2339dc75291713f2f","modified":1465789265000},{"_id":"source/_posts/tabbarShowOrHidden.md","shasum":"a0d3f26d1d05133d6453c52cb7fa24d642c96a3e","modified":1459300249000},{"_id":"source/_posts/tagView.md","shasum":"679070b69b4b1c531fe84f6fff9d0f28d8601101","modified":1459322841000},{"_id":"source/_posts/updateLoginPassword.md","shasum":"0f44316378f95d6d306004583538df83efe7110c","modified":1457575309000},{"_id":"themes/yilia/README.md","shasum":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1455601891000},{"_id":"themes/yilia/_config.yml","shasum":"284604892d28153e57785771ef421ba40c77082e","modified":1457078483000},{"_id":"themes/yilia/languages/de.yml","shasum":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1455601891000},{"_id":"themes/yilia/languages/default.yml","shasum":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1455601891000},{"_id":"themes/yilia/languages/en.yml","shasum":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1455601891000},{"_id":"themes/yilia/languages/fr-FR.yml","shasum":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1455601891000},{"_id":"themes/yilia/languages/ru.yml","shasum":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1455601891000},{"_id":"themes/yilia/languages/zh-Hans.yml","shasum":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1455601891000},{"_id":"themes/yilia/languages/zh-hk.yml","shasum":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1455601891000},{"_id":"themes/yilia/languages/zh-tw.yml","shasum":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","shasum":"082504c9fd8600306d4ca55f03e3cbb0ddd99dd7","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","shasum":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/archive.ejs","shasum":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/article.ejs","shasum":"d6306cd897683c25184a50b29931aa1fa18d119c","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/baidu_tongji.ejs","shasum":"f5cf9ea2dfe3145817946c52024e703116995f76","modified":1457077765000},{"_id":"themes/yilia/layout/_partial/footer.ejs","shasum":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/head.ejs","shasum":"b5f7586ace1135b89dc8aa3b97c277aa57c7d85c","modified":1457077700000},{"_id":"themes/yilia/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","shasum":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","shasum":"47dc7c1d35928a7b026c683547f8482d2e524c63","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","shasum":"fff29e619af2b1abcab7d5d2d6f78428272f18f7","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","shasum":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","shasum":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","shasum":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","shasum":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","shasum":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","shasum":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","shasum":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1455601891000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1455601891000},{"_id":"themes/yilia/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1455601891000},{"_id":"themes/yilia/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1455601891000},{"_id":"themes/yilia/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1455601891000},{"_id":"themes/yilia/layout/layout.ejs","shasum":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1455601891000},{"_id":"themes/yilia/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1455601891000},{"_id":"themes/yilia/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1455601891000},{"_id":"themes/yilia/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1455601891000},{"_id":"themes/yilia/package.json","shasum":"00357ef6f24eb049074da81809e98f973f528cca","modified":1455601891000},{"_id":"themes/yilia/source/css/_extend.styl","shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/archive.styl","shasum":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/article.styl","shasum":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/footer.styl","shasum":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","shasum":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/header.styl","shasum":"67e59feb18eee6026717cb440d86ab9551782628","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","shasum":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/main.styl","shasum":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","shasum":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/page.styl","shasum":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","shasum":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","shasum":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/share.styl","shasum":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","shasum":"af0115de5c6455f899a2e09225b50224982c039d","modified":1455601891000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","shasum":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1455601891000},{"_id":"themes/yilia/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1455601891000},{"_id":"themes/yilia/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1455601891000},{"_id":"themes/yilia/source/css/_variables.styl","shasum":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1455601891000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1455601891000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1455601891000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","shasum":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1455601892000},{"_id":"themes/yilia/source/css/style.styl","shasum":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1455601892000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","shasum":"a82597493d75ea989ca586e09173cff332efe41e","modified":1455601892000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1455601892000},{"_id":"themes/yilia/source/img/coderwall.png","shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1455601892000},{"_id":"themes/yilia/source/img/delicious.png","shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1455601892000},{"_id":"themes/yilia/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1455601892000},{"_id":"themes/yilia/source/img/img-err.png","shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1455601892000},{"_id":"themes/yilia/source/img/douban.png","shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1455601892000},{"_id":"themes/yilia/source/img/img-loading.png","shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1455601892000},{"_id":"themes/yilia/source/img/linkedin.png","shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1455601892000},{"_id":"themes/yilia/source/img/facebook.png","shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1455601892000},{"_id":"themes/yilia/source/img/github.png","shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1455601892000},{"_id":"themes/yilia/source/img/mail.png","shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1455601892000},{"_id":"themes/yilia/source/img/pinboard.png","shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1455601892000},{"_id":"themes/yilia/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1455601892000},{"_id":"themes/yilia/source/img/rss.png","shasum":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1455601892000},{"_id":"themes/yilia/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1455601892000},{"_id":"themes/yilia/source/img/weibo.png","shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1455601892000},{"_id":"themes/yilia/source/img/zhihu.png","shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1455601892000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1455601892000},{"_id":"themes/yilia/source/js/instagram.js","shasum":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1455601892000},{"_id":"themes/yilia/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1455601892000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1455601892000},{"_id":"themes/yilia/source/js/main.js","shasum":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1455601892000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1455601891000},{"_id":"themes/yilia/source/js/mobile.js","shasum":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1455601892000},{"_id":"themes/yilia/source/js/pc.js","shasum":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1455601892000},{"_id":"public/js/pc.js","modified":1465898330358,"shasum":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10"},{"_id":"public/js/mobile.js","modified":1465898330363,"shasum":"b68cc01d24e80973c48205f551da87f3f3427644"},{"_id":"public/js/main.js","modified":1465898330366,"shasum":"0640b68a76fab3c693b3cd1e4d04d14be1e53940"},{"_id":"public/js/jquery.lazyload.js","modified":1465898330367,"shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799"},{"_id":"public/js/instagram.js","modified":1465898330369,"shasum":"f19adbcc0dac33536bc6660598059048ec901882"},{"_id":"public/img/zhihu.png","modified":1465898330373,"shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d"},{"_id":"public/img/weibo.png","modified":1465898330375,"shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b"},{"_id":"public/img/twitter.png","modified":1465898330376,"shasum":"14dbb8e62d056525253bc0de13acd1723da7a934"},{"_id":"public/img/stackoverflow.png","modified":1465898330378,"shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2"},{"_id":"public/img/scrollbar_arrow.png","modified":1465898330380,"shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0"},{"_id":"public/img/rss.png","modified":1465898330381,"shasum":"430fd47340e75214c081abd05cd7410cf7c71b86"},{"_id":"public/img/pinterest.png","modified":1465898330383,"shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630"},{"_id":"public/img/pinboard.png","modified":1465898330384,"shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0"},{"_id":"public/img/mail.png","modified":1465898330386,"shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7"},{"_id":"public/img/linkedin.png","modified":1465898330387,"shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c"},{"_id":"public/img/img-loading.png","modified":1465898330389,"shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031"},{"_id":"public/img/img-err.png","modified":1465898330390,"shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b"},{"_id":"public/img/google.png","modified":1465898330392,"shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d"},{"_id":"public/img/github.png","modified":1465898330393,"shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d"},{"_id":"public/img/facebook.png","modified":1465898330396,"shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54"},{"_id":"public/img/douban.png","modified":1465898330398,"shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e"},{"_id":"public/img/delicious.png","modified":1465898330399,"shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd"},{"_id":"public/img/coderwall.png","modified":1465898330400,"shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1465898330402,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1465898330403,"shasum":"a82597493d75ea989ca586e09173cff332efe41e"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1465898330404,"shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1465898330406,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1465898330407,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1465898330409,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1465898330411,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1465898330413,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1465898330415,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1465898330416,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1465898330418,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1465898330419,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1465898330422,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1465898330423,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1465898330424,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1465898333013,"shasum":"10e9b93cf935a165020e48334a40b84b0f895401"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1465898333263,"shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1465898333265,"shasum":"1480b8101b02da9bc4c60341b5e185e63e585064"},{"_id":"public/css/fonts/fontawesome-webfont.svgz","modified":1465898333266,"shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1465898333269,"shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1465898333274,"shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6"},{"_id":"public/2016/06/14/16-06-14-ViewClipSubviews/index.html","modified":1465898333340,"shasum":"dcb29347c0bc37cede5840d40a5a0d9ea62b07e2"},{"_id":"public/2016/06/13/16-06-13-UIMenuController/index.html","modified":1465898333384,"shasum":"b1d582c359d1d9dfec6464ccd0eaf13faa545d67"},{"_id":"public/2016/06/13/16-06-13-CFStringTransform/index.html","modified":1465898333415,"shasum":"d6d2a1d9745faeaf55c530334fc3e267a2873fef"},{"_id":"public/2016/06/07/16-06-07-AFNetworking-SOAP/index.html","modified":1465898333448,"shasum":"5b6f6e4edb24fa885a4d80377bd5cdad4df6e7f6"},{"_id":"public/2016/05/25/16-05-25-ASI-WebService/index.html","modified":1465898333481,"shasum":"3cf60ec950ec0e6f97141e09520ae91cca98486d"},{"_id":"public/2016/05/23/16-05-23-TouchID/index.html","modified":1465898333521,"shasum":"17c4a6a74d0d92932d08c27bb5a8a7b3384a465c"},{"_id":"public/2016/05/23/16-05-23-supportedInterfaceOrientationsForWindow/index.html","modified":1465898333549,"shasum":"4d1ec7861ddbd45dea344976b02c8badc8e8514e"},{"_id":"public/2016/05/20/16-05-20-navigationBarBackgroundTransparent/index.html","modified":1465898333578,"shasum":"fd9067ac82ae882c9d02f19108fa3a5b7ee36859"},{"_id":"public/2016/05/13/statusBarBackgroundColor/index.html","modified":1465898333620,"shasum":"b3c876a6beea7f2c2ad3a9027d3050720ae6ed2b"},{"_id":"public/2016/05/09/16-05-09-NSStringConvertNSData/index.html","modified":1465898333655,"shasum":"46c2778e681f874d5f0c69cf561802bee6d62b4f"},{"_id":"public/2016/05/05/16-05-05-labelLineHeightAndtextIndex/index.html","modified":1465898333687,"shasum":"ec9d746e34aa4494221dcec8d6dea1ae59d16597"},{"_id":"public/2016/05/04/hello-world/index.html","modified":1465898333714,"shasum":"0f01352da481d86f16c54e99b71051ce72b2365a"},{"_id":"public/2016/05/03/16-05-03-bug/index.html","modified":1465898333750,"shasum":"47891138a106c71ee830ba7fd981b082cd562ba0"},{"_id":"public/2016/05/03/16-05-03-runtime-getPropertyNameList/index.html","modified":1465898333777,"shasum":"2dc9a6da1c7f494462f8253b1e2cac13e173ef3a"},{"_id":"public/2016/05/02/16-05-02-迪士尼七宝/index.html","modified":1465898333804,"shasum":"bdc00bc7c43d41af0a961720c03b2e3b34387d36"},{"_id":"public/2016/05/02/16-05-02-pictureCompress/index.html","modified":1465898333831,"shasum":"10ed9ebd89a2cada17063d019efa2320c12d06b4"},{"_id":"public/2016/05/02/16-05-02-获取storyboard箭头指向的根控制器/index.html","modified":1465898333873,"shasum":"54abdf0962c80c00647f5598b7069e3947eda30f"},{"_id":"public/2016/05/02/16-05-02-ssh公钥/index.html","modified":1465898333902,"shasum":"378f1b81e12a6a5e9bd515c7a44ff580d6adc62e"},{"_id":"public/2016/04/29/16-04-29-博客迁移/index.html","modified":1465898333929,"shasum":"038c1e1a33a6a16988a4e26eeb467d0a840e430c"},{"_id":"public/2016/04/29/16-04-29-coreImageDemo/index.html","modified":1465898333960,"shasum":"31b1f6cda83890548348dd57eebc55c5f1206523"},{"_id":"public/2016/04/22/uitouch/index.html","modified":1465898334003,"shasum":"b1d2def3f3301b5f364a8895927b4f9335581fe0"},{"_id":"public/2016/04/15/StringIsNumber/index.html","modified":1465898334033,"shasum":"92bf042a0b0d243c83032f29ba9c44a258c8a022"},{"_id":"public/2016/04/12/cgpoint/index.html","modified":1465898334067,"shasum":"9e3abe1c1d2b2d94fccfbef38ea2c4dd212ef9e4"},{"_id":"public/2016/04/11/3DTouch/index.html","modified":1465898334137,"shasum":"bc13e99c1204c4ab10b62ba15471cf40dc33c05e"},{"_id":"public/2016/04/11/a-file-makeAndUse/index.html","modified":1465898334184,"shasum":"a24c121f629e0be688d98fc7fe16aa5b42f15e23"},{"_id":"public/2016/03/30/tagView/index.html","modified":1465898334216,"shasum":"79455c9d9546638bdc61da175b4fecba6f7a3415"},{"_id":"public/2016/03/30/tabbarShowOrHidden/index.html","modified":1465898334250,"shasum":"7b259e0770a1c63e839ea131ee8bd4e544ec3d1c"},{"_id":"public/2016/03/28/Flashlight/index.html","modified":1465898334282,"shasum":"137890f07dddea4da404d8f55dac64c719279051"},{"_id":"public/2016/03/23/seeSandboxDirectory/index.html","modified":1465898334318,"shasum":"5ce05d988eea643a0d67afb4622ed828fd05dc17"},{"_id":"public/2016/03/14/rsaBase64/index.html","modified":1465898334373,"shasum":"85bb9c72e9bce28575eb5d3bb53b28fbce20786d"},{"_id":"public/2016/03/11/sendMailPop/index.html","modified":1465898334423,"shasum":"956cd2c0d5208974badcbaaa596bfbcba8773ed8"},{"_id":"public/2016/03/11/isValidateBankCardAndMobile/index.html","modified":1465898334514,"shasum":"430da09cc1b85c871524f7852a9cbe8e8299ca7e"},{"_id":"public/2016/03/11/isNotNULL/index.html","modified":1465898334522,"shasum":"a3ec436d4627329d1c9ceba1e769d820e01f7a42"},{"_id":"public/2016/03/09/updateLoginPassword/index.html","modified":1465898334529,"shasum":"54c21aca2e943d153488e80234b5002e75803563"},{"_id":"public/2016/03/04/applePayDemo/index.html","modified":1465898334539,"shasum":"80d6abff65a142d53edaea3aa38d98d661abc366"},{"_id":"public/2016/03/01/bug1/index.html","modified":1465898334544,"shasum":"bf8ce5b0c9d8b3d57dba33fcfb3c00f2bf0404a3"},{"_id":"public/2016/03/01/gradientColor/index.html","modified":1465898334551,"shasum":"2740e310c13c5958ccba4bf74ff65b2a4fdfc13d"},{"_id":"public/2016/03/01/brightNess/index.html","modified":1465898334558,"shasum":"757b2cca411fd79e4f7ac1704750a7ab55a34a97"},{"_id":"public/2016/02/29/macInstallWithUdisk/index.html","modified":1465898334562,"shasum":"cc5d7f060319ce26547008f6a8016c6ef95f6eda"},{"_id":"public/2016/02/25/appleDeveloperAccount/index.html","modified":1465898334567,"shasum":"d4a33126484823bb90edff9427b6d2542fc8aa18"},{"_id":"public/2016/02/24/drawDashLine/index.html","modified":1465898334573,"shasum":"2c56898c59774baa7a5dc9f78966dd70a03db748"},{"_id":"public/2016/02/24/hexStringConvertUIColor/index.html","modified":1465898334578,"shasum":"771dd08905384234984738e2f64141f38a449038"},{"_id":"public/2016/02/16/capturePicture/index.html","modified":1465898334584,"shasum":"aea7cb7725fc6fa4b9efa6076b27c68708aaa7cf"},{"_id":"public/2016/02/16/sendMail/index.html","modified":1465898334592,"shasum":"fed0d733ba4d233416188d802f113a74d5f0d0cb"},{"_id":"public/2016/02/16/dunsApply/index.html","modified":1465898334597,"shasum":"e35847ca7917a1210abe4fb6a80ac45bf701a428"},{"_id":"public/2016/01/24/suibi/index.html","modified":1465898334601,"shasum":"d4f4d8605f9b73d874ffc4ce14827da4821782f2"},{"_id":"public/archives/index.html","modified":1465898334619,"shasum":"04797cb5e7dbacab7379d279b698f25e6799afd8"},{"_id":"public/archives/page/2/index.html","modified":1465898334634,"shasum":"86cd0cffc56b57d12472bf4238514f2e97557404"},{"_id":"public/archives/page/3/index.html","modified":1465898334647,"shasum":"1a22cda3612e238668cce777d01cd93a16de2bd4"},{"_id":"public/archives/page/4/index.html","modified":1465898334661,"shasum":"e216efff80d9da01c87720c9012c26d171f64b0e"},{"_id":"public/archives/page/5/index.html","modified":1465898334670,"shasum":"8f8d08752ade454d29792ef0dcaf4697f2991b38"},{"_id":"public/archives/2016/index.html","modified":1465898334687,"shasum":"cbd89c12c23041d7e7b2553be10841481c61de0f"},{"_id":"public/archives/2016/page/2/index.html","modified":1465898334700,"shasum":"4b35034ceeeff252a5e68ad37d86a6f83902b345"},{"_id":"public/archives/2016/page/3/index.html","modified":1465898334751,"shasum":"e7e884d5feb68df94ce027ac5efba159b0c1cfb2"},{"_id":"public/archives/2016/page/4/index.html","modified":1465898334764,"shasum":"a9bf509b313cde8fa4e547fa474bc79174d67fcf"},{"_id":"public/archives/2016/page/5/index.html","modified":1465898334772,"shasum":"be52f94da77e4f996c8ef94dd03234cfc6b794ac"},{"_id":"public/archives/2016/01/index.html","modified":1465898334778,"shasum":"b9edfbb621f13569acf8c2872750e83201c4699b"},{"_id":"public/archives/2016/02/index.html","modified":1465898334788,"shasum":"48e2f870d466005c36ddad413b0b41ff5776be3c"},{"_id":"public/archives/2016/03/index.html","modified":1465898334804,"shasum":"a8f9b7ba301349d716f1462f979378a55b10b386"},{"_id":"public/archives/2016/03/page/2/index.html","modified":1465898334810,"shasum":"03797675b47e49ffde4ab63009260c3831180139"},{"_id":"public/archives/2016/04/index.html","modified":1465898334820,"shasum":"6256671dd4f1605f6b874c66fe2d617740f8d30a"},{"_id":"public/archives/2016/05/index.html","modified":1465898334833,"shasum":"0da37b22ae6a87a4a8e10a1ba812a56b7c68b1c0"},{"_id":"public/archives/2016/05/page/2/index.html","modified":1465898334840,"shasum":"0f7e051e43ba3a9fc893c168b90ff50761453f4c"},{"_id":"public/archives/2016/06/index.html","modified":1465898334846,"shasum":"1f84d0a56124b11654f9079fc2c08682734b5f25"},{"_id":"public/index.html","modified":1465898334860,"shasum":"f391f0db08893c33d2b7017a1e7e7ae4dba28e40"},{"_id":"public/page/2/index.html","modified":1465898334877,"shasum":"c3f28c6f417d5300babc254c6327a0dffed8e3f8"},{"_id":"public/page/3/index.html","modified":1465898334889,"shasum":"674968c23b30885cc3de2eb446ea8e265b45f53b"},{"_id":"public/page/4/index.html","modified":1465898334903,"shasum":"63a284b854aa9a53419801035ef5436556dbeff8"},{"_id":"public/page/5/index.html","modified":1465898334911,"shasum":"02cef7486cf8cc6c9b4816fcaf8ac748266f2bf7"},{"_id":"public/tags/随笔/index.html","modified":1465898334918,"shasum":"9162f43667b060d5be7d436def9548f8840556a9"}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"coreImage图片滤镜处理","date":"2016-04-29T02:59:22.000Z","_content":"\n[参考](http://www.csdn.net/article/2015-02-13/2823961-core-image)\n\nCoreImage 是一种图像处理和分析技术，为图片和视频图像提供近实时处理。图像数据类型从核心图形核心视频和图像的I / O框架，可使用GPU或CPU渲染路径。核心图像通过提供一个易于使用的应用程序接口（接口），隐藏低级别图形处理的细节。你不需要知道OpenGL和OpenGLES的细节，利用GPU的能力，你也不需要知道任何关于Grand Central Dispatch（GCD）得到的多核处理的效益。核心图像为你处理细节。\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage1.png)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage1.png)\n\n**CIContext**： 所有图像处理都是在一个CIContext 中完成的，这很像是一个Core Image处理器或是OpenGL的上下文。 \n\n**CIImage**： 这个类保存图像数据。它可以从UIImage、图像文件、或者是像素数据中构造出来。\n\n**CIFilter**： 滤镜类包含一个字典结构，对各种滤镜定义了属于他们各自的属性。滤镜有很多种，比如鲜艳程度滤镜，色彩反转滤镜，剪裁滤镜等等。\n\nCore Image架构\n---\n\nCore Image有一个插件架构，这意味着它允许用户编写自定义的滤镜并与系统提供的滤镜集成来扩展其功能。我们在这篇文章中不会用到Core Image的可扩展性；我提到它只是因为它影响到了框架的API。\n\n包含了Core Image提供的图像滤镜的完整列表，以及用法示例。\n\n无回路有向图\n\n\n\n一个滤镜图表是一个链接在一起的滤镜网络（[无回路有向图](https://en.wikipedia.org/wiki/Directed_acyclic_graph)），使得一个滤镜的输出可以是另一个滤镜的输入。以这种方式，可以实现精心制作的效果。我们将在下面看到如何连接滤镜来创建一个复古的拍照效果。\n\n\n[Core Image Filter Reference](https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CoreImageFilterReference/index.html#//apple_ref/doc/filter/ci/CIColorClamp)包含了Core Image提供的图像滤镜的完整列表，以及用法示例。\n\n\n**本文中的Demo使用iOS9.3测试**\nDemo包含两个:\n  一个是单纯的基本滤镜的处理\n  另一个是照相,图片压缩和简单滤镜处理\n  \n[Demo代码下载](http://pan.baidu.com/s/1jIm3VD0)\n<!-- more -->\n**下面附上本人比较喜欢的几个滤镜的效果：**\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage2.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage3.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage4.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage5.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage6.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage7.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage8.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage9.PNG)\n\n\n","source":"_posts/16-04-29-coreImageDemo.md","raw":"title: coreImage图片滤镜处理\ndate: 2016-04-29 10:59:22\ntags:\n---\n\n[参考](http://www.csdn.net/article/2015-02-13/2823961-core-image)\n\nCoreImage 是一种图像处理和分析技术，为图片和视频图像提供近实时处理。图像数据类型从核心图形核心视频和图像的I / O框架，可使用GPU或CPU渲染路径。核心图像通过提供一个易于使用的应用程序接口（接口），隐藏低级别图形处理的细节。你不需要知道OpenGL和OpenGLES的细节，利用GPU的能力，你也不需要知道任何关于Grand Central Dispatch（GCD）得到的多核处理的效益。核心图像为你处理细节。\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage1.png)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage1.png)\n\n**CIContext**： 所有图像处理都是在一个CIContext 中完成的，这很像是一个Core Image处理器或是OpenGL的上下文。 \n\n**CIImage**： 这个类保存图像数据。它可以从UIImage、图像文件、或者是像素数据中构造出来。\n\n**CIFilter**： 滤镜类包含一个字典结构，对各种滤镜定义了属于他们各自的属性。滤镜有很多种，比如鲜艳程度滤镜，色彩反转滤镜，剪裁滤镜等等。\n\nCore Image架构\n---\n\nCore Image有一个插件架构，这意味着它允许用户编写自定义的滤镜并与系统提供的滤镜集成来扩展其功能。我们在这篇文章中不会用到Core Image的可扩展性；我提到它只是因为它影响到了框架的API。\n\n包含了Core Image提供的图像滤镜的完整列表，以及用法示例。\n\n无回路有向图\n\n\n\n一个滤镜图表是一个链接在一起的滤镜网络（[无回路有向图](https://en.wikipedia.org/wiki/Directed_acyclic_graph)），使得一个滤镜的输出可以是另一个滤镜的输入。以这种方式，可以实现精心制作的效果。我们将在下面看到如何连接滤镜来创建一个复古的拍照效果。\n\n\n[Core Image Filter Reference](https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CoreImageFilterReference/index.html#//apple_ref/doc/filter/ci/CIColorClamp)包含了Core Image提供的图像滤镜的完整列表，以及用法示例。\n\n\n**本文中的Demo使用iOS9.3测试**\nDemo包含两个:\n  一个是单纯的基本滤镜的处理\n  另一个是照相,图片压缩和简单滤镜处理\n  \n[Demo代码下载](http://pan.baidu.com/s/1jIm3VD0)\n<!-- more -->\n**下面附上本人比较喜欢的几个滤镜的效果：**\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage2.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage3.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage4.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage5.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage6.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage7.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage8.PNG)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/coreImage9.PNG)\n\n\n","slug":"16-04-29-coreImageDemo","published":1,"updated":"2016-05-02T11:53:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jig0000pushidc1mtek"},{"title":"更改Mac OS X登陆密码","date":"2016-03-09T09:36:00.000Z","_content":"\n重设Mac OS X开机密码 \n---\n1. 关闭 Mac。如有需要，请按住电源按钮直到 Mac 强制关机。 \n2. 按（但不用按住）电源按钮启动 Mac，然后立即按住键盘上的 Command-R。 \n3. 看到 Apple 标志出现后，您可以松开在上一步中按住的按键。 \n4. 恢复系统屏幕出现后，请选取“实用工具”>“终端”。 \n5. 在“终端”中，输入此命令并按下 Return 键以打开“重设密码”实用工具： \nresetpassword \n6. “重设密码”实用工具窗口应会出现。 \n\n<!-- more -->\n重设密码 \n---\n**按照“重设密码”实用工具中的这些步骤来重设用户帐户的密码。 **  \n1. 在“重设密码”实用工具窗口中，选择密码需重设的用户帐户所在的宗卷。例如，如果客户使用的是默认启动磁盘，则选择“Macintosh HD”。   \n2. 从“选择用户帐户：”弹出式菜单中选择该用户帐户。   \n3. 在“请为此用户输入一个新密码”字段中输入新密码。   \n4. 在“请再一次输入此用户的新密码”栏中输入完全相同的密码。   \n5. 在“为此用户输入新的密码提示（可选）”栏中输入可选的密码提示。   \n6. 点按“存储”。   \n7. 在“重设登录密码”对话框中点按“好”。记下此对话框中的重要信息。   \n8. 关闭“重设密码”窗口。   \n9. 从 Apple 菜单中选择“重新启动”。   \n电脑启动后，请登录到您重设的用户帐户来确认您创建的新密码已经起作用。  \n\n\n","source":"_posts/updateLoginPassword.md","raw":"title: 更改Mac OS X登陆密码 \ndate: 2016-03-09 17:36:00\ntags:\n---\n\n重设Mac OS X开机密码 \n---\n1. 关闭 Mac。如有需要，请按住电源按钮直到 Mac 强制关机。 \n2. 按（但不用按住）电源按钮启动 Mac，然后立即按住键盘上的 Command-R。 \n3. 看到 Apple 标志出现后，您可以松开在上一步中按住的按键。 \n4. 恢复系统屏幕出现后，请选取“实用工具”>“终端”。 \n5. 在“终端”中，输入此命令并按下 Return 键以打开“重设密码”实用工具： \nresetpassword \n6. “重设密码”实用工具窗口应会出现。 \n\n<!-- more -->\n重设密码 \n---\n**按照“重设密码”实用工具中的这些步骤来重设用户帐户的密码。 **  \n1. 在“重设密码”实用工具窗口中，选择密码需重设的用户帐户所在的宗卷。例如，如果客户使用的是默认启动磁盘，则选择“Macintosh HD”。   \n2. 从“选择用户帐户：”弹出式菜单中选择该用户帐户。   \n3. 在“请为此用户输入一个新密码”字段中输入新密码。   \n4. 在“请再一次输入此用户的新密码”栏中输入完全相同的密码。   \n5. 在“为此用户输入新的密码提示（可选）”栏中输入可选的密码提示。   \n6. 点按“存储”。   \n7. 在“重设登录密码”对话框中点按“好”。记下此对话框中的重要信息。   \n8. 关闭“重设密码”窗口。   \n9. 从 Apple 菜单中选择“重新启动”。   \n电脑启动后，请登录到您重设的用户帐户来确认您创建的新密码已经起作用。  \n\n\n","slug":"updateLoginPassword","published":1,"updated":"2016-03-10T02:01:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jle0001pushcuws378f"},{"title":"UITouch-跟着手指走－判断point的范围","date":"2016-04-22T03:37:35.000Z","_content":"响应者对象  \n--\n    在iOS中不是任何对象都能处理事件,只有继承了UIResponder的对象才能接收并处理事件.我们称之为\"响应者对象\".\n\n    UIApplication,UIViewController,UIView都继承自UIResponder,因此它们都是响应者对象,都能够接收并处理事件.\n\nUIResponder\n--\n    UIResponder内部提供了方法来处理事件;\n    > 触摸事件 \n    一次完成的触摸过程,会经历3个状态;\n\nUIView的触摸事件处理\n--\n    1、一根或多根手指开始触摸view,系统会自动调用view下面的方法:\n- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event;  //触摸开始\n- \n    2、一根或者多根手指在view上移动，系统会自动调用view下面的方法（随着手指的移动，会持续调用该方法）:\n\n- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;  //触摸移动\n    3、一根或者多根手指离开view，系统会自动调用view下面的方法：  \n\n- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;  //触摸结束\n    4、触摸结束前，某个系统事件（例如电话呼入）会打断触摸过程，系统会自动调用view下面的方法\n\n- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event; //触摸取消(可能会经历)\n    4个触摸事件的处理方法中，都有 NSSet *touches 和 UIEvent *event 两个参数；\n\n    1、一次完整的触摸过程，只会产生一个事件对象，4个触摸方法都是同一个event参数；\n\n    2、如果两根手指同时触摸一个view，那么view只会调用一次 touchesBegan:withEvent: 方法，touches参数中装着两个UITouch对象；\n\n    3、如果这两根手指一前一后分开触摸同一个view，那么view会分别调用两次 touchesBegan:withEvent:方法， 并且每次调用时的touches参数只包含一个UITouch对象；\n\n    4、根据touches中UITouch个数可以判断出使单点触摸还是多点触摸。\n\n    提示：touches中存放的都是UITouch对象。\n    \n    **下面提供一个简单的Demo，view跟着手指移动**\n    [点击下载Demo](http://pan.baidu.com/s/1boOxFjh)\n    \n        \n   ![1](http://7xrirn.com1.z0.glb.clouddn.com/ball-2.gif) \n    **下面提供一个简单的Demo，view由手指拖着走，并且不能超出屏幕范围**\n    [点击下载Demo](http://pan.baidu.com/s/1i5CWzvn)    \n<!-- more -->\nUITouch类中包含如下成员函数：\n--\n当用户用一根手指触摸屏幕时，会创建一个与手指相关联的UITouch对象；一根手指对应一个UITouch对象；\n\nUITouch的作用:\n---\n\n    保存跟手指相关的信息，比如触摸的位置、时间、阶段；\n\n    当手指移动时，系统会更新同一个UITouch对象，使之能够一直保存该手指的触摸位置；\n\n    当手指离开屏幕时，系统会销毁相应的UITouch对象。\n\n    提示：iPhone开发中，要避免使用双击事件。\n- (CGPoint)locationInView:(UIView *)view：函数返回一个CGPoint类型的值，表示触摸在view这个视图上的位置，这里返回的位置是针对view的坐标系的。调用时传入的view参数为空的话，返回的是触摸点在整个窗口的位置。\n \n- (CGPoint)previousLocationInView:(UIView *)view：该方法记录了前一个坐标值，函数返回也是一个CGPoint类型的值， 表示触摸在view这个视图上的位置，这里返回的位置是针对view的坐标系的。调用时传入的view参数为空的话，返回的是触摸点在整个窗口的位置。\n\n**可使用UITouch的如上两个方法判断方向**\n\n      可使用这个方法，判断point的否在[self.ball frame]范围内\n      if (CGRectContainsPoint([self.ball frame], point)){}\n\n触摸事件的产生：\n---\n\n    1> 发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中；\n\n    2> UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）；\n\n    3> 主窗口会在视图层次结构中找到一个最合适的视图控件来处理触摸事件，这也是整个事件处理过程的第一步；\n\n    4> 找到合适的视图控件后，就会调用视图控件的touches方法来做具体的事件处理。\n\n触摸事件的传递：\n---\n\n    触摸事件的传递是从父控件传递到子控件；\n\n    如果父控件不能接收触摸事件，那么子控件就不可能接收到触摸事件。\n\nUIView不接收触摸事件的三种情况：\n---\n\n    1> 不接受用户交互 ：userInteractionEnable = NO;\n\n    2> 隐藏 ：hidden = YES;\n\n    3> 透明：alpha = 0.0 ~ 0.01\nUIEvent\n--\n    每产生一个事件，就会产生一个UIEvent对象；\n    UIEvent:称为事件对象，记录事件产生的时刻和类型。\n    \n<!-- more -->\n![1](http://7xrirn.com1.z0.glb.clouddn.com/ball.gif)\n```\n#import \"ViewController.h\"\n@interface ViewController ()\n@property(weak, nonatomic) IBOutlet UIView *ball;\n@end\n@implementation ViewController\n- (void)viewDidLoad {\n  [super viewDidLoad];\n  self.ball.userInteractionEnabled = NO;\n}\n- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {\n  UITouch *touch = [touches anyObject];\n  CGPoint point = [touch locationInView:touch.view];\n  _ball.center = point;\n}\n- (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {\n  UITouch *touch = [touches anyObject];\n  CGPoint point = [touch locationInView:touch.view];\n  _ball.center = point;\n}\n@end\n```\n\n\n","source":"_posts/uitouch.md","raw":"title: UITouch-跟着手指走－判断point的范围\ndate: 2016-04-22 11:37:35\ntags:\n---\n响应者对象  \n--\n    在iOS中不是任何对象都能处理事件,只有继承了UIResponder的对象才能接收并处理事件.我们称之为\"响应者对象\".\n\n    UIApplication,UIViewController,UIView都继承自UIResponder,因此它们都是响应者对象,都能够接收并处理事件.\n\nUIResponder\n--\n    UIResponder内部提供了方法来处理事件;\n    > 触摸事件 \n    一次完成的触摸过程,会经历3个状态;\n\nUIView的触摸事件处理\n--\n    1、一根或多根手指开始触摸view,系统会自动调用view下面的方法:\n- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event;  //触摸开始\n- \n    2、一根或者多根手指在view上移动，系统会自动调用view下面的方法（随着手指的移动，会持续调用该方法）:\n\n- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;  //触摸移动\n    3、一根或者多根手指离开view，系统会自动调用view下面的方法：  \n\n- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;  //触摸结束\n    4、触摸结束前，某个系统事件（例如电话呼入）会打断触摸过程，系统会自动调用view下面的方法\n\n- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event; //触摸取消(可能会经历)\n    4个触摸事件的处理方法中，都有 NSSet *touches 和 UIEvent *event 两个参数；\n\n    1、一次完整的触摸过程，只会产生一个事件对象，4个触摸方法都是同一个event参数；\n\n    2、如果两根手指同时触摸一个view，那么view只会调用一次 touchesBegan:withEvent: 方法，touches参数中装着两个UITouch对象；\n\n    3、如果这两根手指一前一后分开触摸同一个view，那么view会分别调用两次 touchesBegan:withEvent:方法， 并且每次调用时的touches参数只包含一个UITouch对象；\n\n    4、根据touches中UITouch个数可以判断出使单点触摸还是多点触摸。\n\n    提示：touches中存放的都是UITouch对象。\n    \n    **下面提供一个简单的Demo，view跟着手指移动**\n    [点击下载Demo](http://pan.baidu.com/s/1boOxFjh)\n    \n        \n   ![1](http://7xrirn.com1.z0.glb.clouddn.com/ball-2.gif) \n    **下面提供一个简单的Demo，view由手指拖着走，并且不能超出屏幕范围**\n    [点击下载Demo](http://pan.baidu.com/s/1i5CWzvn)    \n<!-- more -->\nUITouch类中包含如下成员函数：\n--\n当用户用一根手指触摸屏幕时，会创建一个与手指相关联的UITouch对象；一根手指对应一个UITouch对象；\n\nUITouch的作用:\n---\n\n    保存跟手指相关的信息，比如触摸的位置、时间、阶段；\n\n    当手指移动时，系统会更新同一个UITouch对象，使之能够一直保存该手指的触摸位置；\n\n    当手指离开屏幕时，系统会销毁相应的UITouch对象。\n\n    提示：iPhone开发中，要避免使用双击事件。\n- (CGPoint)locationInView:(UIView *)view：函数返回一个CGPoint类型的值，表示触摸在view这个视图上的位置，这里返回的位置是针对view的坐标系的。调用时传入的view参数为空的话，返回的是触摸点在整个窗口的位置。\n \n- (CGPoint)previousLocationInView:(UIView *)view：该方法记录了前一个坐标值，函数返回也是一个CGPoint类型的值， 表示触摸在view这个视图上的位置，这里返回的位置是针对view的坐标系的。调用时传入的view参数为空的话，返回的是触摸点在整个窗口的位置。\n\n**可使用UITouch的如上两个方法判断方向**\n\n      可使用这个方法，判断point的否在[self.ball frame]范围内\n      if (CGRectContainsPoint([self.ball frame], point)){}\n\n触摸事件的产生：\n---\n\n    1> 发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中；\n\n    2> UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）；\n\n    3> 主窗口会在视图层次结构中找到一个最合适的视图控件来处理触摸事件，这也是整个事件处理过程的第一步；\n\n    4> 找到合适的视图控件后，就会调用视图控件的touches方法来做具体的事件处理。\n\n触摸事件的传递：\n---\n\n    触摸事件的传递是从父控件传递到子控件；\n\n    如果父控件不能接收触摸事件，那么子控件就不可能接收到触摸事件。\n\nUIView不接收触摸事件的三种情况：\n---\n\n    1> 不接受用户交互 ：userInteractionEnable = NO;\n\n    2> 隐藏 ：hidden = YES;\n\n    3> 透明：alpha = 0.0 ~ 0.01\nUIEvent\n--\n    每产生一个事件，就会产生一个UIEvent对象；\n    UIEvent:称为事件对象，记录事件产生的时刻和类型。\n    \n<!-- more -->\n![1](http://7xrirn.com1.z0.glb.clouddn.com/ball.gif)\n```\n#import \"ViewController.h\"\n@interface ViewController ()\n@property(weak, nonatomic) IBOutlet UIView *ball;\n@end\n@implementation ViewController\n- (void)viewDidLoad {\n  [super viewDidLoad];\n  self.ball.userInteractionEnabled = NO;\n}\n- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {\n  UITouch *touch = [touches anyObject];\n  CGPoint point = [touch locationInView:touch.view];\n  _ball.center = point;\n}\n- (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {\n  UITouch *touch = [touches anyObject];\n  CGPoint point = [touch locationInView:touch.view];\n  _ball.center = point;\n}\n@end\n```\n\n\n","slug":"uitouch","published":1,"updated":"2016-06-13T03:41:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jlm0002push75x434mj"},{"title":"标签","date":"2016-03-30T07:26:56.000Z","_content":"[原码下载](http://pan.baidu.com/s/1cv6eUM)\n\nOC原码中用了两种方法实现标签功能:\n  一种是使用collectionView实现\n  另一种是用draw实现\n  \n  显示如下图：\n   ![1](http://7xrirn.com1.z0.glb.clouddn.com/irenaUntitled.gif)    \n   ![2](http://7xrirn.com1.z0.glb.clouddn.com/irenacollection.gif)    \n   \n  \n  ","source":"_posts/tagView.md","raw":"title: 标签\ndate: 2016-03-30 15:26:56\ntags:\n---\n[原码下载](http://pan.baidu.com/s/1cv6eUM)\n\nOC原码中用了两种方法实现标签功能:\n  一种是使用collectionView实现\n  另一种是用draw实现\n  \n  显示如下图：\n   ![1](http://7xrirn.com1.z0.glb.clouddn.com/irenaUntitled.gif)    \n   ![2](http://7xrirn.com1.z0.glb.clouddn.com/irenacollection.gif)    \n   \n  \n  ","slug":"tagView","published":1,"updated":"2016-03-30T07:27:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jlw0003pushu8w3gj7o"},{"title":"显示隐藏tabbar","date":"2016-03-30T01:09:07.000Z","_content":"[参考原文](<http://blog.csdn.net/riveram/article/details/7345577>)\n\n隐藏TabBar：\n---\n```\n- (void)hideTabBar {\n    if (self.tabBarController.tabBar.hidden == YES) {\n        return;\n    }\n    UIView *contentView;\n    if ( [[self.tabBarController.view.subviews objectAtIndex:0] isKindOfClass:[UITabBar class]] )\n        contentView = [self.tabBarController.view.subviews objectAtIndex:1];\n    else\n        contentView = [self.tabBarController.view.subviews objectAtIndex:0];\n    contentView.frame = CGRectMake(contentView.bounds.origin.x,  contentView.bounds.origin.y,  contentView.bounds.size.width, contentView.bounds.size.height + self.tabBarController.tabBar.frame.size.height);        \n    self.tabBarController.tabBar.hidden = YES;\n}\n```\n\n<!-- more -->\n显示TabBar：\n---\n```\n- (void)showTabBar\n{\n    if (self.tabBarController.tabBar.hidden == NO)\n    {\n        return;\n    }\n    UIView *contentView;\n    if ([[self.tabBarController.view.subviews objectAtIndex:0] isKindOfClass:[UITabBar class]])\n        contentView = [self.tabBarController.view.subviews objectAtIndex:1];\n    else\n        contentView = [self.tabBarController.view.subviews objectAtIndex:0];      \n    contentView.frame = CGRectMake(contentView.bounds.origin.x, contentView.bounds.origin.y,  contentView.bounds.size.width, contentView.bounds.size.height - self.tabBarController.tabBar.frame.size.height);\n    self.tabBarController.tabBar.hidden = NO;\n}\n```","source":"_posts/tabbarShowOrHidden.md","raw":"title: 显示隐藏tabbar\ndate: 2016-03-30 09:09:07\ntags:\n---\n[参考原文](<http://blog.csdn.net/riveram/article/details/7345577>)\n\n隐藏TabBar：\n---\n```\n- (void)hideTabBar {\n    if (self.tabBarController.tabBar.hidden == YES) {\n        return;\n    }\n    UIView *contentView;\n    if ( [[self.tabBarController.view.subviews objectAtIndex:0] isKindOfClass:[UITabBar class]] )\n        contentView = [self.tabBarController.view.subviews objectAtIndex:1];\n    else\n        contentView = [self.tabBarController.view.subviews objectAtIndex:0];\n    contentView.frame = CGRectMake(contentView.bounds.origin.x,  contentView.bounds.origin.y,  contentView.bounds.size.width, contentView.bounds.size.height + self.tabBarController.tabBar.frame.size.height);        \n    self.tabBarController.tabBar.hidden = YES;\n}\n```\n\n<!-- more -->\n显示TabBar：\n---\n```\n- (void)showTabBar\n{\n    if (self.tabBarController.tabBar.hidden == NO)\n    {\n        return;\n    }\n    UIView *contentView;\n    if ([[self.tabBarController.view.subviews objectAtIndex:0] isKindOfClass:[UITabBar class]])\n        contentView = [self.tabBarController.view.subviews objectAtIndex:1];\n    else\n        contentView = [self.tabBarController.view.subviews objectAtIndex:0];      \n    contentView.frame = CGRectMake(contentView.bounds.origin.x, contentView.bounds.origin.y,  contentView.bounds.size.width, contentView.bounds.size.height - self.tabBarController.tabBar.frame.size.height);\n    self.tabBarController.tabBar.hidden = NO;\n}\n```","slug":"tabbarShowOrHidden","published":1,"updated":"2016-03-30T01:10:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jly0004pusho6a1fh1b"},{"title":"suibi","date":"2016-01-24T08:51:22.000Z","_content":"\n第一篇","source":"_posts/suibi.md","raw":"title: suibi\ndate: 2016-01-24 16:51:22\ntags: '随笔'\n---\n\n第一篇","slug":"suibi","published":1,"updated":"2016-02-14T09:18:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jlz0005pushng36w5es"},{"title":"设置statusBar背景色","date":"2016-05-13T08:54:21.000Z","_content":"\n\n本文使用iOS9.3\n\n* ![效果显示](http://7xrirn.com1.z0.glb.clouddn.com/statusBarstatusBarColorChange.gif)\n\n*本人写的这个有一个侧滑，开始只在navigationController中将状态栏设置成了light，发现不行，后来将侧滑的控制器也设置成了白色，才可以*\n\n设置statusBar背景颜色\n---\n```\n [[UINavigationBar appearance] setTintColor:[UIColor whiteColor]];\n  UIView *statusBarView =\n      [[UIView alloc] initWithFrame:CGRectMake(0, 0, 320, 20)];\n  statusBarView.backgroundColor = [UIColor blackColor];\n  [self.view addSubview:statusBarView];\n```\n\n<!-- more -->\n设置statusBar文字及电池的颜色\n---\n```\n- (UIStatusBarStyle)preferredStatusBarStyle {\n  return UIStatusBarStyleLightContent;\n}\n```","source":"_posts/statusBarBackgroundColor.md","raw":"title: 设置statusBar背景色 \ndate: 2016-05-13 16:54:21\ntags:\n---\n\n\n本文使用iOS9.3\n\n* ![效果显示](http://7xrirn.com1.z0.glb.clouddn.com/statusBarstatusBarColorChange.gif)\n\n*本人写的这个有一个侧滑，开始只在navigationController中将状态栏设置成了light，发现不行，后来将侧滑的控制器也设置成了白色，才可以*\n\n设置statusBar背景颜色\n---\n```\n [[UINavigationBar appearance] setTintColor:[UIColor whiteColor]];\n  UIView *statusBarView =\n      [[UIView alloc] initWithFrame:CGRectMake(0, 0, 320, 20)];\n  statusBarView.backgroundColor = [UIColor blackColor];\n  [self.view addSubview:statusBarView];\n```\n\n<!-- more -->\n设置statusBar文字及电池的颜色\n---\n```\n- (UIStatusBarStyle)preferredStatusBarStyle {\n  return UIStatusBarStyleLightContent;\n}\n```","slug":"statusBarBackgroundColor","published":1,"updated":"2016-05-20T11:27:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jm40008push6ajosu1u"},{"title":"弹框－发送邮件","date":"2016-03-11T06:50:28.000Z","_content":"调用\n---\n```\n    /**\n     *  需要弹框发邮件\n     */\n    if ([self isSendMail]) {\n      [self sendEmailAction];\n    }\n```\n\n<!-- more -->\n\n```\n- (BOOL)isSendMail {\n  Class mailClass = (NSClassFromString(@\"MFMailComposeViewController\"));\n  if (!mailClass) {\n    NSLog(@\"不支持应用内发送邮件功能\");\n    return NO;\n  }\n  //获取用户是否设置了邮件账户：\n  if ([MFMailComposeViewController canSendMail]) {\n    // 用户已设置邮件账户\n    [self sendEmailAction]; // 调用发送邮件的代码\n    return NO;\n  }\n  return YES;\n}\n- (void)sendEmailAction {\n  // 邮件服务器\n  MFMailComposeViewController *mailCompose =\n      [[MFMailComposeViewController alloc] init];\n  // 设置邮件代理\n  [mailCompose setMailComposeDelegate:self];\n  // 设置邮件主题\n  [mailCompose setSubject:@\"邮件标题\"];\n  // 设置收件人\n  [mailCompose setToRecipients:@[ [_emailText text] ]];\n  /**\n   *  设置邮件的正文内容\n   */\n  NSString *emailContent = @\"邮件内容\";\n  [mailCompose setMessageBody:emailContent isHTML:NO];\n  /**\n   *  添加附件\n   */\n  //  UIImage *image = [UIImage imageNamed:@\"image\"];\n  NSData *imageData = UIImagePNGRepresentation(_image);\n  [mailCompose addAttachmentData:imageData\n                        mimeType:@\"\"\n                        fileName:@\"custom.\"\n                                 @\"png\"];\n  // 弹出邮件发送视图\n  [self presentViewController:mailCompose animated:YES completion:nil];\n}\n```\n\n```\n// MFMailComposeViewControllerDelegate的代理方法：\n- (void)mailComposeController:(MFMailComposeViewController *)controller\n          didFinishWithResult:(MFMailComposeResult)result\n                        error:(NSError *)error {\n  switch (result) {\n  case MFMailComposeResultCancelled: // 用户取消编辑\n    NSLog(@\"Mail send canceled...\");\n    break;\n  case MFMailComposeResultSaved: // 用户保存邮件\n    NSLog(@\"Mail saved...\");\n    break;\n  case MFMailComposeResultSent: // 用户点击发送\n    NSLog(@\"Mail sent...\");\n    break;\n  case MFMailComposeResultFailed: // 用户尝试保存或发送邮件失败\n    NSLog(@\"Mail send errored: %@...\", [error localizedDescription]);\n    break;\n  }\n  // 关闭邮件发送视图\n  [self dismissViewControllerAnimated:YES completion:nil];\n}\n```","source":"_posts/sendMailPop.md","raw":"title: 弹框－发送邮件\ndate: 2016-03-11 14:50:28\ntags:\n---\n调用\n---\n```\n    /**\n     *  需要弹框发邮件\n     */\n    if ([self isSendMail]) {\n      [self sendEmailAction];\n    }\n```\n\n<!-- more -->\n\n```\n- (BOOL)isSendMail {\n  Class mailClass = (NSClassFromString(@\"MFMailComposeViewController\"));\n  if (!mailClass) {\n    NSLog(@\"不支持应用内发送邮件功能\");\n    return NO;\n  }\n  //获取用户是否设置了邮件账户：\n  if ([MFMailComposeViewController canSendMail]) {\n    // 用户已设置邮件账户\n    [self sendEmailAction]; // 调用发送邮件的代码\n    return NO;\n  }\n  return YES;\n}\n- (void)sendEmailAction {\n  // 邮件服务器\n  MFMailComposeViewController *mailCompose =\n      [[MFMailComposeViewController alloc] init];\n  // 设置邮件代理\n  [mailCompose setMailComposeDelegate:self];\n  // 设置邮件主题\n  [mailCompose setSubject:@\"邮件标题\"];\n  // 设置收件人\n  [mailCompose setToRecipients:@[ [_emailText text] ]];\n  /**\n   *  设置邮件的正文内容\n   */\n  NSString *emailContent = @\"邮件内容\";\n  [mailCompose setMessageBody:emailContent isHTML:NO];\n  /**\n   *  添加附件\n   */\n  //  UIImage *image = [UIImage imageNamed:@\"image\"];\n  NSData *imageData = UIImagePNGRepresentation(_image);\n  [mailCompose addAttachmentData:imageData\n                        mimeType:@\"\"\n                        fileName:@\"custom.\"\n                                 @\"png\"];\n  // 弹出邮件发送视图\n  [self presentViewController:mailCompose animated:YES completion:nil];\n}\n```\n\n```\n// MFMailComposeViewControllerDelegate的代理方法：\n- (void)mailComposeController:(MFMailComposeViewController *)controller\n          didFinishWithResult:(MFMailComposeResult)result\n                        error:(NSError *)error {\n  switch (result) {\n  case MFMailComposeResultCancelled: // 用户取消编辑\n    NSLog(@\"Mail send canceled...\");\n    break;\n  case MFMailComposeResultSaved: // 用户保存邮件\n    NSLog(@\"Mail saved...\");\n    break;\n  case MFMailComposeResultSent: // 用户点击发送\n    NSLog(@\"Mail sent...\");\n    break;\n  case MFMailComposeResultFailed: // 用户尝试保存或发送邮件失败\n    NSLog(@\"Mail send errored: %@...\", [error localizedDescription]);\n    break;\n  }\n  // 关闭邮件发送视图\n  [self dismissViewControllerAnimated:YES completion:nil];\n}\n```","slug":"sendMailPop","published":1,"updated":"2016-03-11T06:56:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jm60009pushfoaknk73"},{"title":"sendMail 发邮件","date":"2016-02-16T06:17:03.000Z","_content":" \n使用SKPSMTPMessage无需弹框发送邮件\n--\n\n```\n//使用SKPSMTPMessage无需弹框发送邮件\n我使用的是\n1.导入头文件\n#import \"NSData+Base64Additions.h\"\n#import \"SKPSMTPMessage.h\"\n  SKPSMTPMessage *mail = [[SKPSMTPMessage alloc] init];\n  [mail setSubject:@\"标题\"];                 // 设置邮件主题\n  [mail setToEmail:@\".com\"];                 // 目标邮箱\n  [mail setFromEmail:@\".com\"];               // 发送者邮箱\n  [mail setRelayHost:@\"smtp.qq.com\"];        // 发送邮件代理服务器\n  [mail setRequiresAuth:YES];\n  [mail setLogin:@\".com\"];                   // 发送者邮箱账号\n  [mail setPass:@\"\"];                        // 发送者邮箱密码\n  [mail setWantsSecure:YES];                 // 需要加密\n  [mail setDelegate:self];\n```\n<!-- more -->\n\n```\n  //设置邮件正文内容：\n  NSString *content =\n      [NSString stringWithCString:\"邮件内容\" encoding:NSUTF8StringEncoding];\n  NSDictionary *plainPart = @{\n    kSKPSMTPPartContentTypeKey : @\"text/plain\",\n    kSKPSMTPPartMessageKey : content,\n    kSKPSMTPPartContentTransferEncodingKey : @\"8bit\"\n  };\n  // 添加附件\n  NSString *vcfPath =\n      [[NSBundle mainBundle] pathForResource:@\"test\" ofType:@\"png\"];\n  NSData *vcfData = [NSData dataWithContentsOfFile:vcfPath];\n// _image 截取的图片 \n  vcfData = UIImagePNGRepresentation(_image);\n  NSDictionary *vcfPart = [NSDictionary\n      dictionaryWithObjectsAndKeys:\n          @\"text/directory;\\r\\n\\tx-unix-mode=0644;\\r\\n\\tname=\\\"test.png\\\"\",\n          kSKPSMTPPartContentTypeKey, @\"attachment;\\r\\n\\tfilename=\\\"test.png\\\"\",\n          kSKPSMTPPartContentDispositionKey, [vcfData encodeBase64ForData],\n          kSKPSMTPPartMessageKey, @\"base64\",\n          kSKPSMTPPartContentTransferEncodingKey, nil];\n  //    执行发送邮件代码：\n  [mail\n      setParts:@[ plainPart, vcfPart ]]; // 邮件首部字段、邮件内容格式和传输编码\n  [mail send];\n#pragma SKPSMTPMessage 代理方法\n- (void)messageSent:(SKPSMTPMessage *)message {\n  NSLog(@\"%@\", message);\n}\n- (void)messageFailed:(SKPSMTPMessage *)message error:(NSError *)error {\n  NSLog(@\"message - %@\\nerror - %@\", message, error);\n}\n```\nskpsmtpmessage邮件标题中文乱码问题\n--\n解决主题使用中文乱码问题\n\nSKPSMTPMessage.m的sendParts里:\n修改:\n\n```\nNSData *messageData = [message dataUsingEncoding:NSASCIIStringEncoding allowLossyConversion:YES];\n为\nNSData *messageData = [message dataUsingEncoding:NSUTF8StringEncoding allowLossyConversion:YES];\n```\n\n\n","source":"_posts/sendMail.md","raw":"title: sendMail 发邮件 \ndate: 2016-02-16 14:17:03\ntags:\n---\n \n使用SKPSMTPMessage无需弹框发送邮件\n--\n\n```\n//使用SKPSMTPMessage无需弹框发送邮件\n我使用的是\n1.导入头文件\n#import \"NSData+Base64Additions.h\"\n#import \"SKPSMTPMessage.h\"\n  SKPSMTPMessage *mail = [[SKPSMTPMessage alloc] init];\n  [mail setSubject:@\"标题\"];                 // 设置邮件主题\n  [mail setToEmail:@\".com\"];                 // 目标邮箱\n  [mail setFromEmail:@\".com\"];               // 发送者邮箱\n  [mail setRelayHost:@\"smtp.qq.com\"];        // 发送邮件代理服务器\n  [mail setRequiresAuth:YES];\n  [mail setLogin:@\".com\"];                   // 发送者邮箱账号\n  [mail setPass:@\"\"];                        // 发送者邮箱密码\n  [mail setWantsSecure:YES];                 // 需要加密\n  [mail setDelegate:self];\n```\n<!-- more -->\n\n```\n  //设置邮件正文内容：\n  NSString *content =\n      [NSString stringWithCString:\"邮件内容\" encoding:NSUTF8StringEncoding];\n  NSDictionary *plainPart = @{\n    kSKPSMTPPartContentTypeKey : @\"text/plain\",\n    kSKPSMTPPartMessageKey : content,\n    kSKPSMTPPartContentTransferEncodingKey : @\"8bit\"\n  };\n  // 添加附件\n  NSString *vcfPath =\n      [[NSBundle mainBundle] pathForResource:@\"test\" ofType:@\"png\"];\n  NSData *vcfData = [NSData dataWithContentsOfFile:vcfPath];\n// _image 截取的图片 \n  vcfData = UIImagePNGRepresentation(_image);\n  NSDictionary *vcfPart = [NSDictionary\n      dictionaryWithObjectsAndKeys:\n          @\"text/directory;\\r\\n\\tx-unix-mode=0644;\\r\\n\\tname=\\\"test.png\\\"\",\n          kSKPSMTPPartContentTypeKey, @\"attachment;\\r\\n\\tfilename=\\\"test.png\\\"\",\n          kSKPSMTPPartContentDispositionKey, [vcfData encodeBase64ForData],\n          kSKPSMTPPartMessageKey, @\"base64\",\n          kSKPSMTPPartContentTransferEncodingKey, nil];\n  //    执行发送邮件代码：\n  [mail\n      setParts:@[ plainPart, vcfPart ]]; // 邮件首部字段、邮件内容格式和传输编码\n  [mail send];\n#pragma SKPSMTPMessage 代理方法\n- (void)messageSent:(SKPSMTPMessage *)message {\n  NSLog(@\"%@\", message);\n}\n- (void)messageFailed:(SKPSMTPMessage *)message error:(NSError *)error {\n  NSLog(@\"message - %@\\nerror - %@\", message, error);\n}\n```\nskpsmtpmessage邮件标题中文乱码问题\n--\n解决主题使用中文乱码问题\n\nSKPSMTPMessage.m的sendParts里:\n修改:\n\n```\nNSData *messageData = [message dataUsingEncoding:NSASCIIStringEncoding allowLossyConversion:YES];\n为\nNSData *messageData = [message dataUsingEncoding:NSUTF8StringEncoding allowLossyConversion:YES];\n```\n\n\n","slug":"sendMail","published":1,"updated":"2016-02-17T09:33:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jm8000apush49v0kymx"},{"title":"查看真机 / 模拟器沙盒","date":"2016-03-23T02:09:18.000Z","_content":" 查看真机沙盒\n ---\n ![1](http://7xrirn.com1.z0.glb.clouddn.com/irenasandbox_1.png)\n ![2](http://7xrirn.com1.z0.glb.clouddn.com/irenasandbox_2.png)\n ![3](http://7xrirn.com1.z0.glb.clouddn.com/irenasandbox_3.png)\n ![4](http://7xrirn.com1.z0.glb.clouddn.com/irenasandbox_4.png)\n \n \n \n 查看模拟器沙盒\n ---\n 查看模拟器沙盒，可使用simpholders工具，点击下面的下载，可下载simpholders破解版工具\n [下载](http://pan.baidu.com/s/1baRwiM)\n ","source":"_posts/seeSandboxDirectory.md","raw":"title: 查看真机 / 模拟器沙盒\ndate: 2016-03-23 10:09:18\ntags:\n---\n 查看真机沙盒\n ---\n ![1](http://7xrirn.com1.z0.glb.clouddn.com/irenasandbox_1.png)\n ![2](http://7xrirn.com1.z0.glb.clouddn.com/irenasandbox_2.png)\n ![3](http://7xrirn.com1.z0.glb.clouddn.com/irenasandbox_3.png)\n ![4](http://7xrirn.com1.z0.glb.clouddn.com/irenasandbox_4.png)\n \n \n \n 查看模拟器沙盒\n ---\n 查看模拟器沙盒，可使用simpholders工具，点击下面的下载，可下载simpholders破解版工具\n [下载](http://pan.baidu.com/s/1baRwiM)\n ","slug":"seeSandboxDirectory","published":1,"updated":"2016-03-23T02:09:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jma000bpushghi9xuzv"},{"title":"iOS Rsa","date":"2016-03-14T06:01:29.000Z","_content":"[生成秘匙参考原文](http://witcheryne.iteye.com/blog/2171850)\n---\n[ OC Demo 下载 ](http://pan.baidu.com/s/1gews7mV)\n---\n\n加密图解\n---\n ![效果显示](http://7xrirn.com1.z0.glb.clouddn.com/rsa.png)\n\n**本文主要讲解iOS方面的RSA加解密，demo也是针对iOS的加解密，具体demo可由文章最上面点OC Demo下载链接下载**\n\n加解密的具体代码较分散，就不一一在文件中展示，如需要可在文章开头下载\n\n**其中公钥和私钥文件由下面的这段代码块生成，如果你只包含加密，无需解密，可不使用下面代码块，加密文件服务器由服务器端提供**\n```\n#!/usr/bin/env bash\necho \"Generating RSA key pair ...\"\necho \"2048 RSA key: private_key.pem\"\nopenssl genrsa -out private_key.pem 2048\n```\n\n```\necho \"create certification require file: rsaCertReq.csr\"\nopenssl req -new -key private_key.pem -out rsaCertReq.csr\n```\n<!-- more -->\n```\necho \"create certification using x509: rsaCert.crt\"\nopenssl x509 -req -days 3650 -in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt\n```\n\n```\necho \"create public_key.der For IOS\"\nopenssl x509 -outform der -in rsaCert.crt -out public_key.der\n```\n\n```\necho \"create private_key.p12 For IOS. Please remember your password. The password will be used in iOS.\"\nopenssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt\n```\n\n```\necho \"create rsa_public_key.pem For Java\"\nopenssl rsa -in private_key.pem -out rsa_public_key.pem -pubout\necho \"create pkcs8_private_key.pem For Java\"\nopenssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt\necho \"finished.\"\n```\n**Tips:**\n在创建证书的时候, terminal会提示输入证书信息. 根据输入对应信息就OK. \n在创建p12密匙时, 会提示输入密码, 此时的密码必须记住, 之后解密会用到.\n如果上面指令有问题,请参考最新的openssl官方文档, 以官方的为准. \n\n","source":"_posts/rsaBase64.md","raw":"title: iOS Rsa\ndate: 2016-03-14 14:01:29\ntags:\n---\n[生成秘匙参考原文](http://witcheryne.iteye.com/blog/2171850)\n---\n[ OC Demo 下载 ](http://pan.baidu.com/s/1gews7mV)\n---\n\n加密图解\n---\n ![效果显示](http://7xrirn.com1.z0.glb.clouddn.com/rsa.png)\n\n**本文主要讲解iOS方面的RSA加解密，demo也是针对iOS的加解密，具体demo可由文章最上面点OC Demo下载链接下载**\n\n加解密的具体代码较分散，就不一一在文件中展示，如需要可在文章开头下载\n\n**其中公钥和私钥文件由下面的这段代码块生成，如果你只包含加密，无需解密，可不使用下面代码块，加密文件服务器由服务器端提供**\n```\n#!/usr/bin/env bash\necho \"Generating RSA key pair ...\"\necho \"2048 RSA key: private_key.pem\"\nopenssl genrsa -out private_key.pem 2048\n```\n\n```\necho \"create certification require file: rsaCertReq.csr\"\nopenssl req -new -key private_key.pem -out rsaCertReq.csr\n```\n<!-- more -->\n```\necho \"create certification using x509: rsaCert.crt\"\nopenssl x509 -req -days 3650 -in rsaCertReq.csr -signkey private_key.pem -out rsaCert.crt\n```\n\n```\necho \"create public_key.der For IOS\"\nopenssl x509 -outform der -in rsaCert.crt -out public_key.der\n```\n\n```\necho \"create private_key.p12 For IOS. Please remember your password. The password will be used in iOS.\"\nopenssl pkcs12 -export -out private_key.p12 -inkey private_key.pem -in rsaCert.crt\n```\n\n```\necho \"create rsa_public_key.pem For Java\"\nopenssl rsa -in private_key.pem -out rsa_public_key.pem -pubout\necho \"create pkcs8_private_key.pem For Java\"\nopenssl pkcs8 -topk8 -in private_key.pem -out pkcs8_private_key.pem -nocrypt\necho \"finished.\"\n```\n**Tips:**\n在创建证书的时候, terminal会提示输入证书信息. 根据输入对应信息就OK. \n在创建p12密匙时, 会提示输入密码, 此时的密码必须记住, 之后解密会用到.\n如果上面指令有问题,请参考最新的openssl官方文档, 以官方的为准. \n\n","slug":"rsaBase64","published":1,"updated":"2016-05-20T08:30:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jmc000cpushtofv82kz"},{"title":"使用U盘装MAC OS X","date":"2016-02-29T08:05:24.000Z","_content":"\n我装的是OS X EI Capitan\n有两种方法：\n一，网络恢复\n    必须在能用国外的网的基础上才可以（我是开的vpn），我选择的是第二种方法\n二，将U盘设置成启动盘，直接安装\n  安装的先决条件\n  1. 准备一个不小到8G的盘  \n  2. 将盘插入电脑的usb口中，打开`磁盘工具`  \n  3. 将盘抹掉，如下图  \n  4. ![1](http://7xrirn.com1.z0.glb.clouddn.com/irena1.png)\n  \n\n<!-- more -->\n继续上面的步骤：\n  * 从App Store下载完整的 OS X 安装器（就是重新下一下）  \n    ![2](http://7xrirn.com1.z0.glb.clouddn.com/irena2.png)\n  * 一定要将如下文件放到finder-application(应用程序中)  \n  ![3](http://7xrirn.com1.z0.glb.clouddn.com/irena3.png)\n  * 这个文件一般由双击.dmg包打开后就可以看见\n  * 然后在终端执行如下代码，下面代码中的123为盘的名称    \n  * ```终端:sudo /Applications/Install\\ OS\\ X\\ El\\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/123 --applicationpath /Applications/Install\\ OS\\ X\\ El\\ Capitan.app```\n  * 将上面的代码粘贴到终端后*回车*，会让选择y或n，输入y\n  * 需要等待一会我大概是30分钟左右吧\n  * 完成后推出磁盘\n  \n\n\n使用u盘安装\n  * 将u盘插到电脑上\n  * 重启电脑，一直按option(alt)键\n  * 选择你的安装盘\n  * 继续...\n  * 你可能会出现如下问题\n  * 不能验证这个“安装 os x ei capitan”应用程序副本,它在下载过程中可能已遭破坏\n  * 这个问题的解决方法就是，系统时间改成OS X EI Capitan安装包右面的时间，重启安装即可\n  * 修改时间的终端命令：date 100114102015.30\n      10是月，01是日，14是时，10是分，2015是年，30是秒\n       注意:只要年月日一样就行  \n   ![4](http://7xrirn.com1.z0.glb.clouddn.com/irena4.png)\n\n\n\n遇到问题的解决：\n1. 给苹果打电话求助     `*电话：400-666-8800*`\n2. 使用搜索引擎 `（就是不管他问题说的多明显，一定要先百度，因为有可能和你想的并不相同）`","source":"_posts/macInstallWithUdisk.md","raw":"title: 使用U盘装MAC OS X\ndate: 2016-02-29 16:05:24\ntags:\n---\n\n我装的是OS X EI Capitan\n有两种方法：\n一，网络恢复\n    必须在能用国外的网的基础上才可以（我是开的vpn），我选择的是第二种方法\n二，将U盘设置成启动盘，直接安装\n  安装的先决条件\n  1. 准备一个不小到8G的盘  \n  2. 将盘插入电脑的usb口中，打开`磁盘工具`  \n  3. 将盘抹掉，如下图  \n  4. ![1](http://7xrirn.com1.z0.glb.clouddn.com/irena1.png)\n  \n\n<!-- more -->\n继续上面的步骤：\n  * 从App Store下载完整的 OS X 安装器（就是重新下一下）  \n    ![2](http://7xrirn.com1.z0.glb.clouddn.com/irena2.png)\n  * 一定要将如下文件放到finder-application(应用程序中)  \n  ![3](http://7xrirn.com1.z0.glb.clouddn.com/irena3.png)\n  * 这个文件一般由双击.dmg包打开后就可以看见\n  * 然后在终端执行如下代码，下面代码中的123为盘的名称    \n  * ```终端:sudo /Applications/Install\\ OS\\ X\\ El\\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/123 --applicationpath /Applications/Install\\ OS\\ X\\ El\\ Capitan.app```\n  * 将上面的代码粘贴到终端后*回车*，会让选择y或n，输入y\n  * 需要等待一会我大概是30分钟左右吧\n  * 完成后推出磁盘\n  \n\n\n使用u盘安装\n  * 将u盘插到电脑上\n  * 重启电脑，一直按option(alt)键\n  * 选择你的安装盘\n  * 继续...\n  * 你可能会出现如下问题\n  * 不能验证这个“安装 os x ei capitan”应用程序副本,它在下载过程中可能已遭破坏\n  * 这个问题的解决方法就是，系统时间改成OS X EI Capitan安装包右面的时间，重启安装即可\n  * 修改时间的终端命令：date 100114102015.30\n      10是月，01是日，14是时，10是分，2015是年，30是秒\n       注意:只要年月日一样就行  \n   ![4](http://7xrirn.com1.z0.glb.clouddn.com/irena4.png)\n\n\n\n遇到问题的解决：\n1. 给苹果打电话求助     `*电话：400-666-8800*`\n2. 使用搜索引擎 `（就是不管他问题说的多明显，一定要先百度，因为有可能和你想的并不相同）`","slug":"macInstallWithUdisk","published":1,"updated":"2016-03-04T07:24:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jme000dpushs3ybanix"},{"title":"验证手机号和银行卡号","date":"2016-03-11T06:09:44.000Z","_content":"\n```\n//判断一个号码是否为手机号码\nBOOL isValidateMobile(NSString *mobile);\n```\n\n```\n//判断是否为一个合法的银行卡号\nBOOL isValidateBankCard(NSString *bankNo);\n```\n\n<!-- more -->\n\n```\n/*手机号码验证*/\nBOOL isValidateMobile(NSString *mobile) {\n  //手机号以13, 15,18开头,八个 \\d 数字字符\n  NSString *phoneRegex = @\"^((13[0-9])|(15[^4,\\\\D])|(18[0,0-9]))\\\\d{8}$\";\n  NSPredicate *phoneTest =\n      [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", phoneRegex];\n  return [phoneTest evaluateWithObject:mobile];\n}\n```\n\n```\n// 判断银行卡\nBOOL isValidateBankCard(NSString *bankCard) {\n  NSString *cardRegex =\n      @\"/^\\\\d{16,19}$|^\\\\d{6}\\\\d{10,13}$|^\\\\d{4}\\\\d{4}\\\\d{4}\\\\d{4,7}$/\";\n  NSPredicate *bankTest =\n      [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", cardRegex];\n  return [bankTest evaluateWithObject:bankCard];\n}\n```","source":"_posts/isValidateBankCardAndMobile.md","raw":"title: 验证手机号和银行卡号\ndate: 2016-03-11 14:09:44\ntags:\n---\n\n```\n//判断一个号码是否为手机号码\nBOOL isValidateMobile(NSString *mobile);\n```\n\n```\n//判断是否为一个合法的银行卡号\nBOOL isValidateBankCard(NSString *bankNo);\n```\n\n<!-- more -->\n\n```\n/*手机号码验证*/\nBOOL isValidateMobile(NSString *mobile) {\n  //手机号以13, 15,18开头,八个 \\d 数字字符\n  NSString *phoneRegex = @\"^((13[0-9])|(15[^4,\\\\D])|(18[0,0-9]))\\\\d{8}$\";\n  NSPredicate *phoneTest =\n      [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", phoneRegex];\n  return [phoneTest evaluateWithObject:mobile];\n}\n```\n\n```\n// 判断银行卡\nBOOL isValidateBankCard(NSString *bankCard) {\n  NSString *cardRegex =\n      @\"/^\\\\d{16,19}$|^\\\\d{6}\\\\d{10,13}$|^\\\\d{4}\\\\d{4}\\\\d{4}\\\\d{4,7}$/\";\n  NSPredicate *bankTest =\n      [NSPredicate predicateWithFormat:@\"SELF MATCHES %@\", cardRegex];\n  return [bankTest evaluateWithObject:bankCard];\n}\n```","slug":"isValidateBankCardAndMobile","published":1,"updated":"2016-03-11T06:10:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jmf000epushtasj7t1n"},{"title":"空值判断","date":"2016-03-11T05:19:36.000Z","_content":"```\n//空值判断\nBOOL isNotNULL(id object);\n```\n\n```\nBOOL isNotNULL(id object) {\n  if ([object isKindOfClass:[NSNull class]]) {\n    return NO;\n  } else if ([object isKindOfClass:[NSString class]]) {\n    if ([object isEqualToString:@\"(null)\"]) {\n      return NO;\n    }\n  } else if (!object) {\n    return NO;\n  }\n  return YES;\n}\n```","source":"_posts/isNotNULL.md","raw":"title: 空值判断\ndate: 2016-03-11 13:19:36\ntags:\n---\n```\n//空值判断\nBOOL isNotNULL(id object);\n```\n\n```\nBOOL isNotNULL(id object) {\n  if ([object isKindOfClass:[NSNull class]]) {\n    return NO;\n  } else if ([object isKindOfClass:[NSString class]]) {\n    if ([object isEqualToString:@\"(null)\"]) {\n      return NO;\n    }\n  } else if (!object) {\n    return NO;\n  }\n  return YES;\n}\n```","slug":"isNotNULL","published":1,"updated":"2016-03-11T06:03:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jmh000fpushwaendjj1"},{"title":"十六进制颜色转换成UIColor","date":"2016-02-24T05:41:53.000Z","_content":"\n[原文出自](http://wonderzl.iteye.com/blog/1569123)\n\n\ninterface\n---\n```\n@interface UIColor (hex)\n  + (UIColor *)colorWithHexString:(NSString *)stringToConvert;\n@end\n```\n\nimplementation\n---\n\n```\n#import <QuartzCore/QuartzCore.h>\n#define DEFAULT_VOID_COLOR [UIColor whiteColor]\n@implementation UIColor (hex)\n+ (UIColor *)colorWithHexString:(NSString *)stringToConvert {\n  NSString *cString = [[stringToConvert\n      stringByTrimmingCharactersInSet:[NSCharacterSet\n                                          whitespaceAndNewlineCharacterSet]]\n      uppercaseString];\n  if ([cString length] < 6)\n    return DEFAULT_VOID_COLOR;\n  if ([cString hasPrefix:@\"#\"])\n    cString = [cString substringFromIndex:1];\n  if ([cString length] != 6)\n    return DEFAULT_VOID_COLOR;\n```\n<!-- more -->\n\n```\n  NSRange range;\n  range.location = 0;\n  range.length = 2;\n  NSString *rString = [cString substringWithRange:range];\n  range.location = 2;\n  NSString *gString = [cString substringWithRange:range];\n  range.location = 4;\n  NSString *bString = [cString substringWithRange:range];\n  unsigned int r, g, b;\n  [[NSScanner scannerWithString:rString] scanHexInt:&r];\n  [[NSScanner scannerWithString:gString] scanHexInt:&g];\n  [[NSScanner scannerWithString:bString] scanHexInt:&b];\n  return [UIColor colorWithRed:((float)r / 255.0f)\n                         green:((float)g / 255.0f)\n                          blue:((float)b / 255.0f)\n                         alpha:1.0f];\n}\n@end\n```\n\n使用\n---\n```\n[UIColor colorWithHexString:@\"4fc2e9\"]\n```","source":"_posts/hexStringConvertUIColor.md","raw":"title: 十六进制颜色转换成UIColor \ndate: 2016-02-24 13:41:53\ntags:\n---\n\n[原文出自](http://wonderzl.iteye.com/blog/1569123)\n\n\ninterface\n---\n```\n@interface UIColor (hex)\n  + (UIColor *)colorWithHexString:(NSString *)stringToConvert;\n@end\n```\n\nimplementation\n---\n\n```\n#import <QuartzCore/QuartzCore.h>\n#define DEFAULT_VOID_COLOR [UIColor whiteColor]\n@implementation UIColor (hex)\n+ (UIColor *)colorWithHexString:(NSString *)stringToConvert {\n  NSString *cString = [[stringToConvert\n      stringByTrimmingCharactersInSet:[NSCharacterSet\n                                          whitespaceAndNewlineCharacterSet]]\n      uppercaseString];\n  if ([cString length] < 6)\n    return DEFAULT_VOID_COLOR;\n  if ([cString hasPrefix:@\"#\"])\n    cString = [cString substringFromIndex:1];\n  if ([cString length] != 6)\n    return DEFAULT_VOID_COLOR;\n```\n<!-- more -->\n\n```\n  NSRange range;\n  range.location = 0;\n  range.length = 2;\n  NSString *rString = [cString substringWithRange:range];\n  range.location = 2;\n  NSString *gString = [cString substringWithRange:range];\n  range.location = 4;\n  NSString *bString = [cString substringWithRange:range];\n  unsigned int r, g, b;\n  [[NSScanner scannerWithString:rString] scanHexInt:&r];\n  [[NSScanner scannerWithString:gString] scanHexInt:&g];\n  [[NSScanner scannerWithString:bString] scanHexInt:&b];\n  return [UIColor colorWithRed:((float)r / 255.0f)\n                         green:((float)g / 255.0f)\n                          blue:((float)b / 255.0f)\n                         alpha:1.0f];\n}\n@end\n```\n\n使用\n---\n```\n[UIColor colorWithHexString:@\"4fc2e9\"]\n```","slug":"hexStringConvertUIColor","published":1,"updated":"2016-02-24T05:46:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jmk000gpushoi68r25b"},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n<!-- more -->\n### Run server\n\n``` bash\n$ hexo server\n```\n\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n<!-- more -->\n### Run server\n\n``` bash\n$ hexo server\n```\n\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-05-04T03:56:31.000Z","updated":"2016-02-16T06:55:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jmm000hpushee498toq"},{"title":"iOS渐变颜色可设置渐变方向","date":"2016-03-01T02:23:25.000Z","_content":"\n[参考原文](http://blog.csdn.net/caryaliu/article/details/49283419)\n\n\n```\n#import <UIKit/UIKit.h>\n//渐变方向\ntypedef NS_ENUM(NSUInteger, GradientType) {\n  GradientTypeTopToBottom = 0,      //从上到小\n  GradientTypeLeftToRight = 1,      //从左到右\n  GradientTypeUpleftToLowright = 2, //左上到右下\n  GradientTypeUprightToLowleft = 3, //右上到左下\n};\n@interface UIImage (GradientColor)\n+ (UIImage *)gradientColorImageFromColors:(NSArray *)colors\n                             gradientType:(GradientType)gradientType\n                                  imgSize:(CGSize)imgSize;\n@end\n```\n<!-- more -->\n\n```\n#import \"UIImage+GradientColor.h\"\n@implementation UIImage (GradientColor)\n+ (UIImage *)gradientColorImageFromColors:(NSArray *)colors\n                             gradientType:(GradientType)gradientType\n                                  imgSize:(CGSize)imgSize {\n  NSMutableArray *colorsArray = [NSMutableArray array];\n  for (UIColor *color in colors) {\n    [colorsArray addObject:(id)color.CGColor];\n  }\n  UIGraphicsBeginImageContextWithOptions(imgSize, YES, 1);\n  CGContextRef context = UIGraphicsGetCurrentContext();\n  CGContextSaveGState(context);\n  CGColorSpaceRef colorSpace =\n      CGColorGetColorSpace([[colors lastObject] CGColor]);\n  CGGradientRef gradient =\n      CGGradientCreateWithColors(colorSpace, (CFArrayRef)colorsArray, NULL);\n  CGPoint start;\n  CGPoint end;\n  switch (gradientType) {\n  case GradientTypeTopToBottom:\n    start = CGPointMake(0.0, 0.0);\n    end = CGPointMake(0.0, imgSize.height);\n    break;\n  case GradientTypeLeftToRight:\n    start = CGPointMake(0.0, 0.0);\n    end = CGPointMake(imgSize.width, 0.0);\n    break;\n  case GradientTypeUpleftToLowright:\n    start = CGPointMake(0.0, 0.0);\n    end = CGPointMake(imgSize.width, imgSize.height);\n    break;\n  case GradientTypeUprightToLowleft:\n    start = CGPointMake(imgSize.width, 0.0);\n    end = CGPointMake(0.0, imgSize.height);\n    break;\n  default:\n    break;\n  }\n  CGContextDrawLinearGradient(context, gradient, start, end,\n                              kCGGradientDrawsBeforeStartLocation |\n                                  kCGGradientDrawsAfterEndLocation);\n  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n  CGGradientRelease(gradient);\n  CGContextRestoreGState(context);\n  CGColorSpaceRelease(colorSpace);\n  UIGraphicsEndImageContext();\n  return image;\n}\n@end\n```\n\n使用\n---\n```\n  UIColor *topleftColor = [UIColor colorWithHexString:@\"4fc2e9\"];\n  UIColor *bottomrightColor = [UIColor colorWithHexString:@\"0379b2\"];\n  UIImage *bgImg =\n      [UIImage gradientColorImageFromColors:@[ topleftColor, bottomrightColor ]\n                               gradientType:GradientTypeLeftToRight\n                                    imgSize:kScreenSize];\n  [UITabBar appearance].barTintColor = [UIColor colorWithPatternImage:bgImg];\n```","source":"_posts/gradientColor.md","raw":"title: iOS渐变颜色可设置渐变方向\ndate: 2016-03-01 10:23:25\ntags:\n---\n\n[参考原文](http://blog.csdn.net/caryaliu/article/details/49283419)\n\n\n```\n#import <UIKit/UIKit.h>\n//渐变方向\ntypedef NS_ENUM(NSUInteger, GradientType) {\n  GradientTypeTopToBottom = 0,      //从上到小\n  GradientTypeLeftToRight = 1,      //从左到右\n  GradientTypeUpleftToLowright = 2, //左上到右下\n  GradientTypeUprightToLowleft = 3, //右上到左下\n};\n@interface UIImage (GradientColor)\n+ (UIImage *)gradientColorImageFromColors:(NSArray *)colors\n                             gradientType:(GradientType)gradientType\n                                  imgSize:(CGSize)imgSize;\n@end\n```\n<!-- more -->\n\n```\n#import \"UIImage+GradientColor.h\"\n@implementation UIImage (GradientColor)\n+ (UIImage *)gradientColorImageFromColors:(NSArray *)colors\n                             gradientType:(GradientType)gradientType\n                                  imgSize:(CGSize)imgSize {\n  NSMutableArray *colorsArray = [NSMutableArray array];\n  for (UIColor *color in colors) {\n    [colorsArray addObject:(id)color.CGColor];\n  }\n  UIGraphicsBeginImageContextWithOptions(imgSize, YES, 1);\n  CGContextRef context = UIGraphicsGetCurrentContext();\n  CGContextSaveGState(context);\n  CGColorSpaceRef colorSpace =\n      CGColorGetColorSpace([[colors lastObject] CGColor]);\n  CGGradientRef gradient =\n      CGGradientCreateWithColors(colorSpace, (CFArrayRef)colorsArray, NULL);\n  CGPoint start;\n  CGPoint end;\n  switch (gradientType) {\n  case GradientTypeTopToBottom:\n    start = CGPointMake(0.0, 0.0);\n    end = CGPointMake(0.0, imgSize.height);\n    break;\n  case GradientTypeLeftToRight:\n    start = CGPointMake(0.0, 0.0);\n    end = CGPointMake(imgSize.width, 0.0);\n    break;\n  case GradientTypeUpleftToLowright:\n    start = CGPointMake(0.0, 0.0);\n    end = CGPointMake(imgSize.width, imgSize.height);\n    break;\n  case GradientTypeUprightToLowleft:\n    start = CGPointMake(imgSize.width, 0.0);\n    end = CGPointMake(0.0, imgSize.height);\n    break;\n  default:\n    break;\n  }\n  CGContextDrawLinearGradient(context, gradient, start, end,\n                              kCGGradientDrawsBeforeStartLocation |\n                                  kCGGradientDrawsAfterEndLocation);\n  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n  CGGradientRelease(gradient);\n  CGContextRestoreGState(context);\n  CGColorSpaceRelease(colorSpace);\n  UIGraphicsEndImageContext();\n  return image;\n}\n@end\n```\n\n使用\n---\n```\n  UIColor *topleftColor = [UIColor colorWithHexString:@\"4fc2e9\"];\n  UIColor *bottomrightColor = [UIColor colorWithHexString:@\"0379b2\"];\n  UIImage *bgImg =\n      [UIImage gradientColorImageFromColors:@[ topleftColor, bottomrightColor ]\n                               gradientType:GradientTypeLeftToRight\n                                    imgSize:kScreenSize];\n  [UITabBar appearance].barTintColor = [UIColor colorWithPatternImage:bgImg];\n```","slug":"gradientColor","published":1,"updated":"2016-03-01T02:32:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jmp000ipushkmge0rl5"},{"title":"D-U-N-S(邓白氏编码)申请","date":"2016-02-16T06:13:42.000Z","_content":"\n公司版和企业版的 Apple开发者帐户申请需要您提交邓白氏号码。申请的表格需要您用 **英文或拼音填写**。\n请至 Apple 以下网站以查看贵公司是否已拥有邓白氏编号，如果您有查到任何记录，请确认记录中的公司是否就是贵公司；如果没有查到任何资料或系统调出的记录均不是贵公司的信息，请点击  **`“Submit Your Information”`** 提交申请，成功提交至邓白氏公司，他们将会继续协助您获取该编号，申请时间一般需要七个工作日：   \n\n申请地址请点击：[申请地址](https://developer.apple.com/program/enroll/dunsLookupForm.action \"apple\")\n\n\n *此电话有中文客服*   \n**4006701855** : 苹果电话   \n**02126107504** : duns方负责专门负责被拒的电话   \n\n*邓白氏公司全球支持部门* \n**appdeveloper@dnb.com**\n\n\n[各地区 Apple 开发者计划支援电话号码查询](https://developer.apple.com/contact/phone.php)\n<!-- more -->\n\n\n我的申请流程是：\n---\n邓白氏打电话给申请手机，要可用邮箱\n邮件的主要内容是填写一下资料\n\n1.公司中英文名：\n\n2.公司办公中英文地址：（注：具体到详细地址）\n\n3.公司邮编：（注：具体到详细邮编）\n\n4.公司主营业务\n\n5.公司企业类型\n\n6.企业是否独立，有无分公司办事处\n\n7.企业有没有英文缩写或者英文简称（没有可不写）\n\n8.联系人姓名，性别，手机，公司电话，职务\n\n9.员工人数规模（请尽量准确，不要填写一个范围，谢谢）\n\n10.营业执照照片. (正本/副本或黑白/彩色都可以)\n\n**`然后有问题直接跟打给你的电话沟通，或直接邮件回复都可以，我提交的时候公司名称翻译的不规范，他们还帮忙修正了一下`**\n\n\n确认后他们会发一下内容\n---\n24小时内会收到编码,因为是系统自动发的,如果没有收到,您可以联系我.\n\n24小时内系统会自动发编码到苹果注册邮箱内，收到后请14个工作日再去使用。若着急使用,在7个工作日后开始尝试,请注意尝试次数不要超过3次,超过次数编码会被锁住，解锁及注册方面问题请找苹果客服，电话：4006701855\n\n\n\n","source":"_posts/dunsApply.md","raw":"title: D-U-N-S(邓白氏编码)申请\ndate: 2016-02-16 14:13:42\ntags:\n---\n\n公司版和企业版的 Apple开发者帐户申请需要您提交邓白氏号码。申请的表格需要您用 **英文或拼音填写**。\n请至 Apple 以下网站以查看贵公司是否已拥有邓白氏编号，如果您有查到任何记录，请确认记录中的公司是否就是贵公司；如果没有查到任何资料或系统调出的记录均不是贵公司的信息，请点击  **`“Submit Your Information”`** 提交申请，成功提交至邓白氏公司，他们将会继续协助您获取该编号，申请时间一般需要七个工作日：   \n\n申请地址请点击：[申请地址](https://developer.apple.com/program/enroll/dunsLookupForm.action \"apple\")\n\n\n *此电话有中文客服*   \n**4006701855** : 苹果电话   \n**02126107504** : duns方负责专门负责被拒的电话   \n\n*邓白氏公司全球支持部门* \n**appdeveloper@dnb.com**\n\n\n[各地区 Apple 开发者计划支援电话号码查询](https://developer.apple.com/contact/phone.php)\n<!-- more -->\n\n\n我的申请流程是：\n---\n邓白氏打电话给申请手机，要可用邮箱\n邮件的主要内容是填写一下资料\n\n1.公司中英文名：\n\n2.公司办公中英文地址：（注：具体到详细地址）\n\n3.公司邮编：（注：具体到详细邮编）\n\n4.公司主营业务\n\n5.公司企业类型\n\n6.企业是否独立，有无分公司办事处\n\n7.企业有没有英文缩写或者英文简称（没有可不写）\n\n8.联系人姓名，性别，手机，公司电话，职务\n\n9.员工人数规模（请尽量准确，不要填写一个范围，谢谢）\n\n10.营业执照照片. (正本/副本或黑白/彩色都可以)\n\n**`然后有问题直接跟打给你的电话沟通，或直接邮件回复都可以，我提交的时候公司名称翻译的不规范，他们还帮忙修正了一下`**\n\n\n确认后他们会发一下内容\n---\n24小时内会收到编码,因为是系统自动发的,如果没有收到,您可以联系我.\n\n24小时内系统会自动发编码到苹果注册邮箱内，收到后请14个工作日再去使用。若着急使用,在7个工作日后开始尝试,请注意尝试次数不要超过3次,超过次数编码会被锁住，解锁及注册方面问题请找苹果客服，电话：4006701855\n\n\n\n","slug":"dunsApply","published":1,"updated":"2016-02-17T09:21:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jmq000jpushxzxc7hrx"},{"title":"绘制虚线","date":"2016-02-24T08:25:49.000Z","_content":"\n[参考原文](http://www.tuicool.com/articles/ZruuIzv)\n\n绘制虚线方法\n---\n```\n/**\n ** lineView:     需要绘制成虚线的view\n ** lineLength:   虚线的宽度\n ** lineSpacing:  虚线的间距\n ** lineColor:    虚线的颜色\n **/\n+ (void)drawDashLine:(UIView *)lineView\n          lineLength:(int)lineLength\n         lineSpacing:(int)lineSpacing\n           lineColor:(UIColor *)lineColor {\n  CAShapeLayer *shapeLayer = [CAShapeLayer layer];\n  [shapeLayer setBounds:lineView.bounds];\n  [shapeLayer setPosition:CGPointMake(CGRectGetWidth(lineView.frame) / 2,\n                                      CGRectGetHeight(lineView.frame))];\n  [shapeLayer setFillColor:[UIColor clearColor].CGColor];\n  //  设置虚线颜色为blackColor\n  [shapeLayer setStrokeColor:lineColor.CGColor];\n  //  设置虚线宽度\n  [shapeLayer setLineWidth:CGRectGetHeight(lineView.frame)];\n  [shapeLayer setLineJoin:kCALineJoinRound];\n  //  设置线宽，线间距\n  [shapeLayer\n      setLineDashPattern:[NSArray\n                             arrayWithObjects:[NSNumber\n                                                  numberWithInt:lineLength],\n                                              [NSNumber\n                                                  numberWithInt:lineSpacing],\n                                              nil]];\n  //  设置路径\n  CGMutablePathRef path = CGPathCreateMutable();\n  CGPathMoveToPoint(path, NULL, 0, 0);\n  CGPathAddLineToPoint(path, NULL, CGRectGetWidth(lineView.frame), 0);\n  [shapeLayer setPath:path];\n  CGPathRelease(path);\n  //  把绘制好的虚线添加上来\n  [lineView.layer addSublayer:shapeLayer];\n}\n```\n\n使用\n---\n```\n  [ViewController drawDashLine:self.lineView\n                    lineLength:10\n                   lineSpacing:2.0\n                     lineColor:[UIColor colorWithHexString:@\"393939\"]];\n```","source":"_posts/drawDashLine.md","raw":"title: 绘制虚线\ndate: 2016-02-24 16:25:49\ntags:\n---\n\n[参考原文](http://www.tuicool.com/articles/ZruuIzv)\n\n绘制虚线方法\n---\n```\n/**\n ** lineView:     需要绘制成虚线的view\n ** lineLength:   虚线的宽度\n ** lineSpacing:  虚线的间距\n ** lineColor:    虚线的颜色\n **/\n+ (void)drawDashLine:(UIView *)lineView\n          lineLength:(int)lineLength\n         lineSpacing:(int)lineSpacing\n           lineColor:(UIColor *)lineColor {\n  CAShapeLayer *shapeLayer = [CAShapeLayer layer];\n  [shapeLayer setBounds:lineView.bounds];\n  [shapeLayer setPosition:CGPointMake(CGRectGetWidth(lineView.frame) / 2,\n                                      CGRectGetHeight(lineView.frame))];\n  [shapeLayer setFillColor:[UIColor clearColor].CGColor];\n  //  设置虚线颜色为blackColor\n  [shapeLayer setStrokeColor:lineColor.CGColor];\n  //  设置虚线宽度\n  [shapeLayer setLineWidth:CGRectGetHeight(lineView.frame)];\n  [shapeLayer setLineJoin:kCALineJoinRound];\n  //  设置线宽，线间距\n  [shapeLayer\n      setLineDashPattern:[NSArray\n                             arrayWithObjects:[NSNumber\n                                                  numberWithInt:lineLength],\n                                              [NSNumber\n                                                  numberWithInt:lineSpacing],\n                                              nil]];\n  //  设置路径\n  CGMutablePathRef path = CGPathCreateMutable();\n  CGPathMoveToPoint(path, NULL, 0, 0);\n  CGPathAddLineToPoint(path, NULL, CGRectGetWidth(lineView.frame), 0);\n  [shapeLayer setPath:path];\n  CGPathRelease(path);\n  //  把绘制好的虚线添加上来\n  [lineView.layer addSublayer:shapeLayer];\n}\n```\n\n使用\n---\n```\n  [ViewController drawDashLine:self.lineView\n                    lineLength:10\n                   lineSpacing:2.0\n                     lineColor:[UIColor colorWithHexString:@\"393939\"]];\n```","slug":"drawDashLine","published":1,"updated":"2016-02-24T08:28:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jms000kpush479of3er"},{"title":"CGPoint","date":"2016-04-12T10:06:06.000Z","_content":"\nCGPoint表示一个二维坐标系中的点\nCGPoint通过x和y坐标定义，可使用CGPointMake(x，y)创建点。\n\n    可以将它们与字符串进行相互转换，可用如下函数：NSStringFromCGPoint()、CGPointFromString().\n    主要说CGPointFromString方法\n\n下面是CGPoint的定义\n```\n/* Points. */\nstruct CGPoint {\n    CGFloat x;\n    CGFloat y;\n};\ntypedef struct CGPoint CGPoint;\n```\n\nstringWithFormat从String转换为point的方法中，所需的string格式是**{x,y}**,下面是例子\n```\n  NSString *str = @\"0.111, 1.22\";\n  str = [NSString stringWithFormat:@\"{%@}\", str];\n  CGPoint initPath = CGPointFromString(str);\n  NSLog(@\"%@\", NSStringFromCGPoint(initPath));\n```\n","source":"_posts/cgpoint.md","raw":"title: CGPoint\ndate: 2016-04-12 18:06:06\ntags:\n---\n\nCGPoint表示一个二维坐标系中的点\nCGPoint通过x和y坐标定义，可使用CGPointMake(x，y)创建点。\n\n    可以将它们与字符串进行相互转换，可用如下函数：NSStringFromCGPoint()、CGPointFromString().\n    主要说CGPointFromString方法\n\n下面是CGPoint的定义\n```\n/* Points. */\nstruct CGPoint {\n    CGFloat x;\n    CGFloat y;\n};\ntypedef struct CGPoint CGPoint;\n```\n\nstringWithFormat从String转换为point的方法中，所需的string格式是**{x,y}**,下面是例子\n```\n  NSString *str = @\"0.111, 1.22\";\n  str = [NSString stringWithFormat:@\"{%@}\", str];\n  CGPoint initPath = CGPointFromString(str);\n  NSLog(@\"%@\", NSStringFromCGPoint(initPath));\n```\n","slug":"cgpoint","published":1,"updated":"2016-04-12T10:07:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jmu000lpushxz4g1d3s"},{"title":"capturePicture 截取scrollView和屏幕显示的图片","date":"2016-02-16T06:22:45.000Z","_content":"一、获取当前屏幕显示的图片\n--\n\n```\n  UIGraphicsBeginImageContextWithOptions(_scrollView.contentSize, YES, 1);\n  [_scrollView.layer renderInContext:UIGraphicsGetCurrentContext()];\n  UIImage *uiImage = UIGraphicsGetImageFromCurrentImageContext();\n  UIGraphicsEndImageContext();\n```\n\n二、获取scrollView的contentSize包含的图片\n--\n<!-- more -->\n\n```\n- (UIImage *)captureScrollView:(UIScrollView *)scrollView {\n  UIImage *image = nil;\n  UIGraphicsBeginImageContext(scrollView.contentSize);\n  {\n    CGPoint savedContentOffset = scrollView.contentOffset;\n    CGRect savedFrame = scrollView.frame;\n    scrollView.contentOffset = CGPointZero;\n    scrollView.frame = CGRectMake(0, 0, scrollView.contentSize.width,\n    scrollView.contentSize.height);\n    [scrollView.layer renderInContext:UIGraphicsGetCurrentContext()];\n    image = UIGraphicsGetImageFromCurrentImageContext();\n    scrollView.contentOffset = savedContentOffset;\n    scrollView.frame = savedFrame;\n  }\n  UIGraphicsEndImageContext();\n  if (image != nil) {\n    return image;\n  }\n  return nil;\n}\n```\n\n\n\n","source":"_posts/capturePicture.md","raw":"title: capturePicture 截取scrollView和屏幕显示的图片\ndate: 2016-02-16 14:22:45\ntags:\n---\n一、获取当前屏幕显示的图片\n--\n\n```\n  UIGraphicsBeginImageContextWithOptions(_scrollView.contentSize, YES, 1);\n  [_scrollView.layer renderInContext:UIGraphicsGetCurrentContext()];\n  UIImage *uiImage = UIGraphicsGetImageFromCurrentImageContext();\n  UIGraphicsEndImageContext();\n```\n\n二、获取scrollView的contentSize包含的图片\n--\n<!-- more -->\n\n```\n- (UIImage *)captureScrollView:(UIScrollView *)scrollView {\n  UIImage *image = nil;\n  UIGraphicsBeginImageContext(scrollView.contentSize);\n  {\n    CGPoint savedContentOffset = scrollView.contentOffset;\n    CGRect savedFrame = scrollView.frame;\n    scrollView.contentOffset = CGPointZero;\n    scrollView.frame = CGRectMake(0, 0, scrollView.contentSize.width,\n    scrollView.contentSize.height);\n    [scrollView.layer renderInContext:UIGraphicsGetCurrentContext()];\n    image = UIGraphicsGetImageFromCurrentImageContext();\n    scrollView.contentOffset = savedContentOffset;\n    scrollView.frame = savedFrame;\n  }\n  UIGraphicsEndImageContext();\n  if (image != nil) {\n    return image;\n  }\n  return nil;\n}\n```\n\n\n\n","slug":"capturePicture","published":1,"updated":"2016-05-31T10:06:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jmv000mpushdevrsikq"},{"title":"问题记录","date":"2016-03-01T06:09:39.000Z","_content":"\n如下错误是没有rootViewController，我平时并不这么写   \n```\n- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // Override point for customization after application launch.\n  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n  [self.window addSubview:controller.view];\n  [self.window makeKeyAndVisible];\n  return YES;\n}\n```\n错误：\n```\n*** Assertion failure in -[UIApplication _runWithMainScene:transitionContext:completion:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit/UIKit-3512.30.14/UIApplication.m:3315\n*** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Application windows are expected to have a root view controller at the end of application launch'\n*** First throw call stack:\n(0x1821c5900 0x181833f80 0x1821c57d0 0x182b3899c 0x187160ac0 0x18715d5c0 0x18377b790 0x18377bb10 0x18217cefc 0x18217c990 0x18217a690 0x1820a9680 0x186f26580 0x186f20d90 0x1000de108 0x181c4a8b8)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n```\n\n解决方法：  \n---------\n设置rootViewController  \n```\n[self.window setRootViewController:[UIViewController new]];\n```","source":"_posts/bug1.md","raw":"title: 问题记录\ndate: 2016-03-01 14:09:39\ntags:\n---\n\n如下错误是没有rootViewController，我平时并不这么写   \n```\n- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // Override point for customization after application launch.\n  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n  [self.window addSubview:controller.view];\n  [self.window makeKeyAndVisible];\n  return YES;\n}\n```\n错误：\n```\n*** Assertion failure in -[UIApplication _runWithMainScene:transitionContext:completion:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit/UIKit-3512.30.14/UIApplication.m:3315\n*** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Application windows are expected to have a root view controller at the end of application launch'\n*** First throw call stack:\n(0x1821c5900 0x181833f80 0x1821c57d0 0x182b3899c 0x187160ac0 0x18715d5c0 0x18377b790 0x18377bb10 0x18217cefc 0x18217c990 0x18217a690 0x1820a9680 0x186f26580 0x186f20d90 0x1000de108 0x181c4a8b8)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n```\n\n解决方法：  \n---------\n设置rootViewController  \n```\n[self.window setRootViewController:[UIViewController new]];\n```","slug":"bug1","published":1,"updated":"2016-03-01T06:10:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jmx000npushnb3qnvw9"},{"title":"iOS在程序中控制系统的屏幕亮度","date":"2016-03-01T01:51:51.000Z","_content":"\n[参考原文](http://blog.sina.com.cn/s/blog_9693f61a0102uymd.html)\n\n```\n// 0 .. 1.0, where 1.0 is maximum brightness. Only supported by main screen.\n@property(nonatomic) CGFloat brightness NS_AVAILABLE_IOS(5_0) __TVOS_PROHIBITED;        \n```\n\n```\n //获取系统屏幕当前的亮度值\n CGFloat value = [UIScreen mainScreen].brightness;\n //设置系统屏幕亮度值\n value += 0.8;\n [[UIScreen mainScreen] setBrightness:value];\n```\n\n","source":"_posts/brightNess.md","raw":"title: iOS在程序中控制系统的屏幕亮度 \ndate: 2016-03-01 09:51:51\ntags:\n---\n\n[参考原文](http://blog.sina.com.cn/s/blog_9693f61a0102uymd.html)\n\n```\n// 0 .. 1.0, where 1.0 is maximum brightness. Only supported by main screen.\n@property(nonatomic) CGFloat brightness NS_AVAILABLE_IOS(5_0) __TVOS_PROHIBITED;        \n```\n\n```\n //获取系统屏幕当前的亮度值\n CGFloat value = [UIScreen mainScreen].brightness;\n //设置系统屏幕亮度值\n value += 0.8;\n [[UIScreen mainScreen] setBrightness:value];\n```\n\n","slug":"brightNess","published":1,"updated":"2016-03-01T01:53:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jmz000opush1n8q5kpp"},{"title":"applePayDemo","date":"2016-03-04T06:03:40.000Z","_content":"\n\n[参考原文](https://developer.apple.com/library/ios/ApplePay_Guide/)\n\n定义\n---\n```\n#import \"ViewController.h\"\n#import <PassKit/PassKit.h>\n@interface ViewController ()<PKPaymentAuthorizationViewControllerDelegate>\n@end\n```\n\n实现\n---\n```\n@implementation ViewController\n- (void)viewDidLoad {\n  [super viewDidLoad];\n}\n- (void)applePayTest {\n  //设备可用\n  // PKPaymentAuthorizationViewController用来显示ApplePay的Controller\n  if (![PKPaymentAuthorizationViewController canMakePayments]) {\n    //设备不支持\n    //不让ApplePay的支付按钮去显示\n    return;\n  }\n  //想当自己的应用支持的卡类型\n  /*\n   [PKPaymentAuthorizationViewController\n   canMakePaymentsUsingNetworks:@[PKPaymentNetworkVisa]]\n   */\n  //判断支持的卡类型\n  if (![PKPaymentAuthorizationViewController canMakePaymentsUsingNetworks:@[\n        PKPaymentNetworkVisa,\n        PKPaymentNetworkChinaUnionPay\n      ]]) {\n    NSLog(@\"不支持visa和银联\");\n    //进入设置银行卡的页面\n    [[[PKPassLibrary alloc] init] openPaymentSetup];\n    return;\n  }\n  //创建支付请求\n  PKPaymentRequest *request = [[PKPaymentRequest alloc] init];\n  //显示支付页面\n  PKPaymentAuthorizationViewController *vc =\n      [[PKPaymentAuthorizationViewController alloc]\n          initWithPaymentRequest:request];\n  vc.delegate = self;\n  //*设置商户的ID(网站配制的id)\n  request.merchantIdentifier = @\"merchant.com.irena.AppleiPayDemo\";\n  //*设置国家代码\n  request.countryCode = @\"CN\";\n  //*设置支付的卡类型\n  request.supportedNetworks = @[ PKPaymentNetworkVisa ];\n  //*设置商户的支付标准(必须支持3DS)\n  request.merchantCapabilities = PKMerchantCapability3DS;\n  //*设置货币单位(中文CNY)\n  request.currencyCode = @\"CNY\";\n  ```\n<!-- more -->\n\n  ```\n  //*设置商品\n  // label商品名称\n  // amount价格\n  NSDecimalNumber *num1 = [NSDecimalNumber decimalNumberWithString:@\"4\"];\n  // 当只有一个1个商品时,显示的是付给当前商品\n  PKPaymentSummaryItem *item1 =\n      [PKPaymentSummaryItem summaryItemWithLabel:@\"水杯\" amount:num1];\n  PKPaymentSummaryItem *item2 =\n      [PKPaymentSummaryItem summaryItemWithLabel:@\"红牛\" amount:num1];\n  //当多个时商品,最后一个商品被当成一个总价去显示\n  NSDecimalNumber *sum = [NSDecimalNumber decimalNumberWithString:@\"8\"];\n  PKPaymentSummaryItem *itemSum =\n      [PKPaymentSummaryItem summaryItemWithLabel:@\"zdjr\" amount:sum];\n  request.paymentSummaryItems = @[ item1, item2, itemSum ];\n  //设置收据必填内容,第一次使用必填\n  request.requiredBillingAddressFields =\n      PKAddressFieldAll; // billingContact 默认地址\n  //设置送货必填的内容\n  request.requiredShippingAddressFields = PKAddressFieldAll;\n  //设置送货方式\n  // summaryItemWithLabel 送货方式\n  NSDecimalNumber *methodNum = [NSDecimalNumber decimalNumberWithString:@\"4\"];\n  PKShippingMethod *method1 =\n      [PKShippingMethod summaryItemWithLabel:@\"顺风\" amount:methodNum];\n  //*区分同一个送货方式,必须填\n  method1.identifier = @\"shunfeng\";\n  //送货方式的详情描述\n  method1.detail = @\"24小时之内送到\";\n  request.shippingMethods = @[ method1 ];\n  // modal出来,显示支付页面\n  [self presentViewController:vc animated:YES completion:nil];\n}\n```\nPKPaymentAuthorizationViewControllerDelegate\n---\n```\n/*\n在点击\"使用密码支付\"的按钮时候调用,开始进行支付调用\n payment:加密后的数据\n */\n- (void)\npaymentAuthorizationViewController:\n    (PKPaymentAuthorizationViewController *)controller\n               didAuthorizePayment:(PKPayment *)payment\n                        completion:\n                            (void (^)(PKPaymentAuthorizationStatus status))\n                                completion {\n  //把支付信息发送给服务器进行处理\n  //第三方或发送给自己的服务器\n  //银连https://merchant.unionpay.com/join/product/detail?id=80\n  //    NSError *error;\n  //    ABMultiValueRef addressMultiValue =\n  //    ABRecordCopyValue(payment.billingAddress,kABPersonAddressProperty);\n  //    NSDictionary *addressDictionary = (__bridge_transfer NSDictionary *)\n  //    ABMultiValueCopyValueAtIndex(addressMultiValue, 0);\n  //    NSData *json = [NSJSONSerialization dataWithJSONObject:addressDictionary\n  //    options:NSJSONWritingPrettyPrinted error: &error];\n  //根据服务器返回的支付状态进行不同的显示,给用户进行不同的显示\n  //(调用BLOCK传不同的枚举)\n  completion(PKPaymentAuthorizationStatusSuccess);\n}\n/*\n 支付完成\n 支付成功或失败后调用的方法\n */\n- (void)paymentAuthorizationViewControllerDidFinish:\n    (PKPaymentAuthorizationViewController *)controller {\n  //把支付的界面关闭\n  [self dismissViewControllerAnimated:YES completion:nil];\n}\n@end\n```\n\n*暂时只提Demo，后序在完善*","source":"_posts/applePayDemo.md","raw":"title: applePayDemo\ndate: 2016-03-04 14:03:40\ntags:\n---\n\n\n[参考原文](https://developer.apple.com/library/ios/ApplePay_Guide/)\n\n定义\n---\n```\n#import \"ViewController.h\"\n#import <PassKit/PassKit.h>\n@interface ViewController ()<PKPaymentAuthorizationViewControllerDelegate>\n@end\n```\n\n实现\n---\n```\n@implementation ViewController\n- (void)viewDidLoad {\n  [super viewDidLoad];\n}\n- (void)applePayTest {\n  //设备可用\n  // PKPaymentAuthorizationViewController用来显示ApplePay的Controller\n  if (![PKPaymentAuthorizationViewController canMakePayments]) {\n    //设备不支持\n    //不让ApplePay的支付按钮去显示\n    return;\n  }\n  //想当自己的应用支持的卡类型\n  /*\n   [PKPaymentAuthorizationViewController\n   canMakePaymentsUsingNetworks:@[PKPaymentNetworkVisa]]\n   */\n  //判断支持的卡类型\n  if (![PKPaymentAuthorizationViewController canMakePaymentsUsingNetworks:@[\n        PKPaymentNetworkVisa,\n        PKPaymentNetworkChinaUnionPay\n      ]]) {\n    NSLog(@\"不支持visa和银联\");\n    //进入设置银行卡的页面\n    [[[PKPassLibrary alloc] init] openPaymentSetup];\n    return;\n  }\n  //创建支付请求\n  PKPaymentRequest *request = [[PKPaymentRequest alloc] init];\n  //显示支付页面\n  PKPaymentAuthorizationViewController *vc =\n      [[PKPaymentAuthorizationViewController alloc]\n          initWithPaymentRequest:request];\n  vc.delegate = self;\n  //*设置商户的ID(网站配制的id)\n  request.merchantIdentifier = @\"merchant.com.irena.AppleiPayDemo\";\n  //*设置国家代码\n  request.countryCode = @\"CN\";\n  //*设置支付的卡类型\n  request.supportedNetworks = @[ PKPaymentNetworkVisa ];\n  //*设置商户的支付标准(必须支持3DS)\n  request.merchantCapabilities = PKMerchantCapability3DS;\n  //*设置货币单位(中文CNY)\n  request.currencyCode = @\"CNY\";\n  ```\n<!-- more -->\n\n  ```\n  //*设置商品\n  // label商品名称\n  // amount价格\n  NSDecimalNumber *num1 = [NSDecimalNumber decimalNumberWithString:@\"4\"];\n  // 当只有一个1个商品时,显示的是付给当前商品\n  PKPaymentSummaryItem *item1 =\n      [PKPaymentSummaryItem summaryItemWithLabel:@\"水杯\" amount:num1];\n  PKPaymentSummaryItem *item2 =\n      [PKPaymentSummaryItem summaryItemWithLabel:@\"红牛\" amount:num1];\n  //当多个时商品,最后一个商品被当成一个总价去显示\n  NSDecimalNumber *sum = [NSDecimalNumber decimalNumberWithString:@\"8\"];\n  PKPaymentSummaryItem *itemSum =\n      [PKPaymentSummaryItem summaryItemWithLabel:@\"zdjr\" amount:sum];\n  request.paymentSummaryItems = @[ item1, item2, itemSum ];\n  //设置收据必填内容,第一次使用必填\n  request.requiredBillingAddressFields =\n      PKAddressFieldAll; // billingContact 默认地址\n  //设置送货必填的内容\n  request.requiredShippingAddressFields = PKAddressFieldAll;\n  //设置送货方式\n  // summaryItemWithLabel 送货方式\n  NSDecimalNumber *methodNum = [NSDecimalNumber decimalNumberWithString:@\"4\"];\n  PKShippingMethod *method1 =\n      [PKShippingMethod summaryItemWithLabel:@\"顺风\" amount:methodNum];\n  //*区分同一个送货方式,必须填\n  method1.identifier = @\"shunfeng\";\n  //送货方式的详情描述\n  method1.detail = @\"24小时之内送到\";\n  request.shippingMethods = @[ method1 ];\n  // modal出来,显示支付页面\n  [self presentViewController:vc animated:YES completion:nil];\n}\n```\nPKPaymentAuthorizationViewControllerDelegate\n---\n```\n/*\n在点击\"使用密码支付\"的按钮时候调用,开始进行支付调用\n payment:加密后的数据\n */\n- (void)\npaymentAuthorizationViewController:\n    (PKPaymentAuthorizationViewController *)controller\n               didAuthorizePayment:(PKPayment *)payment\n                        completion:\n                            (void (^)(PKPaymentAuthorizationStatus status))\n                                completion {\n  //把支付信息发送给服务器进行处理\n  //第三方或发送给自己的服务器\n  //银连https://merchant.unionpay.com/join/product/detail?id=80\n  //    NSError *error;\n  //    ABMultiValueRef addressMultiValue =\n  //    ABRecordCopyValue(payment.billingAddress,kABPersonAddressProperty);\n  //    NSDictionary *addressDictionary = (__bridge_transfer NSDictionary *)\n  //    ABMultiValueCopyValueAtIndex(addressMultiValue, 0);\n  //    NSData *json = [NSJSONSerialization dataWithJSONObject:addressDictionary\n  //    options:NSJSONWritingPrettyPrinted error: &error];\n  //根据服务器返回的支付状态进行不同的显示,给用户进行不同的显示\n  //(调用BLOCK传不同的枚举)\n  completion(PKPaymentAuthorizationStatusSuccess);\n}\n/*\n 支付完成\n 支付成功或失败后调用的方法\n */\n- (void)paymentAuthorizationViewControllerDidFinish:\n    (PKPaymentAuthorizationViewController *)controller {\n  //把支付的界面关闭\n  [self dismissViewControllerAnimated:YES completion:nil];\n}\n@end\n```\n\n*暂时只提Demo，后序在完善*","slug":"applePayDemo","published":1,"updated":"2016-03-04T06:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jn1000ppush5x81cchj"},{"title":"appleDeveloperAccount 苹果IOS开发者账号","date":"2016-02-25T02:44:16.000Z","_content":"\n[参考原文](http://www.cnblogs.com/KingStar/p/3642473.html)\n个人账号（Individual）：\n---\n费用99美金一年, 该账号在App Store销售者只能显示个人的ID，比如zhitian zhang，单人使用。个人账号只能有一个开发者。100个苹果的iOS设备UDID测试。\n\n\n公司团队账号 （Company/Organization）：\n ---\n费用99美金一年, 该账号在App Store销售者可以显示类似Studios，或者自定义的团队名称 \n，比如Mamshare INC，公司账号可以允许多个开发者协作开发，比个人多一些帐号管理的设置，可以设置多个AppleID，分4种管理级别权限，详细见备注。100个苹果的iOS设备UDID测试。但是申请时需要填写公司的邓白氏编码（D-U-N-S）。\n\n<!-- more -->\n\n备注：\n\n**Admin Legal权限**：超级管理员。可以管理开发者和管理app store中的应用。\n\n**Admin 权限**：管理员，可以管理开发者。添加测试机子和管理团队证书。\n\n**Member权限**：是普通开发者。只能下载证书和使用证书\n\n**No Access权限**：没有相应的权限。\n\n[申请公司团队账号地址](http://developer.apple.com/programs/ios/)\n\n[邓白氏编码（D-U-N-S](http://irena.gitcafe.io/2016/02/16/dunsApply/)\n\n\n\n企业账号 （Enterprise）\n ---\n\n费用299美金一年, 该账号开发应用不能发布到App Store，只能企业内部应用，苹果的iOS设备UDID数量不限制。企业账号适合不希望上线App Store，但是需要企业内部比如1000人的iOS设备都部署。公司测试部门需要全公司测试设备，突破100个UDID的限制。\n\n \n\n教育账号(University)\n---\n\n费用0美元 ，只能教育机构或学院内部使用。必须是苹果iOS开发者计划授权机构。不能对外正式发布iOS应用程序。\n\n \n\n`备注`\n[申请地址](https://developer.apple.com/programs/start/university/)","source":"_posts/appleDeveloperAccount.md","raw":"title: appleDeveloperAccount 苹果IOS开发者账号\ndate: 2016-02-25 10:44:16\ntags:\n---\n\n[参考原文](http://www.cnblogs.com/KingStar/p/3642473.html)\n个人账号（Individual）：\n---\n费用99美金一年, 该账号在App Store销售者只能显示个人的ID，比如zhitian zhang，单人使用。个人账号只能有一个开发者。100个苹果的iOS设备UDID测试。\n\n\n公司团队账号 （Company/Organization）：\n ---\n费用99美金一年, 该账号在App Store销售者可以显示类似Studios，或者自定义的团队名称 \n，比如Mamshare INC，公司账号可以允许多个开发者协作开发，比个人多一些帐号管理的设置，可以设置多个AppleID，分4种管理级别权限，详细见备注。100个苹果的iOS设备UDID测试。但是申请时需要填写公司的邓白氏编码（D-U-N-S）。\n\n<!-- more -->\n\n备注：\n\n**Admin Legal权限**：超级管理员。可以管理开发者和管理app store中的应用。\n\n**Admin 权限**：管理员，可以管理开发者。添加测试机子和管理团队证书。\n\n**Member权限**：是普通开发者。只能下载证书和使用证书\n\n**No Access权限**：没有相应的权限。\n\n[申请公司团队账号地址](http://developer.apple.com/programs/ios/)\n\n[邓白氏编码（D-U-N-S](http://irena.gitcafe.io/2016/02/16/dunsApply/)\n\n\n\n企业账号 （Enterprise）\n ---\n\n费用299美金一年, 该账号开发应用不能发布到App Store，只能企业内部应用，苹果的iOS设备UDID数量不限制。企业账号适合不希望上线App Store，但是需要企业内部比如1000人的iOS设备都部署。公司测试部门需要全公司测试设备，突破100个UDID的限制。\n\n \n\n教育账号(University)\n---\n\n费用0美元 ，只能教育机构或学院内部使用。必须是苹果iOS开发者计划授权机构。不能对外正式发布iOS应用程序。\n\n \n\n`备注`\n[申请地址](https://developer.apple.com/programs/start/university/)","slug":"appleDeveloperAccount","published":1,"updated":"2016-02-25T02:46:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jn4000qpushjv1kqjs4"},{"title":"制作/使用.a文件","date":"2016-04-11T02:38:08.000Z","_content":"\n制作步骤：\n1.  File--New--Project\n    按照如下图创建项目\n    ![操作](http://7xrirn.com1.z0.glb.clouddn.com/1.png)\n2.  按照下图创完成所需类的定义和实现\n    ![操作](http://7xrirn.com1.z0.glb.clouddn.com/2.png)    \n3.  创建后Command + B 进行编辑，如果device选择的是真机，生成的.a文件就适合真机的\n    想要创建适用于模拟器的.a文件，将device改成模拟器就可以      \n4.  如果没有生成所需头文件，按下图逐步操作添加  \n    ![操作](http://7xrirn.com1.z0.glb.clouddn.com/.a1.png)  \n    ![操作](http://7xrirn.com1.z0.glb.clouddn.com/.a2.png)  \t\n5.  按下图查看制作好的.a文件\n    ![2](http://7xrirn.com1.z0.glb.clouddn.com/3.png)\n\n\n\n<!-- more -->\n\n使用：\n1.  将生成的.a文件和.h文件拖到要使用的项目中\n    ![2](http://7xrirn.com1.z0.glb.clouddn.com/4.png)\n2.  直接使用就可以\n    ![2](http://7xrirn.com1.z0.glb.clouddn.com/5.png)\n\n\n","source":"_posts/a-file-makeAndUse.md","raw":"title: 制作/使用.a文件\ndate: 2016-04-11 10:38:08\ntags:\n---\n\n制作步骤：\n1.  File--New--Project\n    按照如下图创建项目\n    ![操作](http://7xrirn.com1.z0.glb.clouddn.com/1.png)\n2.  按照下图创完成所需类的定义和实现\n    ![操作](http://7xrirn.com1.z0.glb.clouddn.com/2.png)    \n3.  创建后Command + B 进行编辑，如果device选择的是真机，生成的.a文件就适合真机的\n    想要创建适用于模拟器的.a文件，将device改成模拟器就可以      \n4.  如果没有生成所需头文件，按下图逐步操作添加  \n    ![操作](http://7xrirn.com1.z0.glb.clouddn.com/.a1.png)  \n    ![操作](http://7xrirn.com1.z0.glb.clouddn.com/.a2.png)  \t\n5.  按下图查看制作好的.a文件\n    ![2](http://7xrirn.com1.z0.glb.clouddn.com/3.png)\n\n\n\n<!-- more -->\n\n使用：\n1.  将生成的.a文件和.h文件拖到要使用的项目中\n    ![2](http://7xrirn.com1.z0.glb.clouddn.com/4.png)\n2.  直接使用就可以\n    ![2](http://7xrirn.com1.z0.glb.clouddn.com/5.png)\n\n\n","slug":"a-file-makeAndUse","published":1,"updated":"2016-06-06T06:28:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jn5000rpushs4wyx1i0"},{"title":"iOS判断NSString是否为纯数字","date":"2016-04-15T03:44:40.000Z","_content":"```\n//判断是否为整形\n- (BOOL)stringIsPureNumber:(NSString*)string {\n  NSScanner* scan = [NSScanner scannerWithString:string];\n  int val;\n  return [scan scanInt:&val] && [scan isAtEnd];\n}\n```\n<!-- more -->\n```\n //判断是否为浮点型\n- (BOOL)floatIsPureFloat:(NSString*)string {\n  NSScanner* scan = [NSScanner scannerWithString:string];\n  float val;\n  return [scan scanFloat:&val] && [scan isAtEnd];\n}\n```\n\n","source":"_posts/StringIsNumber.md","raw":"title: iOS判断NSString是否为纯数字\ndate: 2016-04-15 11:44:40\ntags:\n---\n```\n//判断是否为整形\n- (BOOL)stringIsPureNumber:(NSString*)string {\n  NSScanner* scan = [NSScanner scannerWithString:string];\n  int val;\n  return [scan scanInt:&val] && [scan isAtEnd];\n}\n```\n<!-- more -->\n```\n //判断是否为浮点型\n- (BOOL)floatIsPureFloat:(NSString*)string {\n  NSScanner* scan = [NSScanner scannerWithString:string];\n  float val;\n  return [scan scanFloat:&val] && [scan isAtEnd];\n}\n```\n\n","slug":"StringIsNumber","published":1,"updated":"2016-04-15T03:50:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jn8000spushfus5xacv"},{"title":"手电筒","date":"2016-03-28T06:06:15.000Z","_content":"\n\n[原码下载](http://pan.baidu.com/s/1gfIwpmb)\n\n```\n#import \"ViewController.h\"\n#import <AVFoundation/AVFoundation.h>\n@interface ViewController ()\n@property(nonatomic, strong) AVCaptureDevice *device;\n@property(nonatomic) AVCaptureTorchMode torchModeMe;\n@property(weak, nonatomic) IBOutlet UISwitch *controlSwitch;\n@end\n```\n\n```\n@implementation ViewController\n/**\n *  开关手电桶\n */\n- (IBAction)onOrOff:(id)sender {\n  // AVCaptureDevice代表抽象的硬件设备\n  // 返回用于捕获给定媒体类型的数据的默认设备\n  _device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];\n  //检查设备是否支持手电筒\n  if (![_device hasTorch]) {\n    NSLog(@\"设备不支持手电筒\");\n    return;\n  }\n  if ([sender isOn]) {\n    [self.view setBackgroundColor:[UIColor whiteColor]];\n    _torchModeMe = AVCaptureTorchModeOn;\n  } else {\n    [self.view setBackgroundColor:[UIColor blackColor]];\n    _torchModeMe = AVCaptureTorchModeOff;\n  }\n  // lockForConfiguration 来尝试在捕获设备上获取锁\n  [_device lockForConfiguration:nil];\n  [_device setTorchMode:_torchModeMe];\n  //来放弃锁定\n  [_device unlockForConfiguration];\n}\n- (void)viewDidLoad {\n  [super viewDidLoad];\n  [self onOrOff:_controlSwitch];\n}\n@end\n```","source":"_posts/Flashlight.md","raw":"title: 手电筒\ndate: 2016-03-28 14:06:15\ntags:\n---\n\n\n[原码下载](http://pan.baidu.com/s/1gfIwpmb)\n\n```\n#import \"ViewController.h\"\n#import <AVFoundation/AVFoundation.h>\n@interface ViewController ()\n@property(nonatomic, strong) AVCaptureDevice *device;\n@property(nonatomic) AVCaptureTorchMode torchModeMe;\n@property(weak, nonatomic) IBOutlet UISwitch *controlSwitch;\n@end\n```\n\n```\n@implementation ViewController\n/**\n *  开关手电桶\n */\n- (IBAction)onOrOff:(id)sender {\n  // AVCaptureDevice代表抽象的硬件设备\n  // 返回用于捕获给定媒体类型的数据的默认设备\n  _device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];\n  //检查设备是否支持手电筒\n  if (![_device hasTorch]) {\n    NSLog(@\"设备不支持手电筒\");\n    return;\n  }\n  if ([sender isOn]) {\n    [self.view setBackgroundColor:[UIColor whiteColor]];\n    _torchModeMe = AVCaptureTorchModeOn;\n  } else {\n    [self.view setBackgroundColor:[UIColor blackColor]];\n    _torchModeMe = AVCaptureTorchModeOff;\n  }\n  // lockForConfiguration 来尝试在捕获设备上获取锁\n  [_device lockForConfiguration:nil];\n  [_device setTorchMode:_torchModeMe];\n  //来放弃锁定\n  [_device unlockForConfiguration];\n}\n- (void)viewDidLoad {\n  [super viewDidLoad];\n  [self onOrOff:_controlSwitch];\n}\n@end\n```","slug":"Flashlight","published":1,"updated":"2016-03-28T06:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jna000tpushljogeidi"},{"title":"iOS 3D Touch","date":"2016-04-11T10:05:15.000Z","_content":"3D Touch说明\n---\n\n**轻压和重压(Peek and Pop)\n主屏幕快捷操作(Home Screen Quick Actions)**  \n\n3D Touch 给 iOS 9 用户提供了一个新的交互维度。在所支持3DTouch的设备上，人们可以通过按压应用的图标去快速选择应用定制的操作。在应用内，人们可以使用多种按压操作去获取一个项目的预览，可以在独立的视图里打开一个项获取相关操作。(了解更多在你的代码中如何添加3D Touch支持，参阅 [Adopting 3D Touch on iPhone .](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/index.html#//apple_ref/doc/uid/TP40016543))  \n\n系统会自动安排图标在快速操作列表中的位置是在左侧或者在右侧，这依赖于你的应用的图标在用户主屏幕的位置。(摒除图标在列表中的位置，在自左向右的语言中文字总是左对齐。)这里有主屏快捷操作的多种展现方式的例子。  \n\n**使用主屏幕快捷操作去开启引人注目的、高价值的任务。**例如，Maps可以让用户不需要打开Maps，通过在当前位置附近搜索就可以获得回家的方向。一个应用至少需要把一个有用的任务放在主屏幕快捷操作里；你可以提供最多四个快捷操作\n\n\n![1](http://7xrirn.com1.z0.glb.clouddn.com/13.png)\n**使用3D Touch必须要有6s或6s plus**\n\n 3D Touch的三大模块\n ---\n**home screen quick aactions**\n1. 静态菜单［不需要写代码，在info.plist中配制］\n2. 动态菜单［代码实现］\n3. 菜单跳转\n\n**peek and pop**\n1. 轻度按压预览页面-peek\n2. 大力按压跳转页面-pop\n3. peek过程中的自定义操作\n\n**force propertiesp**\n\n  <!-- more -->\n  \n**home screen quick aactions**\n1、静态菜单设置\n---\n[下载Demo](http://pan.baidu.com/s/1c1B13X2)\n下图中带“＊”号的，key必须设置，值可以没有，如果没有设置，设置菜单的当前cell将不会被显示出来\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch1.png)\nUIApplicationShortcutItems:\n1.  **副标题**   保持标题的简洁不会被切断从而帮助用户快速理解操作是非常重要的。如果你提供的副标题一行显示不全，系统会截断；如果你没有副标题，系统会把一行展示不完全的长标题以两行展现。\n2.  **图标**  UIApplicationShortcutItemIconType 显示的\n    iconType可以参考如下链接和下图**(如需swfit去下面链接中查看)**\n    [iconType](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationShortcutIcon_Class/index.html#//apple_ref/c/tdef/UIApplicationShortcutIconType)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch2.png)\n    **当UIApplicationShortcutItemIconType和UIApplicationShortcutItemIconFile两个都设置的时候\n    UIApplicationShortcutItemIconFile的优先级高于UIApplicationShortcutItemIconType**\n\n\n\n\n 在项目中的info.plist中的配制示例如下图\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch3.png) \n效果如下图\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch4.png) \n\n2､动态菜单及跳转\n---\n[下载Demo](http://pan.baidu.com/s/1c1B13X2)\n代码如下\n```\n@implementation AppDelegate\n- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  /**\n   *  3D Touch 动态菜单\n   *  其中一个item就是一个菜单项\n   */\n  UIApplicationShortcutItem *shortcutItem1 =\n      [[UIApplicationShortcutItem alloc] initWithType:@\"type1\"\n                                       localizedTitle:@\"列表\"];\n  //使用系统图标\n  //  UIApplicationShortcutIcon *icon2 = [UIApplicationShortcutIcon\n  //      iconWithType:UIApplicationShortcutIconTypeHome];\n  //使用自定义图标\n  //  UIApplicationShortcutIcon *icon2 =\n  //      [UIApplicationShortcutIcon iconWithTemplateImageName:@\"\"];\n  /**\n   不设置icon,Title默认靠右\n   */\n  UIApplicationShortcutItem *shortcutItem2 = [[UIApplicationShortcutItem alloc]\n           initWithType:@\"type2\"\n         localizedTitle:@\"force touch\"\n      localizedSubtitle:@\"subtitle 2subtitle 2\"\n                   icon:[UIApplicationShortcutIcon\n                            iconWithTemplateImageName:@\"\"]\n               userInfo:nil];\n //  /**\n  //   让title默认靠左，但不显示icon\n  //   只要在一个cell中设置其它的title都会靠左显示\n  //   */\n  //  UIApplicationShortcutItem *shortcutItem3 = [[UIApplicationShortcutItem\n  //  alloc]\n  //           initWithType:@\"\"\n  //         localizedTitle:@\"force touch\"\n  //      localizedSubtitle:@\"subtitle 2subtitle 2\"\n  //                   icon:[UIApplicationShortcutIcon\n  //                            iconWithTemplateImageName:@\"\"]\n  //               userInfo:nil];\n  [UIApplication sharedApplication].shortcutItems =\n      @[ shortcutItem1, shortcutItem2 ];  //, shortcutItem3\n  return YES;\n}\n```\n```\n//点击3D Touch 跳到指定的控制器\n/**\n *  点击item菜单会调用此方法\n *\n *  @param application\n *  @param shortcutItem      被点击的item\n *  @param completionHandler\n */\n- (void)application:(UIApplication *)application\n    performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem\n               completionHandler:(void (^)(BOOL))completionHandler {\n  //第一个启动的storyboard所指向的是window的根控制器\n  //获取tabbarctrl\n  UITabBarController *tabBarCtrl =\n      (UITabBarController *)application.keyWindow.rootViewController;\n  if ([shortcutItem.type isEqualToString:@\"type1\"]) {\n    //点击了列表\n    tabBarCtrl.selectedIndex = 1;\n  } else if ([shortcutItem.type isEqualToString:@\"type2\"]) {\n    //点击froce\n    tabBarCtrl.selectedIndex = 0;\n  }\n}\n```\n两种显示效果如下图\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch5.png)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch6.png)\n\n**peek and pop**\n---\n[下载Demo](http://pan.baidu.com/s/1hsnmYPm)\n**peek代码**\n注意点:\n1. ndexPathForRowAtPoint获取到的是以当前cell为0,0点的位置，而不是以tableview为0,0点\n2. 此处的方法一定要看清楚，不是convertPoint:toView:是convertPoint:fromView:  \n```\n首先要实现UIViewControllerPreviewingDelegate协议\n/**\n *  peek\n *\n *  @param previewingContext 包含被选中对象的所有信息\n *  @param location          被选中对象手指所在的location\n */\n- (nullable UIViewController *)\n        previewingContext:(id<UIViewControllerPreviewing>)previewingContext\nviewControllerForLocation:(CGPoint)location {\n  // indexPathForRowAtPoint获取到的是以当前cell为0,0点的位置\n  //我们需要的是从tableview顶部为0,0点的位置，才可以获取到当前被选中的cell\n  //获取以cell为0,0点的坐标\n  //  NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:location];\n  //转化坐标\n  //  此处的方法一定要看清楚，不是convertPoint:toView:是convertPoint:fromView:\n  //  location = [self.tableView convertPoint:location\n  //                                   toView:[previewingContext sourceView]];\n  location = [self.tableView convertPoint:location\n                                 fromView:[previewingContext sourceView]];\n  NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:location];\n  //根据cell获取数组中的数据\n  id abc = self.items[indexPath.row];\n  IrenaPre *pre = [[IrenaPre alloc] init];\n  pre.item = abc;\n  return pre;\n}\n```\n**自定义peek代码**\n---\n\n```\n//peek 过程中的自定义操作\n- (NSArray<id<UIPreviewActionItem>> *)previewActionItems {\n  //创建点赞操作\n  UIPreviewAction *item1 = [UIPreviewAction\n      actionWithTitle:@\"赞\"\n                style:UIPreviewActionStyleDefault\n              handler:^(UIPreviewAction *_Nonnull action,\n                        UIViewController *_Nonnull previewViewController) {\n                NSLog(@\"赞了\");\n              }];\n  //创建点赞操作\n  UIPreviewAction *item2 = [UIPreviewAction\n      actionWithTitle:@\"举报\"\n                style:UIPreviewActionStyleDestructive\n              handler:^(UIPreviewAction *_Nonnull action,\n                        UIViewController *_Nonnull previewViewController) {\n                NSLog(@\"举报了\");\n              }];\n   //\n   //添加group的效果可运行看看\n  //\n  UIPreviewActionGroup *group =\n      [UIPreviewActionGroup actionGroupWithTitle:@\"group\"\n                                           style:UIPreviewActionStyleDefault\n                                         actions:@[ item1, item2 ]];\n  //  return @[ group ];\n  return @[ item1, item2 ];\n}\n\n```\n**自定义peek后的**\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch8.png)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch9.png)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch10.png)\n\npop\n---\n**pop是在点出peek后在用力按压一下屏幕后出现的**\n```\n/**\n *  pop\n *\n *  @param previewingContext      包含被选中对象的所有信息\n *  @param viewControllerToCommit peek返回的controller\n */\n- (void)previewingContext:(id<UIViewControllerPreviewing>)previewingContext\n     commitViewController:(UIViewController *)viewControllerToCommit {\n  //跳转到peek的controller\n  // animated在pop时无效\n  [self.navigationController pushViewController:viewControllerToCommit\n                                       animated:YES];\n}\n```\n\n效果如下图\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch11.png)\n\n**force**\n---\n[下载Demo](http://pan.baidu.com/s/1hsnmYPm)\n按压力度，值范围［0-6.666667］\n代码主要在demo中的IrenaForce.h/.m类\n**代码如下**\n```\n#import \"IrenaForce.h\"\n@interface IrenaForce ()\n@property(nonatomic, strong) UIBezierPath *path;\n@end\n@implementation IrenaForce\n- (void)drawRect:(CGRect)rect {\n  [[UIColor orangeColor] set];\n  [self.path fill];\n}\n- (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {\n  //获取触摸对象\n  UITouch *touch = [touches anyObject];\n  NSLog(@\"%lf\", touch.force);\n  //创建路径\n  //根据压力*系数 手指的位置为圆心画圆\n  UIBezierPath *path = [[UIBezierPath alloc] init];\n  [path addArcWithCenter:[touch locationInView:self]\n                  radius:touch.force * 20\n              startAngle:0\n                endAngle:2 * M_PI\n               clockwise:YES];\n  self.path = path;\n  //重绘\n  [self setNeedsDisplay];\n}\n@end\n```\n\n效果如下\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch12.png)\n\n","source":"_posts/3DTouch.md","raw":"title: iOS 3D Touch\ndate: 2016-04-11 18:05:15\ntags:\n---\n3D Touch说明\n---\n\n**轻压和重压(Peek and Pop)\n主屏幕快捷操作(Home Screen Quick Actions)**  \n\n3D Touch 给 iOS 9 用户提供了一个新的交互维度。在所支持3DTouch的设备上，人们可以通过按压应用的图标去快速选择应用定制的操作。在应用内，人们可以使用多种按压操作去获取一个项目的预览，可以在独立的视图里打开一个项获取相关操作。(了解更多在你的代码中如何添加3D Touch支持，参阅 [Adopting 3D Touch on iPhone .](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/index.html#//apple_ref/doc/uid/TP40016543))  \n\n系统会自动安排图标在快速操作列表中的位置是在左侧或者在右侧，这依赖于你的应用的图标在用户主屏幕的位置。(摒除图标在列表中的位置，在自左向右的语言中文字总是左对齐。)这里有主屏快捷操作的多种展现方式的例子。  \n\n**使用主屏幕快捷操作去开启引人注目的、高价值的任务。**例如，Maps可以让用户不需要打开Maps，通过在当前位置附近搜索就可以获得回家的方向。一个应用至少需要把一个有用的任务放在主屏幕快捷操作里；你可以提供最多四个快捷操作\n\n\n![1](http://7xrirn.com1.z0.glb.clouddn.com/13.png)\n**使用3D Touch必须要有6s或6s plus**\n\n 3D Touch的三大模块\n ---\n**home screen quick aactions**\n1. 静态菜单［不需要写代码，在info.plist中配制］\n2. 动态菜单［代码实现］\n3. 菜单跳转\n\n**peek and pop**\n1. 轻度按压预览页面-peek\n2. 大力按压跳转页面-pop\n3. peek过程中的自定义操作\n\n**force propertiesp**\n\n  <!-- more -->\n  \n**home screen quick aactions**\n1、静态菜单设置\n---\n[下载Demo](http://pan.baidu.com/s/1c1B13X2)\n下图中带“＊”号的，key必须设置，值可以没有，如果没有设置，设置菜单的当前cell将不会被显示出来\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch1.png)\nUIApplicationShortcutItems:\n1.  **副标题**   保持标题的简洁不会被切断从而帮助用户快速理解操作是非常重要的。如果你提供的副标题一行显示不全，系统会截断；如果你没有副标题，系统会把一行展示不完全的长标题以两行展现。\n2.  **图标**  UIApplicationShortcutItemIconType 显示的\n    iconType可以参考如下链接和下图**(如需swfit去下面链接中查看)**\n    [iconType](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationShortcutIcon_Class/index.html#//apple_ref/c/tdef/UIApplicationShortcutIconType)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch2.png)\n    **当UIApplicationShortcutItemIconType和UIApplicationShortcutItemIconFile两个都设置的时候\n    UIApplicationShortcutItemIconFile的优先级高于UIApplicationShortcutItemIconType**\n\n\n\n\n 在项目中的info.plist中的配制示例如下图\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch3.png) \n效果如下图\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch4.png) \n\n2､动态菜单及跳转\n---\n[下载Demo](http://pan.baidu.com/s/1c1B13X2)\n代码如下\n```\n@implementation AppDelegate\n- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  /**\n   *  3D Touch 动态菜单\n   *  其中一个item就是一个菜单项\n   */\n  UIApplicationShortcutItem *shortcutItem1 =\n      [[UIApplicationShortcutItem alloc] initWithType:@\"type1\"\n                                       localizedTitle:@\"列表\"];\n  //使用系统图标\n  //  UIApplicationShortcutIcon *icon2 = [UIApplicationShortcutIcon\n  //      iconWithType:UIApplicationShortcutIconTypeHome];\n  //使用自定义图标\n  //  UIApplicationShortcutIcon *icon2 =\n  //      [UIApplicationShortcutIcon iconWithTemplateImageName:@\"\"];\n  /**\n   不设置icon,Title默认靠右\n   */\n  UIApplicationShortcutItem *shortcutItem2 = [[UIApplicationShortcutItem alloc]\n           initWithType:@\"type2\"\n         localizedTitle:@\"force touch\"\n      localizedSubtitle:@\"subtitle 2subtitle 2\"\n                   icon:[UIApplicationShortcutIcon\n                            iconWithTemplateImageName:@\"\"]\n               userInfo:nil];\n //  /**\n  //   让title默认靠左，但不显示icon\n  //   只要在一个cell中设置其它的title都会靠左显示\n  //   */\n  //  UIApplicationShortcutItem *shortcutItem3 = [[UIApplicationShortcutItem\n  //  alloc]\n  //           initWithType:@\"\"\n  //         localizedTitle:@\"force touch\"\n  //      localizedSubtitle:@\"subtitle 2subtitle 2\"\n  //                   icon:[UIApplicationShortcutIcon\n  //                            iconWithTemplateImageName:@\"\"]\n  //               userInfo:nil];\n  [UIApplication sharedApplication].shortcutItems =\n      @[ shortcutItem1, shortcutItem2 ];  //, shortcutItem3\n  return YES;\n}\n```\n```\n//点击3D Touch 跳到指定的控制器\n/**\n *  点击item菜单会调用此方法\n *\n *  @param application\n *  @param shortcutItem      被点击的item\n *  @param completionHandler\n */\n- (void)application:(UIApplication *)application\n    performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem\n               completionHandler:(void (^)(BOOL))completionHandler {\n  //第一个启动的storyboard所指向的是window的根控制器\n  //获取tabbarctrl\n  UITabBarController *tabBarCtrl =\n      (UITabBarController *)application.keyWindow.rootViewController;\n  if ([shortcutItem.type isEqualToString:@\"type1\"]) {\n    //点击了列表\n    tabBarCtrl.selectedIndex = 1;\n  } else if ([shortcutItem.type isEqualToString:@\"type2\"]) {\n    //点击froce\n    tabBarCtrl.selectedIndex = 0;\n  }\n}\n```\n两种显示效果如下图\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch5.png)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch6.png)\n\n**peek and pop**\n---\n[下载Demo](http://pan.baidu.com/s/1hsnmYPm)\n**peek代码**\n注意点:\n1. ndexPathForRowAtPoint获取到的是以当前cell为0,0点的位置，而不是以tableview为0,0点\n2. 此处的方法一定要看清楚，不是convertPoint:toView:是convertPoint:fromView:  \n```\n首先要实现UIViewControllerPreviewingDelegate协议\n/**\n *  peek\n *\n *  @param previewingContext 包含被选中对象的所有信息\n *  @param location          被选中对象手指所在的location\n */\n- (nullable UIViewController *)\n        previewingContext:(id<UIViewControllerPreviewing>)previewingContext\nviewControllerForLocation:(CGPoint)location {\n  // indexPathForRowAtPoint获取到的是以当前cell为0,0点的位置\n  //我们需要的是从tableview顶部为0,0点的位置，才可以获取到当前被选中的cell\n  //获取以cell为0,0点的坐标\n  //  NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:location];\n  //转化坐标\n  //  此处的方法一定要看清楚，不是convertPoint:toView:是convertPoint:fromView:\n  //  location = [self.tableView convertPoint:location\n  //                                   toView:[previewingContext sourceView]];\n  location = [self.tableView convertPoint:location\n                                 fromView:[previewingContext sourceView]];\n  NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:location];\n  //根据cell获取数组中的数据\n  id abc = self.items[indexPath.row];\n  IrenaPre *pre = [[IrenaPre alloc] init];\n  pre.item = abc;\n  return pre;\n}\n```\n**自定义peek代码**\n---\n\n```\n//peek 过程中的自定义操作\n- (NSArray<id<UIPreviewActionItem>> *)previewActionItems {\n  //创建点赞操作\n  UIPreviewAction *item1 = [UIPreviewAction\n      actionWithTitle:@\"赞\"\n                style:UIPreviewActionStyleDefault\n              handler:^(UIPreviewAction *_Nonnull action,\n                        UIViewController *_Nonnull previewViewController) {\n                NSLog(@\"赞了\");\n              }];\n  //创建点赞操作\n  UIPreviewAction *item2 = [UIPreviewAction\n      actionWithTitle:@\"举报\"\n                style:UIPreviewActionStyleDestructive\n              handler:^(UIPreviewAction *_Nonnull action,\n                        UIViewController *_Nonnull previewViewController) {\n                NSLog(@\"举报了\");\n              }];\n   //\n   //添加group的效果可运行看看\n  //\n  UIPreviewActionGroup *group =\n      [UIPreviewActionGroup actionGroupWithTitle:@\"group\"\n                                           style:UIPreviewActionStyleDefault\n                                         actions:@[ item1, item2 ]];\n  //  return @[ group ];\n  return @[ item1, item2 ];\n}\n\n```\n**自定义peek后的**\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch8.png)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch9.png)\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch10.png)\n\npop\n---\n**pop是在点出peek后在用力按压一下屏幕后出现的**\n```\n/**\n *  pop\n *\n *  @param previewingContext      包含被选中对象的所有信息\n *  @param viewControllerToCommit peek返回的controller\n */\n- (void)previewingContext:(id<UIViewControllerPreviewing>)previewingContext\n     commitViewController:(UIViewController *)viewControllerToCommit {\n  //跳转到peek的controller\n  // animated在pop时无效\n  [self.navigationController pushViewController:viewControllerToCommit\n                                       animated:YES];\n}\n```\n\n效果如下图\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch11.png)\n\n**force**\n---\n[下载Demo](http://pan.baidu.com/s/1hsnmYPm)\n按压力度，值范围［0-6.666667］\n代码主要在demo中的IrenaForce.h/.m类\n**代码如下**\n```\n#import \"IrenaForce.h\"\n@interface IrenaForce ()\n@property(nonatomic, strong) UIBezierPath *path;\n@end\n@implementation IrenaForce\n- (void)drawRect:(CGRect)rect {\n  [[UIColor orangeColor] set];\n  [self.path fill];\n}\n- (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {\n  //获取触摸对象\n  UITouch *touch = [touches anyObject];\n  NSLog(@\"%lf\", touch.force);\n  //创建路径\n  //根据压力*系数 手指的位置为圆心画圆\n  UIBezierPath *path = [[UIBezierPath alloc] init];\n  [path addArcWithCenter:[touch locationInView:self]\n                  radius:touch.force * 20\n              startAngle:0\n                endAngle:2 * M_PI\n               clockwise:YES];\n  self.path = path;\n  //重绘\n  [self setNeedsDisplay];\n}\n@end\n```\n\n效果如下\n![1](http://7xrirn.com1.z0.glb.clouddn.com/3D Touch12.png)\n\n","slug":"3DTouch","published":1,"updated":"2016-04-14T01:40:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jnc000upushcped9ng2"},{"title":"UIView Clip Subviews","date":"2016-06-14T09:58:01.000Z","_content":"\n最终效果  \n---\n![要实现的效果](http://7xrirn.com1.z0.glb.clouddn.com/clipSubviews-1.png)  \n<!-- more -->\n用代码实现如下\n---\n```\n[self.baseView setClipsToBounds:YES];\n```\n用storyBoard或xib操作步骤：\n--- \n  * 为**父类**勾选如下图红框中的选项\n  * ![要设置的属性](http://7xrirn.com1.z0.glb.clouddn.com/clipSubviews-3.png)  \n  * 未勾选的效果如下\n  * ![设置此属性前的效果](http://7xrirn.com1.z0.glb.clouddn.com/clipSubviews-2.png)  \n\n[Demo下载](http://pan.baidu.com/s/1eSG0yYm)\n---\n\n*本文使用iOS9.3  Xcode7.3*\n\n","source":"_posts/16-06-14-ViewClipSubviews.md","raw":"title: UIView Clip Subviews\ndate: 2016-06-14 17:58:01\ntags:\n---\n\n最终效果  \n---\n![要实现的效果](http://7xrirn.com1.z0.glb.clouddn.com/clipSubviews-1.png)  \n<!-- more -->\n用代码实现如下\n---\n```\n[self.baseView setClipsToBounds:YES];\n```\n用storyBoard或xib操作步骤：\n--- \n  * 为**父类**勾选如下图红框中的选项\n  * ![要设置的属性](http://7xrirn.com1.z0.glb.clouddn.com/clipSubviews-3.png)  \n  * 未勾选的效果如下\n  * ![设置此属性前的效果](http://7xrirn.com1.z0.glb.clouddn.com/clipSubviews-2.png)  \n\n[Demo下载](http://pan.baidu.com/s/1eSG0yYm)\n---\n\n*本文使用iOS9.3  Xcode7.3*\n\n","slug":"16-06-14-ViewClipSubviews","published":1,"updated":"2016-06-14T09:58:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jnd000vpushlxxjkx13"},{"title":"UIMenuController UITextField 的功能(复制，剪切...)菜单","date":"2016-06-13T08:18:46.000Z","_content":"[参考原文](http://www.jianshu.com/p/ddd59867909a)\n**苹果自带的UIMenuController功能扩展**\n\n\n**下面实现的效果如下图 **\n![自定义textField的MenuController](http://7xrirn.com1.z0.glb.clouddn.com/menuController-1.gif)\n\n**下面代码是自定义UITextField类的.m文件，.h中为空，如用Category会影响到全文**\n```\n#import \"menuController.h\"\n@implementation menuController\n- (BOOL)canPerformAction:(SEL)action withSender:(id)sender {\n  UIMenuController *menuController = [UIMenuController sharedMenuController];\n  UIMenuItem *item1 =\n      [[UIMenuItem alloc] initWithTitle:@\"你好\" action:@selector(abc)];\n  menuController.menuItems = @[ item1 ];\n  NSLog(@\"%@\", NSStringFromSelector(action));\n  if (action == @selector(cut:) || action == @selector(copy:) ||\n      action == @selector(paste:) || action == @selector(abc) ||\n      action == @selector(select:)) {\n    return YES;\n  }\n  return NO;\n}\n- (void)cut:(nullable id)sender {\n  NSLog(@\"%s\", __func__);\n}\n/**\n *  UIMenuItem 点击\n */\n- (void)abc {\n  self.text = [NSString stringWithFormat:@\"%@你好\", self.text];\n}\n@end\n```\n<!-- more -->\n一、UIMenuController认识\n---\n  * 默认情况下，UITextView / UITextFiled / UIWebView 都有苹果自带的有UIMenuController功能\n  * UITextFiled 的弹出菜单效果是系统自带的\n  \n二、UIMenuController基本使用\n---\n* ![自定义textField的MenuController](http://7xrirn.com1.z0.glb.clouddn.com/menuController-2.png)\n* 如为指定控件添加该功能；我们可以自定义；\n* 通过sharedMenuController获取单例对象；\n* 必须手动设置弹窗菜单可见；\n* 指定弹窗相对哪个View的哪个位置显示;\n* 指定其显示方向（上下左右）；\n* 指定Item多个（数组）；\n* \n* 而且可以指定menuFrame；不仅如此，系统也提供了可以监听menu的通知（即将显示/完全显示、即将隐藏/完全隐藏、menu的frame改变）  \n\n具体实现如下：\n1. 获得菜单 menu\n      UIMenuController *menu = [UIMenuController sharedMenuController];\n2. 设置菜单最终显示的位置\n  ```\n   // 菜单最终显示的位置\n  CGRect rect = CGRectMake(100, 100, 100, 100);\n  [menu setTargetRect:rect inView:self.label];\n  //\n  // targetRect：menuController指向的矩形框\n  //targetView：targetRect以targetView的左上角为坐标原点\n  ```\n3. 手动设置需要，显示菜单\n      [menu setMenuVisible:YES animated:YES];\n4. 必须要得通过第一响应者，来告诉MenuController它内部应该显示什么内容\n  a.  让第一响应者，实现下面方法，来告诉显示内容，监听哪些操作action\n\n```\n/**\n* 通过这个方法告诉UIMenuController它内部应该显示什么内容\n* 返回YES，就代表支持action这个操作\n*/\n- (BOOL)canPerformAction:(SEL)action withSender:(id)sender\n{\n  NSLog(@\"%@\", NSStringFromSelector(action));\n   if (action == @selector(cut:)\n      || action == @selector(copy:)\n      || action == @selector(paste:)) {\n      return YES; // YES ->  代表我们只监听 cut: / copy: / paste:方法\n  }\n  return NO; // 除了上面的操作，都不支持\n}\n// 打印如下：\n2015-7-28 10:06:25.578 UIMenuController[4735:388013] cut:\n2015-7-28 10:06:25.581 UIMenuController[4735:388013] copy:\n2015-7-28 10:06:25.581 UIMenuController[4735:388013] select:\n2015-7-28 10:06:25.582 UIMenuController[4735:388013] selectAll:\n2015-7-28 10:06:25.582 UIMenuController[4735:388013] paste:\n2015-7-28 10:06:25.582 UIMenuController[4735:388013] delete:\n2015-7-28 10:06:25.582 UIMenuController[4735:388013] _promptForReplace:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _transliterateChinese:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _showTextStyleOptions:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _define:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _addShortcut:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _accessibilitySpeak:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _accessibilitySpeakLanguageSelection:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _accessibilityPauseSpeaking:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _share:\n2015-7-28 10:06:25.584 UIMenuController[4735:388013] makeTextWritingDirectionRightToLeft:\n2015-7-28 10:06:25.584 UIMenuController[4735:388013] makeTextWritingDirectionLeftToRight:\n```\n5. 设置第一响应者\n  a.  前提是：必须要有第一响应者，让第一响应者，实现上面方法，告诉显示什么内容。实现下面方法，可以让某个视图或者控制器，成为第一响应者： **canBecomeFirstResponder**方法。\n\n```\n/**\n* 说明控制器可以成为第一响应者\n*/\n- (BOOL)canBecomeFirstResponder\n{\n  return YES;\n}\n```\n\n实现监听菜单内容的对应的action方法\n```\n - (void)cut:(UIMenuController *)menu\n{\n    NSLog(@\"%s %@\", __func__, menu);\n}\n- (void)copy:(UIMenuController *)menu\n{\n    NSLog(@\"%s %@\", __func__, menu);\n}\n- (void)paste:(UIMenuController *)menu\n{\n    NSLog(@\"%s %@\", __func__, menu);\n}\n```\n监听到menu菜单的显示与隐藏与frame改变的通知\n如下：监听menu即将显示的通知\n\n1.注册通知监听\n// 注册监听 菜单即将显示 通知\n```\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(show:) name:UIMenuControllerWillShowMenuNotification object:nil];\n```\n2.实现监听到menu菜单显示调用方法\n```\n- (void)dealloc{\n  // 移除监听通知\n  [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n```\n3.dealloc方法中，移除通知监听\n```\n- (void)dealloc{\n   // 移除监听通知\n  [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n```\n设置menu支持中文，显示中文 ->修改软件应用支持中文\n* ![自定义textField的MenuController](http://7xrirn.com1.z0.glb.clouddn.com/menuController-3.png)\n* 解决方案：查看UIMenuController的头文件，我们发现有个属性menuItems数组，通过它我们可以增加额外的菜单项,自定义meun显示自己定义的文字\n\n注意：\n---\n* 创建只能通过[UIMenuController sharedMenuController];单例方式获取，不能通过init方式创建，否则报如下错误\n  **获得菜单 -> 回报如下错误**\n      UIMenuController *menu = [[UIMenuController alloc] init]; \n\n      Terminating app due to uncaught exception 'NSInternalInconsistencyException',\n      reason: 'There can only be one UIMenuController instance.'\n      \n三、应用\n---\n1. 如何给Label添加UIMenuController功能\n  1.设置UILabel允许交互\n  2.给UILabel添加手势，\n  3.在UILabel手势监听方法中，创建UIMenuController-》menu\n  4.设置menu位置，利用UIMenuController的对象方法setTargetRect: inView:方法来设置menu显示在在那个控件的那个位置\n  6.显示menu, -》 menu setMenuVisible: animation:\n  7.设置menu显示内容\n  注意：得通过第一响应者，来告诉menu它内部显示什么内容。如果显示中文标题，就需要手动设置APP支持中文\n  实现：\n  7.1让label成为第一响应者（注意：不一定第一响应者必须是控制器）\n  7.2设置menu显示menuItem，告诉menu可以显示什么内容。\n\n\n```\n#import \"JPLabel.h\"\n@implementation JPLabel\n- (void)awakeFromNib\n{\n   // 给Label添加手势\n   [self addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelClick)]];\n}\n-  (void)initWithFrame:(CGRect)rect{\n   if(self = [super initWithFrame:rect]){\n      // 给Label添加手势 \n      [self addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelClick)]];\n   }\n}\n- (void)labelClick\n{\n    // 让label成为第一响应者\n    [self becomeFirstResponder];\n    // 获得菜单\n    UIMenuController *menu = [UIMenuController sharedMenuController];\n    // 设置菜单内容，显示中文，所以要手动设置app支持中文\n    menu.menuItems = @[\n                       [[UIMenuItem alloc] initWithTitle:@\"顶\" action:@selector(ding:)],\n                       [[UIMenuItem alloc] initWithTitle:@\"回复\" action:@selector(reply:)],\n                       [[UIMenuItem alloc] initWithTitle:@\"举报\" action:@selector(warn:)]\n                       ];\n    // 菜单最终显示的位置\n    [menu setTargetRect:self.bounds inView:self];\n    // 显示菜单\n    [menu setMenuVisible:YES animated:YES];\n}\n#pragma mark - UIMenuController相关\n/**\n * 让Label具备成为第一响应者的资格\n */\n- (BOOL)canBecomeFirstResponder\n{\n    return YES;\n}\n/**\n * 通过第一响应者的这个方法告诉UIMenuController可以显示什么内容\n */\n- (BOOL)canPerformAction:(SEL)action withSender:(id)sender\n{\n    if ( (action == @selector(copy:) && self.text) // 需要有文字才能支持复制\n        || (action == @selector(cut:) && self.text) // 需要有文字才能支持剪切\n        || action == @selector(paste:)\n        || action == @selector(ding:)\n        || action == @selector(reply:)\n        || action == @selector(warn:)) return YES;\n    return NO;\n}\n#pragma mark - 监听MenuItem的点击事件\n- (void)cut:(UIMenuController *)menu\n{\n    // 将label的文字存储到粘贴板\n    [UIPasteboard generalPasteboard].string = self.text;\n    // 清空文字\n    self.text = nil;\n}\n- (void)copy:(UIMenuController *)menu\n{\n    // 将label的文字存储到粘贴板\n    [UIPasteboard generalPasteboard].string = self.text;\n}\n- (void)paste:(UIMenuController *)menu\n{\n    // 将粘贴板的文字赋值给label\n    self.text = [UIPasteboard generalPasteboard].string;\n}\n- (void)ding:(UIMenuController *)menu\n{\n    NSLog(@\"%s %@\", __func__, menu);\n}\n- (void)reply:(UIMenuController *)menu\n{\n    NSLog(@\"%s %@\", __func__, menu);\n}\n- (void)warn:(UIMenuController *)menu\n{\n    NSLog(@\"%s %@\", __func__, menu);\n}\n@end\n```\n\n\n","source":"_posts/16-06-13-UIMenuController.md","raw":"title: UIMenuController UITextField 的功能(复制，剪切...)菜单\ndate: 2016-06-13 16:18:46\ntags:\n---\n[参考原文](http://www.jianshu.com/p/ddd59867909a)\n**苹果自带的UIMenuController功能扩展**\n\n\n**下面实现的效果如下图 **\n![自定义textField的MenuController](http://7xrirn.com1.z0.glb.clouddn.com/menuController-1.gif)\n\n**下面代码是自定义UITextField类的.m文件，.h中为空，如用Category会影响到全文**\n```\n#import \"menuController.h\"\n@implementation menuController\n- (BOOL)canPerformAction:(SEL)action withSender:(id)sender {\n  UIMenuController *menuController = [UIMenuController sharedMenuController];\n  UIMenuItem *item1 =\n      [[UIMenuItem alloc] initWithTitle:@\"你好\" action:@selector(abc)];\n  menuController.menuItems = @[ item1 ];\n  NSLog(@\"%@\", NSStringFromSelector(action));\n  if (action == @selector(cut:) || action == @selector(copy:) ||\n      action == @selector(paste:) || action == @selector(abc) ||\n      action == @selector(select:)) {\n    return YES;\n  }\n  return NO;\n}\n- (void)cut:(nullable id)sender {\n  NSLog(@\"%s\", __func__);\n}\n/**\n *  UIMenuItem 点击\n */\n- (void)abc {\n  self.text = [NSString stringWithFormat:@\"%@你好\", self.text];\n}\n@end\n```\n<!-- more -->\n一、UIMenuController认识\n---\n  * 默认情况下，UITextView / UITextFiled / UIWebView 都有苹果自带的有UIMenuController功能\n  * UITextFiled 的弹出菜单效果是系统自带的\n  \n二、UIMenuController基本使用\n---\n* ![自定义textField的MenuController](http://7xrirn.com1.z0.glb.clouddn.com/menuController-2.png)\n* 如为指定控件添加该功能；我们可以自定义；\n* 通过sharedMenuController获取单例对象；\n* 必须手动设置弹窗菜单可见；\n* 指定弹窗相对哪个View的哪个位置显示;\n* 指定其显示方向（上下左右）；\n* 指定Item多个（数组）；\n* \n* 而且可以指定menuFrame；不仅如此，系统也提供了可以监听menu的通知（即将显示/完全显示、即将隐藏/完全隐藏、menu的frame改变）  \n\n具体实现如下：\n1. 获得菜单 menu\n      UIMenuController *menu = [UIMenuController sharedMenuController];\n2. 设置菜单最终显示的位置\n  ```\n   // 菜单最终显示的位置\n  CGRect rect = CGRectMake(100, 100, 100, 100);\n  [menu setTargetRect:rect inView:self.label];\n  //\n  // targetRect：menuController指向的矩形框\n  //targetView：targetRect以targetView的左上角为坐标原点\n  ```\n3. 手动设置需要，显示菜单\n      [menu setMenuVisible:YES animated:YES];\n4. 必须要得通过第一响应者，来告诉MenuController它内部应该显示什么内容\n  a.  让第一响应者，实现下面方法，来告诉显示内容，监听哪些操作action\n\n```\n/**\n* 通过这个方法告诉UIMenuController它内部应该显示什么内容\n* 返回YES，就代表支持action这个操作\n*/\n- (BOOL)canPerformAction:(SEL)action withSender:(id)sender\n{\n  NSLog(@\"%@\", NSStringFromSelector(action));\n   if (action == @selector(cut:)\n      || action == @selector(copy:)\n      || action == @selector(paste:)) {\n      return YES; // YES ->  代表我们只监听 cut: / copy: / paste:方法\n  }\n  return NO; // 除了上面的操作，都不支持\n}\n// 打印如下：\n2015-7-28 10:06:25.578 UIMenuController[4735:388013] cut:\n2015-7-28 10:06:25.581 UIMenuController[4735:388013] copy:\n2015-7-28 10:06:25.581 UIMenuController[4735:388013] select:\n2015-7-28 10:06:25.582 UIMenuController[4735:388013] selectAll:\n2015-7-28 10:06:25.582 UIMenuController[4735:388013] paste:\n2015-7-28 10:06:25.582 UIMenuController[4735:388013] delete:\n2015-7-28 10:06:25.582 UIMenuController[4735:388013] _promptForReplace:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _transliterateChinese:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _showTextStyleOptions:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _define:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _addShortcut:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _accessibilitySpeak:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _accessibilitySpeakLanguageSelection:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _accessibilityPauseSpeaking:\n2015-7-28 10:06:25.583 UIMenuController[4735:388013] _share:\n2015-7-28 10:06:25.584 UIMenuController[4735:388013] makeTextWritingDirectionRightToLeft:\n2015-7-28 10:06:25.584 UIMenuController[4735:388013] makeTextWritingDirectionLeftToRight:\n```\n5. 设置第一响应者\n  a.  前提是：必须要有第一响应者，让第一响应者，实现上面方法，告诉显示什么内容。实现下面方法，可以让某个视图或者控制器，成为第一响应者： **canBecomeFirstResponder**方法。\n\n```\n/**\n* 说明控制器可以成为第一响应者\n*/\n- (BOOL)canBecomeFirstResponder\n{\n  return YES;\n}\n```\n\n实现监听菜单内容的对应的action方法\n```\n - (void)cut:(UIMenuController *)menu\n{\n    NSLog(@\"%s %@\", __func__, menu);\n}\n- (void)copy:(UIMenuController *)menu\n{\n    NSLog(@\"%s %@\", __func__, menu);\n}\n- (void)paste:(UIMenuController *)menu\n{\n    NSLog(@\"%s %@\", __func__, menu);\n}\n```\n监听到menu菜单的显示与隐藏与frame改变的通知\n如下：监听menu即将显示的通知\n\n1.注册通知监听\n// 注册监听 菜单即将显示 通知\n```\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(show:) name:UIMenuControllerWillShowMenuNotification object:nil];\n```\n2.实现监听到menu菜单显示调用方法\n```\n- (void)dealloc{\n  // 移除监听通知\n  [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n```\n3.dealloc方法中，移除通知监听\n```\n- (void)dealloc{\n   // 移除监听通知\n  [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n```\n设置menu支持中文，显示中文 ->修改软件应用支持中文\n* ![自定义textField的MenuController](http://7xrirn.com1.z0.glb.clouddn.com/menuController-3.png)\n* 解决方案：查看UIMenuController的头文件，我们发现有个属性menuItems数组，通过它我们可以增加额外的菜单项,自定义meun显示自己定义的文字\n\n注意：\n---\n* 创建只能通过[UIMenuController sharedMenuController];单例方式获取，不能通过init方式创建，否则报如下错误\n  **获得菜单 -> 回报如下错误**\n      UIMenuController *menu = [[UIMenuController alloc] init]; \n\n      Terminating app due to uncaught exception 'NSInternalInconsistencyException',\n      reason: 'There can only be one UIMenuController instance.'\n      \n三、应用\n---\n1. 如何给Label添加UIMenuController功能\n  1.设置UILabel允许交互\n  2.给UILabel添加手势，\n  3.在UILabel手势监听方法中，创建UIMenuController-》menu\n  4.设置menu位置，利用UIMenuController的对象方法setTargetRect: inView:方法来设置menu显示在在那个控件的那个位置\n  6.显示menu, -》 menu setMenuVisible: animation:\n  7.设置menu显示内容\n  注意：得通过第一响应者，来告诉menu它内部显示什么内容。如果显示中文标题，就需要手动设置APP支持中文\n  实现：\n  7.1让label成为第一响应者（注意：不一定第一响应者必须是控制器）\n  7.2设置menu显示menuItem，告诉menu可以显示什么内容。\n\n\n```\n#import \"JPLabel.h\"\n@implementation JPLabel\n- (void)awakeFromNib\n{\n   // 给Label添加手势\n   [self addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelClick)]];\n}\n-  (void)initWithFrame:(CGRect)rect{\n   if(self = [super initWithFrame:rect]){\n      // 给Label添加手势 \n      [self addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelClick)]];\n   }\n}\n- (void)labelClick\n{\n    // 让label成为第一响应者\n    [self becomeFirstResponder];\n    // 获得菜单\n    UIMenuController *menu = [UIMenuController sharedMenuController];\n    // 设置菜单内容，显示中文，所以要手动设置app支持中文\n    menu.menuItems = @[\n                       [[UIMenuItem alloc] initWithTitle:@\"顶\" action:@selector(ding:)],\n                       [[UIMenuItem alloc] initWithTitle:@\"回复\" action:@selector(reply:)],\n                       [[UIMenuItem alloc] initWithTitle:@\"举报\" action:@selector(warn:)]\n                       ];\n    // 菜单最终显示的位置\n    [menu setTargetRect:self.bounds inView:self];\n    // 显示菜单\n    [menu setMenuVisible:YES animated:YES];\n}\n#pragma mark - UIMenuController相关\n/**\n * 让Label具备成为第一响应者的资格\n */\n- (BOOL)canBecomeFirstResponder\n{\n    return YES;\n}\n/**\n * 通过第一响应者的这个方法告诉UIMenuController可以显示什么内容\n */\n- (BOOL)canPerformAction:(SEL)action withSender:(id)sender\n{\n    if ( (action == @selector(copy:) && self.text) // 需要有文字才能支持复制\n        || (action == @selector(cut:) && self.text) // 需要有文字才能支持剪切\n        || action == @selector(paste:)\n        || action == @selector(ding:)\n        || action == @selector(reply:)\n        || action == @selector(warn:)) return YES;\n    return NO;\n}\n#pragma mark - 监听MenuItem的点击事件\n- (void)cut:(UIMenuController *)menu\n{\n    // 将label的文字存储到粘贴板\n    [UIPasteboard generalPasteboard].string = self.text;\n    // 清空文字\n    self.text = nil;\n}\n- (void)copy:(UIMenuController *)menu\n{\n    // 将label的文字存储到粘贴板\n    [UIPasteboard generalPasteboard].string = self.text;\n}\n- (void)paste:(UIMenuController *)menu\n{\n    // 将粘贴板的文字赋值给label\n    self.text = [UIPasteboard generalPasteboard].string;\n}\n- (void)ding:(UIMenuController *)menu\n{\n    NSLog(@\"%s %@\", __func__, menu);\n}\n- (void)reply:(UIMenuController *)menu\n{\n    NSLog(@\"%s %@\", __func__, menu);\n}\n- (void)warn:(UIMenuController *)menu\n{\n    NSLog(@\"%s %@\", __func__, menu);\n}\n@end\n```\n\n\n","slug":"16-06-13-UIMenuController","published":1,"updated":"2016-06-13T08:19:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jng000wpushb3x8tvqu"},{"title":"iOS 汉字转换拼音 CFStringTransform","date":"2016-06-13T06:21:38.000Z","_content":"[参考原文](http://nshipster.cn/cfstringtransform/)\n\n**CFStringTransform** 是 Core Foundation 中的一部分\n```\nCF_EXPORT\nBoolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)\n```\n这个函数传入以下参数，并返回一个 Boolean 来表示转换是否成功：\n**string**: 需要转换的字符串。由于这个参数是 CFMutableStringRef 类型，一个 NSMutableString 类型也可以通过自由桥接的方式传入。  \n**range**: 转换操作作用的范围。这个参数是 CFRange，而不是 NSRange。  \n**transform**: 需要应用的变换。这个参数使用了包含下面将提到的字符串常量的 ICU transform   string。  \n**reverse**: 如有需要，是否返回反转过的变换。  \n\n**CFStringTransform** 中的 transform 参数涉及的内容很多。这里有个它能做什么的概述：\n<!-- more -->\n去掉重音和变音符\n---\nÉnġlišh långuãge lẳcks iñterêßţing diaçrïtičş. 如此类的字符串，把扩展的拉丁字符集正则化为 ASCII 友好型的表示，它非常有用。用 **kCFStringTransformStripCombiningMarks** 变换来去掉任意字符串中弯弯扭扭的符号。\n\n为 Unicode 字符命名\n---\n\n**kCFStringTransformToUnicodeName** 让你可以找出特殊字符的 Unicode 标准名，包括 Emoji。例如：\"🐑💨✨\" 被转换成 \"{SHEEP} {DASH SYMBOL} {SPARKLES}\"，而 \"🐷\" 变成了 \"{PIG FACE}\"。\n\n不同拼写之间转写\n---\n\n除了英语这个重大例外（和它那令人愉快的拼写不一致），书写系统一般是将语言音调编码成一致的符号表示。欧洲语言一般使用拉丁字母（外加一些变音符），俄罗斯用西里尔字母，日本用平假名和片假名，泰国、韩国和阿拉伯国家也都有自己的字母。\n\n虽然每种语言都有特殊的音调列表，也许有些其他语言会缺失，所有主要书写系统的交集已经足以让你高效的在不同字母之间转写（不要跟翻译搞混了）。\n\n**CFStringTransform** 可以在拉丁语和阿拉伯语、西里尔语、希腊语、韩语（韩国）、希伯来语、日语（平假名和片假名）、普通话、泰语之间来回转写。\n\n*并且这只是用了核心类库中常量定义！直接传入一个ICU transform表达式，CFStringTransform 还可以在拉丁语和阿拉伯语、亚美尼亚语、注音、西里尔字母、格鲁吉亚语、希腊语、汉语、韩语、希伯来语、平假名、印度语（梵文，古吉拉特语，旁遮普文，卡纳达语，马拉雅拉姆语，奥里雅语，泰米尔语，特卢固）、朝鲜语、片假名、叙利亚语、塔纳文、泰语之间转写。*\n![不同拼写之间转写](http://7xrirn.com1.z0.glb.clouddn.com/pinyin-1.png)\n\n平时可能会遇到的问题\n---\n字符串变换的一个更实际的应用是正则化不可预知的用户输入。即使你的应用并不单独处理其他语言，你也应当能智能地处理用户向你的应用输入的任何内容。\n\n例如，你想在设备上建立一个可搜索的电影索引，它包含世界各地的人的问候：\n  * 首先，应用 **kCFStringTransformToLatin** 变换将所有非英文文本转换为拉丁字母表示。\nHello! こんにちは! สวัสดี! مرحبا! 您好! → Hello! kon'nichiha! s̄wạs̄dī! mrḥbạ! nín hǎo!\n  * 然后，应用 **kCFStringTransformStripCombiningMarks** 变换来去除变音符和重音。\nHello! kon'nichiha! s̄wạs̄dī! mrḥbạ! nín hǎo! → Hello! kon'nichiha! swasdi! mrhba! nin hao!\n  * 最后，用 **CFStringLowercase** 转为小写，**并用CFStringTokenizer** 分词用作文本的索引。\n(hello, kon'nichiha, swasdi, mrhba, nin, hao)\n\n**通过对用户输入的文本使用同样的变换，你就可以实现一个通用的搜索，无论搜索文本或内容是什么语言！**\n\n\n**下面我提供一个包含如下两个方法的Category**\n**[Category下载地址](http://pan.baidu.com/s/1c27aX9I)**\n```\n/**\n *  汉字转成没有声调有空格的拼音\n *  (空格可根据需求调整return的withString后的字符串)\n *  @param wordStr 需要拼音的汉字(词组/句子)\n *\n *  @return 拼音\n */\n+ (NSString *)transformToPinYin:(NSString *)wordStr {\n  NSMutableString *mutableString = [NSMutableString stringWithString:wordStr];\n  //带声调\n  CFStringTransform((CFMutableStringRef)mutableString, NULL,\n                    kCFStringTransformToLatin, NO);\n  //  //不带声调\n  CFStringTransform((CFMutableStringRef)mutableString, NULL,\n                    kCFStringTransformStripDiacritics, NO);\n  //你好 -> ni hao -> nihao\n  return [mutableString stringByReplacingOccurrencesOfString:@\" \"\n                                                  withString:@\"    \"];\n}\n/**\n *  汉字转成有声调有空格的拼音\n *  (空格可根据需求调整return的withString后的字符串)\n *  @param wordStr 需要拼音的汉字(词组/句子)\n *\n *  @return 带声调的拼音\n */\n+ (NSString *)transformToPinYinHaveTone:(NSString *)wordStr {\n  NSMutableString *mutableString = [NSMutableString stringWithString:wordStr];\n  //带声调\n  CFStringTransform((CFMutableStringRef)mutableString, NULL,\n                    kCFStringTransformToLatin, NO);\n  //你好 -> ni hao -> nihao\n  return [mutableString stringByReplacingOccurrencesOfString:@\" \"\n                                                  withString:@\"    \"];\n}\n```","source":"_posts/16-06-13-CFStringTransform.md","raw":"title: iOS 汉字转换拼音 CFStringTransform\ndate: 2016-06-13 14:21:38\ntags:\n---\n[参考原文](http://nshipster.cn/cfstringtransform/)\n\n**CFStringTransform** 是 Core Foundation 中的一部分\n```\nCF_EXPORT\nBoolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)\n```\n这个函数传入以下参数，并返回一个 Boolean 来表示转换是否成功：\n**string**: 需要转换的字符串。由于这个参数是 CFMutableStringRef 类型，一个 NSMutableString 类型也可以通过自由桥接的方式传入。  \n**range**: 转换操作作用的范围。这个参数是 CFRange，而不是 NSRange。  \n**transform**: 需要应用的变换。这个参数使用了包含下面将提到的字符串常量的 ICU transform   string。  \n**reverse**: 如有需要，是否返回反转过的变换。  \n\n**CFStringTransform** 中的 transform 参数涉及的内容很多。这里有个它能做什么的概述：\n<!-- more -->\n去掉重音和变音符\n---\nÉnġlišh långuãge lẳcks iñterêßţing diaçrïtičş. 如此类的字符串，把扩展的拉丁字符集正则化为 ASCII 友好型的表示，它非常有用。用 **kCFStringTransformStripCombiningMarks** 变换来去掉任意字符串中弯弯扭扭的符号。\n\n为 Unicode 字符命名\n---\n\n**kCFStringTransformToUnicodeName** 让你可以找出特殊字符的 Unicode 标准名，包括 Emoji。例如：\"🐑💨✨\" 被转换成 \"{SHEEP} {DASH SYMBOL} {SPARKLES}\"，而 \"🐷\" 变成了 \"{PIG FACE}\"。\n\n不同拼写之间转写\n---\n\n除了英语这个重大例外（和它那令人愉快的拼写不一致），书写系统一般是将语言音调编码成一致的符号表示。欧洲语言一般使用拉丁字母（外加一些变音符），俄罗斯用西里尔字母，日本用平假名和片假名，泰国、韩国和阿拉伯国家也都有自己的字母。\n\n虽然每种语言都有特殊的音调列表，也许有些其他语言会缺失，所有主要书写系统的交集已经足以让你高效的在不同字母之间转写（不要跟翻译搞混了）。\n\n**CFStringTransform** 可以在拉丁语和阿拉伯语、西里尔语、希腊语、韩语（韩国）、希伯来语、日语（平假名和片假名）、普通话、泰语之间来回转写。\n\n*并且这只是用了核心类库中常量定义！直接传入一个ICU transform表达式，CFStringTransform 还可以在拉丁语和阿拉伯语、亚美尼亚语、注音、西里尔字母、格鲁吉亚语、希腊语、汉语、韩语、希伯来语、平假名、印度语（梵文，古吉拉特语，旁遮普文，卡纳达语，马拉雅拉姆语，奥里雅语，泰米尔语，特卢固）、朝鲜语、片假名、叙利亚语、塔纳文、泰语之间转写。*\n![不同拼写之间转写](http://7xrirn.com1.z0.glb.clouddn.com/pinyin-1.png)\n\n平时可能会遇到的问题\n---\n字符串变换的一个更实际的应用是正则化不可预知的用户输入。即使你的应用并不单独处理其他语言，你也应当能智能地处理用户向你的应用输入的任何内容。\n\n例如，你想在设备上建立一个可搜索的电影索引，它包含世界各地的人的问候：\n  * 首先，应用 **kCFStringTransformToLatin** 变换将所有非英文文本转换为拉丁字母表示。\nHello! こんにちは! สวัสดี! مرحبا! 您好! → Hello! kon'nichiha! s̄wạs̄dī! mrḥbạ! nín hǎo!\n  * 然后，应用 **kCFStringTransformStripCombiningMarks** 变换来去除变音符和重音。\nHello! kon'nichiha! s̄wạs̄dī! mrḥbạ! nín hǎo! → Hello! kon'nichiha! swasdi! mrhba! nin hao!\n  * 最后，用 **CFStringLowercase** 转为小写，**并用CFStringTokenizer** 分词用作文本的索引。\n(hello, kon'nichiha, swasdi, mrhba, nin, hao)\n\n**通过对用户输入的文本使用同样的变换，你就可以实现一个通用的搜索，无论搜索文本或内容是什么语言！**\n\n\n**下面我提供一个包含如下两个方法的Category**\n**[Category下载地址](http://pan.baidu.com/s/1c27aX9I)**\n```\n/**\n *  汉字转成没有声调有空格的拼音\n *  (空格可根据需求调整return的withString后的字符串)\n *  @param wordStr 需要拼音的汉字(词组/句子)\n *\n *  @return 拼音\n */\n+ (NSString *)transformToPinYin:(NSString *)wordStr {\n  NSMutableString *mutableString = [NSMutableString stringWithString:wordStr];\n  //带声调\n  CFStringTransform((CFMutableStringRef)mutableString, NULL,\n                    kCFStringTransformToLatin, NO);\n  //  //不带声调\n  CFStringTransform((CFMutableStringRef)mutableString, NULL,\n                    kCFStringTransformStripDiacritics, NO);\n  //你好 -> ni hao -> nihao\n  return [mutableString stringByReplacingOccurrencesOfString:@\" \"\n                                                  withString:@\"    \"];\n}\n/**\n *  汉字转成有声调有空格的拼音\n *  (空格可根据需求调整return的withString后的字符串)\n *  @param wordStr 需要拼音的汉字(词组/句子)\n *\n *  @return 带声调的拼音\n */\n+ (NSString *)transformToPinYinHaveTone:(NSString *)wordStr {\n  NSMutableString *mutableString = [NSMutableString stringWithString:wordStr];\n  //带声调\n  CFStringTransform((CFMutableStringRef)mutableString, NULL,\n                    kCFStringTransformToLatin, NO);\n  //你好 -> ni hao -> nihao\n  return [mutableString stringByReplacingOccurrencesOfString:@\" \"\n                                                  withString:@\"    \"];\n}\n```","slug":"16-06-13-CFStringTransform","published":1,"updated":"2016-06-13T06:33:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jnq000xpushucurymsr"},{"title":"iOS Web service SOAP消息(基于AFNetworking)","date":"2016-06-07T08:39:16.000Z","_content":"**Web service**是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。\nWeb Service技术， 能使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件， 就可相互交换数据或集成。依据Web Service规范实施的应用之间， 无论它们所使用的语言、 平台或内部协议是什么， 都可以相互交换数据。Web Service是自描述、 自包含的可用网络模块， 可以执行具体的业务功能。Web Service也很容易部署， 因为它们基于一些常规的产业标准以及已有的一些技术，诸如标准通用标记语言下的子集XML、HTTP。Web Service减少了应用接口的花费。\nWeb Service为整个企业甚至多个组织之间的业务流程的集成提供了一个通用机制。\n\n\n**下面分别是AFNetworking 2.6和3.0的关键代码，如想要Demo的，留言给我**\n\n<!-- more -->\nAFNetworking 3.0\n---\n```\n#pragma mark - 发送请求\n/**\n *  发送请求\n */\n- (void)webServiceRequestWithsoapMessage:(NSString *)soapMessage {\n  NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url11];\n  [request addValue:@\"text/xml; charset=utf-8\"\n      forHTTPHeaderField:@\"Content-Type\"];\n  [request setHTTPMethod:@\"POST\"];\n  [request setHTTPBody:[soapMessage dataUsingEncoding:NSUTF8StringEncoding]];\n  NSURLSessionConfiguration *configuration =\n      [NSURLSessionConfiguration defaultSessionConfiguration];\n  AFURLSessionManager *manager =\n      [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];\n  manager.responseSerializer = [AFXMLParserResponseSerializer serializer];\n  NSURLSessionDataTask *dataTask =\n      [manager dataTaskWithRequest:request\n                 completionHandler:^(NSURLResponse *response, id responseObject,\n                                     NSError *error) {\n                   if (error) {\n                     NSLog(@\"Error: %@\", [error description]);\n                   } else {\n                     [responseObject setDelegate:self];\n                     [responseObject parse];\n                   }\n                 }];\n  [dataTask resume];\n}\n```\n\n   \nAFNetworking 2.6\n---\n```\n#pragma mark - 发送请求\n/**\n *  发送请求\n */\n- (void)webServiceRequestWithsoapMessage:(NSString *)soapMessage {\n  NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];\n  [request addValue:@\"text/xml; charset=utf-8\"\n      forHTTPHeaderField:@\"Content-Type\"];\n  [request setHTTPMethod:@\"POST\"];\n  [request setHTTPBody:[soapMessage dataUsingEncoding:NSUTF8StringEncoding]];\n  AFHTTPRequestOperation *operation =\n      [[AFHTTPRequestOperation alloc] initWithRequest:request];\n  operation.responseSerializer = [AFXMLParserResponseSerializer serializer];\n  [operation setCompletionBlockWithSuccess:^(\n                 AFHTTPRequestOperation *_Nonnull operation,\n                 id _Nonnull responseObject) {\n    NSLog(@\"请求成功：%@\", [responseObject description]);\n    /**\n     *  解析xml\n     */\n    [responseObject setDelegate:self];\n    [responseObject parse];\n  }\n      failure:^(AFHTTPRequestOperation *_Nonnull operation,\n                NSError *_Nonnull error) {\n        NSLog(@\"请求失败%@\", error);\n      }];\n  [operation start];\n}\n```\n*如果需要Demo，请在文章下面给我留言*\n\n","source":"_posts/16-06-07-AFNetworking-SOAP.md","raw":"title: iOS Web service SOAP消息(基于AFNetworking)\ndate: 2016-06-07 16:39:16\ntags:\n---\n**Web service**是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。\nWeb Service技术， 能使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件， 就可相互交换数据或集成。依据Web Service规范实施的应用之间， 无论它们所使用的语言、 平台或内部协议是什么， 都可以相互交换数据。Web Service是自描述、 自包含的可用网络模块， 可以执行具体的业务功能。Web Service也很容易部署， 因为它们基于一些常规的产业标准以及已有的一些技术，诸如标准通用标记语言下的子集XML、HTTP。Web Service减少了应用接口的花费。\nWeb Service为整个企业甚至多个组织之间的业务流程的集成提供了一个通用机制。\n\n\n**下面分别是AFNetworking 2.6和3.0的关键代码，如想要Demo的，留言给我**\n\n<!-- more -->\nAFNetworking 3.0\n---\n```\n#pragma mark - 发送请求\n/**\n *  发送请求\n */\n- (void)webServiceRequestWithsoapMessage:(NSString *)soapMessage {\n  NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url11];\n  [request addValue:@\"text/xml; charset=utf-8\"\n      forHTTPHeaderField:@\"Content-Type\"];\n  [request setHTTPMethod:@\"POST\"];\n  [request setHTTPBody:[soapMessage dataUsingEncoding:NSUTF8StringEncoding]];\n  NSURLSessionConfiguration *configuration =\n      [NSURLSessionConfiguration defaultSessionConfiguration];\n  AFURLSessionManager *manager =\n      [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];\n  manager.responseSerializer = [AFXMLParserResponseSerializer serializer];\n  NSURLSessionDataTask *dataTask =\n      [manager dataTaskWithRequest:request\n                 completionHandler:^(NSURLResponse *response, id responseObject,\n                                     NSError *error) {\n                   if (error) {\n                     NSLog(@\"Error: %@\", [error description]);\n                   } else {\n                     [responseObject setDelegate:self];\n                     [responseObject parse];\n                   }\n                 }];\n  [dataTask resume];\n}\n```\n\n   \nAFNetworking 2.6\n---\n```\n#pragma mark - 发送请求\n/**\n *  发送请求\n */\n- (void)webServiceRequestWithsoapMessage:(NSString *)soapMessage {\n  NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];\n  [request addValue:@\"text/xml; charset=utf-8\"\n      forHTTPHeaderField:@\"Content-Type\"];\n  [request setHTTPMethod:@\"POST\"];\n  [request setHTTPBody:[soapMessage dataUsingEncoding:NSUTF8StringEncoding]];\n  AFHTTPRequestOperation *operation =\n      [[AFHTTPRequestOperation alloc] initWithRequest:request];\n  operation.responseSerializer = [AFXMLParserResponseSerializer serializer];\n  [operation setCompletionBlockWithSuccess:^(\n                 AFHTTPRequestOperation *_Nonnull operation,\n                 id _Nonnull responseObject) {\n    NSLog(@\"请求成功：%@\", [responseObject description]);\n    /**\n     *  解析xml\n     */\n    [responseObject setDelegate:self];\n    [responseObject parse];\n  }\n      failure:^(AFHTTPRequestOperation *_Nonnull operation,\n                NSError *_Nonnull error) {\n        NSLog(@\"请求失败%@\", error);\n      }];\n  [operation start];\n}\n```\n*如果需要Demo，请在文章下面给我留言*\n\n","slug":"16-06-07-AFNetworking-SOAP","published":1,"updated":"2016-06-07T08:45:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jnt000ypushguywed5r"},{"title":"iOS 使用 ASI 调webService","date":"2016-05-25T08:34:41.000Z","_content":"**Web service**是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。  \nWeb Service技术， 能使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件， 就可相互交换数据或集成。依据Web Service规范实施的应用之间， 无论它们所使用的语言、 平台或内部协议是什么， 都可以相互交换数据。Web Service是自描述、 自包含的可用网络模块， 可以执行具体的业务功能。Web Service也很容易部署， 因为它们基于一些常规的产业标准以及已有的一些技术，诸如标准通用标记语言下的子集XML、HTTP。Web Service减少了应用接口的花费。  \nWeb Service为整个企业甚至多个组织之间的业务流程的集成提供了一个通用机制。 \n\n\n\n\n步骤:\n1.  添加SystemConfiguration.framework和libz.tbd\n2.  将asi中类添加不使用arc标志\n3.  下面上代码\n\n\n[Demo下载](http://7xrirn.com1.z0.glb.clouddn.com/codeASIWebServiceDemo.zip)\n---\n<!-- more -->\n我们使用的是xml传输数据，其中XML创建和解析我使用的是GDataXML，下面先说说xml的生成和解析\n\n通过实体类生成xml字符串，实体类的具体属性就不一一贴出了*具体通过需求而定*\n---\n```\n#pragma mark - xml文件创建\n/**\n *  xml文件创建\n *\n *  @return 创建好的XML字符串\n */\n- (NSString *)requestXmlStringCreateWithArgs:(NSArray *)args {\n  /**\n   *  创建一个标签元素   一级标签\n   *  如果value不设置值，生成的标签为<soapenv:Header/>\n   */\n  GDataXMLElement *element =\n      [GDataXMLNode elementWithName:@\"soapenv:Header\" stringValue:@\"\"];\n  GDataXMLElement *element12 =\n      [GDataXMLNode elementWithName:@\"soapenv:Body\" stringValue:@\"\"];\n  // 创建一个标签元素   二级标签\n  GDataXMLElement *element21 =\n      [GDataXMLNode elementWithName:@\"\" stringValue:@\"\"];\n  /**\n   获取当前类的属性列表\n   */\n  PayModel *payModel = [[PayModel alloc] init];\n  NSArray *propertyList = [payModel propertyNameList];\n  [args enumerateObjectsUsingBlock:^(PayModel *obj, NSUInteger idx,\n                                     BOOL *_Nonnull stop) {\n    GDataXMLElement *arg =\n        [GDataXMLNode elementWithName:[NSString stringWithFormat:@\"zz%zd\", idx]\n                          stringValue:@\"\"];\n    for (int i = 0; i < [propertyList count]; i++) {\n      // 创建一个标签元素   四级标签  存储内容\n      if ([obj valueForKey:propertyList[i]] != nil) {\n        GDataXMLElement *element41 =\n            [GDataXMLNode elementWithName:propertyList[i]\n                              stringValue:[obj valueForKey:propertyList[i]]];\n        [arg addChild:element41];\n      }\n    }\n    [element21 addChild:arg];\n  }];\n  // 创建一个属性  根标签属性\n  GDataXMLElement *rootElementAttribute1 = [GDataXMLNode\n      attributeWithName:@\"xmlns:\"\n            stringValue:@\"根据情况而定\"];\n  GDataXMLElement *rootElementAttribute2 =\n      [GDataXMLNode attributeWithName:@\"\"\n                          stringValue:@\"根据情况而定\"];\n  // 创建一个根标签\n  GDataXMLElement *rootElement =\n      [GDataXMLNode elementWithName:@\":\"];\n  //将二级标签添加到一级标签上\n  [element12 addChild:element21];\n  // 把标签与属性添加到根标签中\n  [rootElement addChild:element];\n  [rootElement addChild:element12];\n  [rootElement addAttribute:rootElementAttribute1];\n  [rootElement addAttribute:rootElementAttribute2];\n  // 生成xml文件内容\n  GDataXMLDocument *xmlDoc =\n      [[GDataXMLDocument alloc] initWithRootElement:rootElement];\n  NSData *data = [xmlDoc XMLData];\n  NSString *xmlString =\n      [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n  return xmlString;\n}\n```\n解析xml\n---\n```\n#pragma mark - 解析xml\n/**\n *  解析xml\n */\n- (void)pareXMLWithXMLString:(NSString *)xmlString {\n  GDataXMLDocument *xmlDoc =\n      [[GDataXMLDocument alloc] initWithXMLString:xmlString\n                                         encoding:NSUTF8StringEncoding\n                                            error:nil];\n  GDataXMLElement *rootElement = [xmlDoc rootElement];\n  for (GDataXMLElement *ele in rootElement.children) {\n    if (ele.childCount > 0) {\n      for (GDataXMLElement *ele1 in ele.children) {\n        for (GDataXMLElement *ele2 in ele1.children) {\n          for (GDataXMLElement *ele3 in ele2.children) {\n            NSLog(@\"标签名：%@\\n\", ele3.name);\n            NSLog(@\"内容：%@\\n\", ele3.stringValue);\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n发送请求\n---\n```\n#pragma mark - 发送请求\n- (void)webServiceRequestWithsoapMessage:(NSString *)soapMessage {\n  NSURL *url = [NSURL URLWithString:urlString];\n  //请求发送到的路径\n  ASIHTTPRequest *theRequest = [ASIHTTPRequest requestWithURL:url];\n  [theRequest addRequestHeader:@\"Content-Type\"\n                         value:@\"text/xml; charset=utf-8\"];\n [theRequest setRequestMethod:@\"POST\"];\n  [theRequest\n      appendPostData:[soapMessage dataUsingEncoding:NSUTF8StringEncoding]];\n  [theRequest setDefaultResponseEncoding:NSUTF8StringEncoding];\n  [theRequest startSynchronous];\n  NSError *error = [theRequest error];\n  if (!error) {\n    NSMutableData *mData = [NSMutableData\n        dataWithData:[theRequest responseData]];  // WebService接口返回的数据\n    NSString *theXML = [[NSString alloc]\n        initWithBytes:[mData mutableBytes]\n               length:[mData length]\n             encoding:\n                 NSUTF8StringEncoding];  //将返回数据转换为字符串，进行解析（本文中返回的数据为XML数据）\n    NSLog(@\"%@\", theXML);\n    /**\n     *  解析xml\n     */\n    [self pareXMLWithXMLString:theXML];\n  } else {\n    NSLog(@\"请求错误：\\n%@\", error);\n  }\n}\n```","source":"_posts/16-05-25-ASI-WebService.md","raw":"title: iOS 使用 ASI 调webService\ndate: 2016-05-25 16:34:41\ntags:\n---\n**Web service**是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。  \nWeb Service技术， 能使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件， 就可相互交换数据或集成。依据Web Service规范实施的应用之间， 无论它们所使用的语言、 平台或内部协议是什么， 都可以相互交换数据。Web Service是自描述、 自包含的可用网络模块， 可以执行具体的业务功能。Web Service也很容易部署， 因为它们基于一些常规的产业标准以及已有的一些技术，诸如标准通用标记语言下的子集XML、HTTP。Web Service减少了应用接口的花费。  \nWeb Service为整个企业甚至多个组织之间的业务流程的集成提供了一个通用机制。 \n\n\n\n\n步骤:\n1.  添加SystemConfiguration.framework和libz.tbd\n2.  将asi中类添加不使用arc标志\n3.  下面上代码\n\n\n[Demo下载](http://7xrirn.com1.z0.glb.clouddn.com/codeASIWebServiceDemo.zip)\n---\n<!-- more -->\n我们使用的是xml传输数据，其中XML创建和解析我使用的是GDataXML，下面先说说xml的生成和解析\n\n通过实体类生成xml字符串，实体类的具体属性就不一一贴出了*具体通过需求而定*\n---\n```\n#pragma mark - xml文件创建\n/**\n *  xml文件创建\n *\n *  @return 创建好的XML字符串\n */\n- (NSString *)requestXmlStringCreateWithArgs:(NSArray *)args {\n  /**\n   *  创建一个标签元素   一级标签\n   *  如果value不设置值，生成的标签为<soapenv:Header/>\n   */\n  GDataXMLElement *element =\n      [GDataXMLNode elementWithName:@\"soapenv:Header\" stringValue:@\"\"];\n  GDataXMLElement *element12 =\n      [GDataXMLNode elementWithName:@\"soapenv:Body\" stringValue:@\"\"];\n  // 创建一个标签元素   二级标签\n  GDataXMLElement *element21 =\n      [GDataXMLNode elementWithName:@\"\" stringValue:@\"\"];\n  /**\n   获取当前类的属性列表\n   */\n  PayModel *payModel = [[PayModel alloc] init];\n  NSArray *propertyList = [payModel propertyNameList];\n  [args enumerateObjectsUsingBlock:^(PayModel *obj, NSUInteger idx,\n                                     BOOL *_Nonnull stop) {\n    GDataXMLElement *arg =\n        [GDataXMLNode elementWithName:[NSString stringWithFormat:@\"zz%zd\", idx]\n                          stringValue:@\"\"];\n    for (int i = 0; i < [propertyList count]; i++) {\n      // 创建一个标签元素   四级标签  存储内容\n      if ([obj valueForKey:propertyList[i]] != nil) {\n        GDataXMLElement *element41 =\n            [GDataXMLNode elementWithName:propertyList[i]\n                              stringValue:[obj valueForKey:propertyList[i]]];\n        [arg addChild:element41];\n      }\n    }\n    [element21 addChild:arg];\n  }];\n  // 创建一个属性  根标签属性\n  GDataXMLElement *rootElementAttribute1 = [GDataXMLNode\n      attributeWithName:@\"xmlns:\"\n            stringValue:@\"根据情况而定\"];\n  GDataXMLElement *rootElementAttribute2 =\n      [GDataXMLNode attributeWithName:@\"\"\n                          stringValue:@\"根据情况而定\"];\n  // 创建一个根标签\n  GDataXMLElement *rootElement =\n      [GDataXMLNode elementWithName:@\":\"];\n  //将二级标签添加到一级标签上\n  [element12 addChild:element21];\n  // 把标签与属性添加到根标签中\n  [rootElement addChild:element];\n  [rootElement addChild:element12];\n  [rootElement addAttribute:rootElementAttribute1];\n  [rootElement addAttribute:rootElementAttribute2];\n  // 生成xml文件内容\n  GDataXMLDocument *xmlDoc =\n      [[GDataXMLDocument alloc] initWithRootElement:rootElement];\n  NSData *data = [xmlDoc XMLData];\n  NSString *xmlString =\n      [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n  return xmlString;\n}\n```\n解析xml\n---\n```\n#pragma mark - 解析xml\n/**\n *  解析xml\n */\n- (void)pareXMLWithXMLString:(NSString *)xmlString {\n  GDataXMLDocument *xmlDoc =\n      [[GDataXMLDocument alloc] initWithXMLString:xmlString\n                                         encoding:NSUTF8StringEncoding\n                                            error:nil];\n  GDataXMLElement *rootElement = [xmlDoc rootElement];\n  for (GDataXMLElement *ele in rootElement.children) {\n    if (ele.childCount > 0) {\n      for (GDataXMLElement *ele1 in ele.children) {\n        for (GDataXMLElement *ele2 in ele1.children) {\n          for (GDataXMLElement *ele3 in ele2.children) {\n            NSLog(@\"标签名：%@\\n\", ele3.name);\n            NSLog(@\"内容：%@\\n\", ele3.stringValue);\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n发送请求\n---\n```\n#pragma mark - 发送请求\n- (void)webServiceRequestWithsoapMessage:(NSString *)soapMessage {\n  NSURL *url = [NSURL URLWithString:urlString];\n  //请求发送到的路径\n  ASIHTTPRequest *theRequest = [ASIHTTPRequest requestWithURL:url];\n  [theRequest addRequestHeader:@\"Content-Type\"\n                         value:@\"text/xml; charset=utf-8\"];\n [theRequest setRequestMethod:@\"POST\"];\n  [theRequest\n      appendPostData:[soapMessage dataUsingEncoding:NSUTF8StringEncoding]];\n  [theRequest setDefaultResponseEncoding:NSUTF8StringEncoding];\n  [theRequest startSynchronous];\n  NSError *error = [theRequest error];\n  if (!error) {\n    NSMutableData *mData = [NSMutableData\n        dataWithData:[theRequest responseData]];  // WebService接口返回的数据\n    NSString *theXML = [[NSString alloc]\n        initWithBytes:[mData mutableBytes]\n               length:[mData length]\n             encoding:\n                 NSUTF8StringEncoding];  //将返回数据转换为字符串，进行解析（本文中返回的数据为XML数据）\n    NSLog(@\"%@\", theXML);\n    /**\n     *  解析xml\n     */\n    [self pareXMLWithXMLString:theXML];\n  } else {\n    NSLog(@\"请求错误：\\n%@\", error);\n  }\n}\n```","slug":"16-05-25-ASI-WebService","published":1,"updated":"2016-05-25T08:35:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jnw000zpushoppfkrye"},{"title":"iOS 大部分页面竖屏显示，个别页面横屏显示","date":"2016-05-23T07:23:20.000Z","_content":"**我将横屏显示的controller显示了statusBar将将背景色显示成透明**\n**效果如下图**\n![效果显示](http://7xrirn.com1.z0.glb.clouddn.com/InterfaceOrientationsForWindow.gif)\n\n\n**[Demo下载](http://pan.baidu.com/s/1pLhBdmN)**\n---\n\n<!-- more -->\n**在AppDelegate中添加需要横屏显示的代码**\n---\n```\n/**\n *  横竖屏幕切换\n *  NaviViewController为我设置的根控制器\n *  controller需要横屏显示的控制器\n */\n- (UIInterfaceOrientationMask)application:(UIApplication *)application\n  supportedInterfaceOrientationsForWindow:(UIWindow *)window {\n  __block UIInterfaceOrientationMask mask = 0;\n  for (UIWindow *subWindow in [UIApplication sharedApplication].windows) {\n    // NaviViewController为我设置的根控制器\n    if ([subWindow.rootViewController\n            isKindOfClass:NSClassFromString(@\"NaviViewController\")]) {\n      NSArray *arrays = [subWindow.rootViewController childViewControllers];\n      [arrays enumerateObjectsUsingBlock:^(\n                  UIViewController *obj, NSUInteger idx, BOOL *_Nonnull stop) {\n        //需要横屏显示的controller\n        if ([obj isKindOfClass:NSClassFromString(@\"ViewController11\")]) {\n          mask = UIInterfaceOrientationMaskAll;\n          return;\n        } else {\n          mask = UIInterfaceOrientationMaskPortrait;\n          return;\n        }\n      }];\n    }\n  }\n  return mask;\n}\n```\n\n**需要横屏或旋转显示的页面**\n---\n```\n  /**\n   *  使用此句代码，会调用delegate里面的supportedInterfaceOrientationsForWindow方法\n   *  默认显示numberWithInteger后的类型\n   */\n  [[UIDevice currentDevice]\n      setValue:[NSNumber numberWithInteger:UIDeviceOrientationLandscapeRight]\n        forKey:@\"orientation\"];\n```","source":"_posts/16-05-23-supportedInterfaceOrientationsForWindow.md","raw":"title: iOS 大部分页面竖屏显示，个别页面横屏显示\ndate: 2016-05-23 15:23:20\ntags:\n---\n**我将横屏显示的controller显示了statusBar将将背景色显示成透明**\n**效果如下图**\n![效果显示](http://7xrirn.com1.z0.glb.clouddn.com/InterfaceOrientationsForWindow.gif)\n\n\n**[Demo下载](http://pan.baidu.com/s/1pLhBdmN)**\n---\n\n<!-- more -->\n**在AppDelegate中添加需要横屏显示的代码**\n---\n```\n/**\n *  横竖屏幕切换\n *  NaviViewController为我设置的根控制器\n *  controller需要横屏显示的控制器\n */\n- (UIInterfaceOrientationMask)application:(UIApplication *)application\n  supportedInterfaceOrientationsForWindow:(UIWindow *)window {\n  __block UIInterfaceOrientationMask mask = 0;\n  for (UIWindow *subWindow in [UIApplication sharedApplication].windows) {\n    // NaviViewController为我设置的根控制器\n    if ([subWindow.rootViewController\n            isKindOfClass:NSClassFromString(@\"NaviViewController\")]) {\n      NSArray *arrays = [subWindow.rootViewController childViewControllers];\n      [arrays enumerateObjectsUsingBlock:^(\n                  UIViewController *obj, NSUInteger idx, BOOL *_Nonnull stop) {\n        //需要横屏显示的controller\n        if ([obj isKindOfClass:NSClassFromString(@\"ViewController11\")]) {\n          mask = UIInterfaceOrientationMaskAll;\n          return;\n        } else {\n          mask = UIInterfaceOrientationMaskPortrait;\n          return;\n        }\n      }];\n    }\n  }\n  return mask;\n}\n```\n\n**需要横屏或旋转显示的页面**\n---\n```\n  /**\n   *  使用此句代码，会调用delegate里面的supportedInterfaceOrientationsForWindow方法\n   *  默认显示numberWithInteger后的类型\n   */\n  [[UIDevice currentDevice]\n      setValue:[NSNumber numberWithInteger:UIDeviceOrientationLandscapeRight]\n        forKey:@\"orientation\"];\n```","slug":"16-05-23-supportedInterfaceOrientationsForWindow","published":1,"updated":"2016-05-23T07:27:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jny0010pushmhy73046"},{"title":"iOS Touch ID","date":"2016-05-23T10:10:30.000Z","_content":"**Touch ID**指纹识别作为iPhone 5s上的“杀手级”功能早已为人们所熟知，iphone SE、iPhone 6、iPhone 6Puls、iPhone 6s、iPhone 6s Plus、iPad Pro、iPad mini 4、iPad mini 3和iPad air 2也使用了Touch ID。  苹果把用户的指纹数据存放在处理器的安全区域（Secure Enclave）中，充分保护用户的数据安全。除此之外，苹果还有另外一道指纹数据安全防线，以一种前所未有的硬件技术实现了对用户数据的保护。\n\n效果展示\n---\n* ![效果显示](http://7xrirn.com1.z0.glb.clouddn.com/TouchID.png)\n\n\n[Demo下载](http://pan.baidu.com/s/1o8eVpNG)\n---\n\n\n<!-- more -->\n\n具体实现\n---\n```\n先导入LocalAuthentication.framework\n#import <LocalAuthentication/LocalAuthentication.h>\n- (void)authenticateUser {\n  //初始化上下文对象\n  LAContext *context = [[LAContext alloc] init];\n  //错误对象\n  NSError *error = nil;\n  //使用canEvaluatePolicy 判断设备支持状态\n  if ([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics\n                           error:&error]) {\n    //支持指纹验证\n    [context\n         evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics\n        localizedReason:@\"TouchID 测试\"  //显示的文本\n                  reply:^(BOOL success, NSError *error) {\n                    if (success) {\n                      NSLog(@\"验证成功，主线程处理UI\");\n                    } else {\n                      NSLog(@\"%@\", error.localizedDescription);\n                      switch (error.code) {\n                        case LAErrorSystemCancel: {\n                          NSLog(@\"切换到其他APP，系统取消验证Touch \"\n                                @\"ID\");\n                          //切换到其他APP，系统取消验证Touch ID\n                          break;\n                        }\n                        case LAErrorUserCancel: {\n                          //用户取消验证Touch ID\n                          NSLog(@\"用户取消验证Touch ID\");\n                          break;\n                        }\n                        case LAErrorUserFallback: {\n                          NSLog(\n                              @\"用\"\n                              @\"户选择输入密码，切换主线程处理\");\n                          [[NSOperationQueue mainQueue] addOperationWithBlock:^{\n                            NSLog(\n                                @\"用\"\n                                @\"户\"\n                                @\"选择输入密码，切换主线程处理\");\n                          }];\n                          break;\n                        }\n                        default: {\n                          [[NSOperationQueue mainQueue] addOperationWithBlock:^{\n                            NSLog(@\"其他情况，切换主线程处理\");\n                          }];\n                          break;\n                        }\n                      }\n                    }\n                  }];\n  } else {\n    //不支持指纹识别，LOG出错误详情\n    switch (error.code) {\n      case LAErrorTouchIDNotEnrolled: {\n        NSLog(@\"设备Touch ID不可用，用户未录入\");\n        break;\n      }\n      case LAErrorPasscodeNotSet: {\n        NSLog(@\"系统未设置密码\");\n        break;\n      }\n      default: {\n        NSLog(@\"TouchID不可用\");\n        break;\n      }\n    }\n    NSLog(@\"%@\", error.localizedDescription);\n  }\n}\n```\n\n\n\n错误失败信息：\n---\n1.  连续三次指纹识别错误：\n    **Aplication retry limit exceeded**\n2.  Touch ID功能被锁定，下一次需要输入系统密码：\n    **Biometry is locked out**\n3.  用户在Touch ID对话框中点击了取消按钮\n    **Canceled by user**\n4.  在Touch ID对话框显示过程中，背系统取消，例如按下电源键：\n    **UI canceled by system**\n5.  用户在Touch ID对话框中点击输入密码按钮：\n    **Fallback authentication mechanism selected**\n6.  目标设备不支持指纹识别\n    **Biometry is not available on this device** //真机\n    **Simulator is not supported**               //模拟器\n\n\n\n","source":"_posts/16-05-23-TouchID.md","raw":"title: iOS Touch ID\ndate: 2016-05-23 18:10:30\ntags:\n---\n**Touch ID**指纹识别作为iPhone 5s上的“杀手级”功能早已为人们所熟知，iphone SE、iPhone 6、iPhone 6Puls、iPhone 6s、iPhone 6s Plus、iPad Pro、iPad mini 4、iPad mini 3和iPad air 2也使用了Touch ID。  苹果把用户的指纹数据存放在处理器的安全区域（Secure Enclave）中，充分保护用户的数据安全。除此之外，苹果还有另外一道指纹数据安全防线，以一种前所未有的硬件技术实现了对用户数据的保护。\n\n效果展示\n---\n* ![效果显示](http://7xrirn.com1.z0.glb.clouddn.com/TouchID.png)\n\n\n[Demo下载](http://pan.baidu.com/s/1o8eVpNG)\n---\n\n\n<!-- more -->\n\n具体实现\n---\n```\n先导入LocalAuthentication.framework\n#import <LocalAuthentication/LocalAuthentication.h>\n- (void)authenticateUser {\n  //初始化上下文对象\n  LAContext *context = [[LAContext alloc] init];\n  //错误对象\n  NSError *error = nil;\n  //使用canEvaluatePolicy 判断设备支持状态\n  if ([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics\n                           error:&error]) {\n    //支持指纹验证\n    [context\n         evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics\n        localizedReason:@\"TouchID 测试\"  //显示的文本\n                  reply:^(BOOL success, NSError *error) {\n                    if (success) {\n                      NSLog(@\"验证成功，主线程处理UI\");\n                    } else {\n                      NSLog(@\"%@\", error.localizedDescription);\n                      switch (error.code) {\n                        case LAErrorSystemCancel: {\n                          NSLog(@\"切换到其他APP，系统取消验证Touch \"\n                                @\"ID\");\n                          //切换到其他APP，系统取消验证Touch ID\n                          break;\n                        }\n                        case LAErrorUserCancel: {\n                          //用户取消验证Touch ID\n                          NSLog(@\"用户取消验证Touch ID\");\n                          break;\n                        }\n                        case LAErrorUserFallback: {\n                          NSLog(\n                              @\"用\"\n                              @\"户选择输入密码，切换主线程处理\");\n                          [[NSOperationQueue mainQueue] addOperationWithBlock:^{\n                            NSLog(\n                                @\"用\"\n                                @\"户\"\n                                @\"选择输入密码，切换主线程处理\");\n                          }];\n                          break;\n                        }\n                        default: {\n                          [[NSOperationQueue mainQueue] addOperationWithBlock:^{\n                            NSLog(@\"其他情况，切换主线程处理\");\n                          }];\n                          break;\n                        }\n                      }\n                    }\n                  }];\n  } else {\n    //不支持指纹识别，LOG出错误详情\n    switch (error.code) {\n      case LAErrorTouchIDNotEnrolled: {\n        NSLog(@\"设备Touch ID不可用，用户未录入\");\n        break;\n      }\n      case LAErrorPasscodeNotSet: {\n        NSLog(@\"系统未设置密码\");\n        break;\n      }\n      default: {\n        NSLog(@\"TouchID不可用\");\n        break;\n      }\n    }\n    NSLog(@\"%@\", error.localizedDescription);\n  }\n}\n```\n\n\n\n错误失败信息：\n---\n1.  连续三次指纹识别错误：\n    **Aplication retry limit exceeded**\n2.  Touch ID功能被锁定，下一次需要输入系统密码：\n    **Biometry is locked out**\n3.  用户在Touch ID对话框中点击了取消按钮\n    **Canceled by user**\n4.  在Touch ID对话框显示过程中，背系统取消，例如按下电源键：\n    **UI canceled by system**\n5.  用户在Touch ID对话框中点击输入密码按钮：\n    **Fallback authentication mechanism selected**\n6.  目标设备不支持指纹识别\n    **Biometry is not available on this device** //真机\n    **Simulator is not supported**               //模拟器\n\n\n\n","slug":"16-05-23-TouchID","published":1,"updated":"2016-05-24T01:33:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jo00011push8ba8mlvz"},{"title":"设置navigationBar背景透明","date":"2016-05-20T11:40:36.000Z","_content":"**效果如下图红色窗体**  \n* ![效果显示](http://7xrirn.com1.z0.glb.clouddn.com/navigationNavigationBarBackgroundShow.gif)  \n\n\n\n\n**我将此方法放在了一个Category里面，下载请点击此链接[下载代码](http://pan.baidu.com/s/1o8u4u0a)**\n---\n\n\n\n设置NavigationBar背景为透明\n---\n```\n  /**\n   *  将navigationBar背景颜色设置为透明\n   */\n  [self setNavigationBarBackgroundShow:NO];\n```\n<!-- more -->\n设置NavigationBar背景恢复不透明\n---\n```\n /**\n   *  将navigationBar显示背景颜色\n   */\n  [self setNavigationBarBackgroundShow:YES];\n```\n\n方法实现\n---\n```\n/**\n *  状态栏是否显示背景色\n *\n *  @param show yes为显示背景色，否则为透明\n */\n- (void)setNavigationBarBackgroundShow:(BOOL)show {\n  // 设置为半透明\n  self.navigationController.navigationBar.translucent = !show;\n  UIColor *color = nil;\n  if (show) {\n    color = [UIColor whiteColor];\n  } else {\n    color = [UIColor clearColor];\n  }\n  CGRect rect = CGRectMake(0, 0, [UIScreen mainScreen].bounds.size.height, 64);\n  UIGraphicsBeginImageContext(rect.size);\n  CGContextRef context = UIGraphicsGetCurrentContext();\n  CGContextSetFillColorWithColor(context, [color CGColor]);\n  CGContextFillRect(context, rect);\n  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n  UIGraphicsEndImageContext();\n  [self.navigationController.navigationBar\n      setBackgroundImage:image\n           forBarMetrics:UIBarMetricsDefault];\n  self.navigationController.navigationBar.clipsToBounds = !show;\n}\n```\n\n*我在做这个的时候遇到过一个问题，navigationBar透明之后当前控制器的高不够，显示出的是其它控制器*\n**解决：我将当前控制器的高调整成了屏幕的高**","source":"_posts/16-05-20-navigationBarBackgroundTransparent.md","raw":"title: 设置navigationBar背景透明\ndate: 2016-05-20 19:40:36\ntags:\n---\n**效果如下图红色窗体**  \n* ![效果显示](http://7xrirn.com1.z0.glb.clouddn.com/navigationNavigationBarBackgroundShow.gif)  \n\n\n\n\n**我将此方法放在了一个Category里面，下载请点击此链接[下载代码](http://pan.baidu.com/s/1o8u4u0a)**\n---\n\n\n\n设置NavigationBar背景为透明\n---\n```\n  /**\n   *  将navigationBar背景颜色设置为透明\n   */\n  [self setNavigationBarBackgroundShow:NO];\n```\n<!-- more -->\n设置NavigationBar背景恢复不透明\n---\n```\n /**\n   *  将navigationBar显示背景颜色\n   */\n  [self setNavigationBarBackgroundShow:YES];\n```\n\n方法实现\n---\n```\n/**\n *  状态栏是否显示背景色\n *\n *  @param show yes为显示背景色，否则为透明\n */\n- (void)setNavigationBarBackgroundShow:(BOOL)show {\n  // 设置为半透明\n  self.navigationController.navigationBar.translucent = !show;\n  UIColor *color = nil;\n  if (show) {\n    color = [UIColor whiteColor];\n  } else {\n    color = [UIColor clearColor];\n  }\n  CGRect rect = CGRectMake(0, 0, [UIScreen mainScreen].bounds.size.height, 64);\n  UIGraphicsBeginImageContext(rect.size);\n  CGContextRef context = UIGraphicsGetCurrentContext();\n  CGContextSetFillColorWithColor(context, [color CGColor]);\n  CGContextFillRect(context, rect);\n  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n  UIGraphicsEndImageContext();\n  [self.navigationController.navigationBar\n      setBackgroundImage:image\n           forBarMetrics:UIBarMetricsDefault];\n  self.navigationController.navigationBar.clipsToBounds = !show;\n}\n```\n\n*我在做这个的时候遇到过一个问题，navigationBar透明之后当前控制器的高不够，显示出的是其它控制器*\n**解决：我将当前控制器的高调整成了屏幕的高**","slug":"16-05-20-navigationBarBackgroundTransparent","published":1,"updated":"2016-05-23T06:59:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jo30012pushqi6vsk3a"},{"title":"十六进制字符串NSString转换为NSData","date":"2016-05-09T03:43:58.000Z","_content":"下面提供的是一个NSString的Category\n\n\n[下载Category代码](http://pan.baidu.com/s/1b0b5Jw)\n---\n.h文件如下，具体实现在下面一个代码块中\n---\n```\n#import <Foundation/Foundation.h>\n@interface NSString (Trans)\n/**\n *  十六 进制字符串转换为 data\n *  24211D3498FF62AF  -->  <24211D34 98FF62AF>\n *\n *  @param str 要转换的字符串\n *\n *  @return 转换后的数据\n */\n+ (NSData*)hexToBytes:(NSString *)str;\n/**\n *  data 转换为十六进制字符串\n *  <24211D34 98FF62AF>  -->  24211D3498FF62AF\n *\n *  @param data 要转换的data\n *\n *  @return 转换后的字符串\n */\n+ (NSString *)hexStringFromData:(NSData *)data;\n/**\n *  由byte转为字符串\n *\n *  @param byteVal byte\n *\n *  @return \n */\n+ (NSString *)stringFromByte:(Byte)byteVal;\n/**\n *  hex字符串转为ASC码  00 --> 3030\n *\n *  @param hex hex字符串\n *\n *  @return 转码后的ASC字符串\n */\n+ (NSString *)hexToAsc:(NSString *)hex;\n/**\n *  ASC码转为Hex字符串  3030 --> 00\n *\n *  @param asc ASC字符串\n *\n *  @return 转码后的Hex字符串\n */\n+ (NSString *)ascToHex:(NSString *)asc;\n/**\n *  十六进制字符串转二进制字符串\n *\n *  @param hex 十六进制字符串\n *\n *  @return 二进制字符串\n */\n+(NSString *)HexToBinary:(NSString *)hex;\n/**\n *  2进制字符串转16进制字符串,如 11110011 -> F3\n *\n *  @param Binary 二进制字符串\n *\n *  @return 16进制字符串\n */\n+(NSString *)BinaryToHex:(NSString *)Binary;\n@end\n```\n<!-- more -->\n.m文件如下  \n---\n```\n#import \"NSString+Trans.h\"****\n@implementation NSString (Trans)\n+(NSData*)hexToBytes:(NSString *)str{\n    NSMutableData* data = [NSMutableData data];\n    int idx;\n    for (idx = 0; idx+2 <= str.length; idx+=2) {\n        NSRange range = NSMakeRange(idx, 2);\n        NSString* hexStr = [str substringWithRange:range];\n        NSScanner* scanner = [NSScanner scannerWithString:hexStr];\n        unsigned int intValue;\n        [scanner scanHexInt:&intValue];\n        [data appendBytes:&intValue length:1];\n    }\n    return data;\n}\n+ (NSString *)hexStringFromData:(NSData *)data{\n    NSMutableString *str = [NSMutableString string];\n    Byte *byte = (Byte *)[data bytes];\n    for (int i = 0; i<[data length]; i++) {\n        // byte+i为指针\n        [str appendString:[self stringFromByte:*(byte+i)]];\n    }\n    return str;\n}\n+ (NSString *)stringFromByte:(Byte)byteVal{\n    NSMutableString *str = [NSMutableString string];\n    //取高四位\n    Byte byte1 = byteVal>>4;\n    //取低四位\n    Byte byte2 = byteVal & 0xf;\n    //拼接16进制字符串\n    [str appendFormat:@\"%x\",byte1];\n    [str appendFormat:@\"%x\",byte2];\n    return str;\n}\n/**\n *  hex字符串转为ASC码  00 --> 3030\n *\n *  @param hex hex字符串\n *\n *  @return 转码后的ASC字符串\n */\n+ (NSString *)hexToAsc:(NSString *)hex{\n    char szData[1024]={0};\n    const char *pBytes =  [hex UTF8String];\n    if(NULL != pBytes)\n    {\n        for(int i=0; i<hex.length; i++)\n        {\n            char tmp[16];\n            sprintf(tmp, \"%0.2X\",pBytes[i]);\n            strcat(szData, tmp);\n        }\n        return [NSString stringWithFormat:@\"%s\",szData];\n    }\n    return nil;\n}\n/**\n *  ASC吗转为Hex字符串  3030 --> 00\n *\n *  @param asc ASC字符串\n *\n *  @return 转码后的Hex字符串\n */\n+ (NSString *)ascToHex:(NSString *)asc{\n    char szData[1024]={0};\n    const char *ascBytes =  [asc UTF8String];\n    if (NULL != ascBytes) {\n        [self ascToHex:ascBytes len:asc.length outAscii:szData];\n        \n        return [NSString stringWithFormat:@\"%s\",szData];\n    }\n    return nil;\n}\n+ (void)ascToHex:(const char *)hex len:(NSUInteger)length outAscii:(char *)ascii\n{\n    for (int i = 0; i < length; i += 2)\n    {\n        if (hex[i] >= '0' && hex[i] <= '9')\n            ascii[i / 2] = (hex[i] - '0') << 4;\n        else if (hex[i] >= 'a' && hex[i] <= 'z')\n            ascii[i / 2] = (hex[i] - 'a' + 10) << 4;\n        else if (hex[i] >= 'A' && hex[i] <= 'Z')\n            ascii[i / 2] = (hex[i] - 'A' + 10) << 4;\n        \n        if (hex[i + 1] >= '0' && hex[i + 1] <= '9')\n            ascii[i / 2] += hex[i + 1] - '0';\n        else if (hex[i + 1] >= 'a' && hex[i + 1] <= 'z')\n            ascii[i / 2] += hex[i + 1] - 'a' + 10;\n        else if (hex[i + 1] >= 'A' && hex[i + 1] <= 'Z')\n            ascii[i / 2] += hex[i + 1] - 'A' + 10;\n    }\n}\n/**\n *  十六进制字符串转二进制字符串\n *\n *  @param hex 十六进制字符串\n *\n *  @return 二进制字符串\n */\n+(NSString *)HexToBinary:(NSString *)hex\n{\n    NSMutableDictionary *hexDic = [[NSMutableDictionary alloc] init];\n    hexDic = [[NSMutableDictionary alloc] initWithCapacity:16];\n    [hexDic setObject:@\"0000\" forKey:@\"0\"];\n    [hexDic setObject:@\"0001\" forKey:@\"1\"];\n    [hexDic setObject:@\"0010\" forKey:@\"2\"];\n    [hexDic setObject:@\"0011\" forKey:@\"3\"];\n    [hexDic setObject:@\"0100\" forKey:@\"4\"];\n    [hexDic setObject:@\"0101\" forKey:@\"5\"];\n    [hexDic setObject:@\"0110\" forKey:@\"6\"];\n    [hexDic setObject:@\"0111\" forKey:@\"7\"];\n    [hexDic setObject:@\"1000\" forKey:@\"8\"];\n    [hexDic setObject:@\"1001\" forKey:@\"9\"];\n    [hexDic setObject:@\"1010\" forKey:@\"A\"];\n    [hexDic setObject:@\"1011\" forKey:@\"B\"];\n    [hexDic setObject:@\"1100\" forKey:@\"C\"];\n    [hexDic setObject:@\"1101\" forKey:@\"D\"];\n    [hexDic setObject:@\"1110\" forKey:@\"E\"];\n    [hexDic setObject:@\"1111\" forKey:@\"F\"];\n    NSMutableString *binaryString=[[NSMutableString alloc] init];\n    for (int i=0; i<[hex length]; i++) {\n        NSString *key = [hex substringWithRange:NSMakeRange(i, 1)];\n        [binaryString appendString:[NSString stringWithFormat:@\"%@\",[hexDic objectForKey:key]]];\n    }\n    return binaryString;\n}\n/**\n *  2进制字符串转16进制字符串,如 11110011 -> F3\n *\n *  @param Binary 二进制字符串\n *\n *  @return 16进制字符串\n */\n+(NSString *)BinaryToHex:(NSString *)Binary\n{\n    if ([Binary length]%4 == 0) {\n        NSMutableDictionary *hexDic = [[NSMutableDictionary alloc] init];\n        hexDic = [[NSMutableDictionary alloc] initWithCapacity:16];\n        [hexDic setObject:@\"0\" forKey: @\"0000\"];\n        [hexDic setObject:@\"1\" forKey: @\"0001\"];\n        [hexDic setObject:@\"2\" forKey: @\"0010\"];\n        [hexDic setObject:@\"3\" forKey: @\"0011\"];\n        [hexDic setObject:@\"4\" forKey: @\"0100\"];\n        [hexDic setObject:@\"5\" forKey: @\"0101\"];\n        [hexDic setObject:@\"6\" forKey: @\"0110\"];\n        [hexDic setObject:@\"7\" forKey: @\"0111\"];\n        [hexDic setObject:@\"8\" forKey: @\"1000\"];\n        [hexDic setObject:@\"9\" forKey: @\"1001\"];\n        [hexDic setObject:@\"A\" forKey: @\"1010\"];\n        [hexDic setObject:@\"B\" forKey: @\"1011\"];\n        [hexDic setObject:@\"C\" forKey: @\"1100\"];\n        [hexDic setObject:@\"D\" forKey: @\"1101\"];\n        [hexDic setObject:@\"E\" forKey: @\"1110\"];\n        [hexDic setObject:@\"F\" forKey: @\"1111\"];\n        NSMutableString *hexString=[[NSMutableString alloc] init];\n        for (int i=0; i<[Binary length]/4; i++) {\n            NSString *key = [Binary substringWithRange:NSMakeRange(4*i, 4)];\n            //            hexString = [NSString stringWithFormat:@\"%@%@\",binaryString,[NSString stringWithFormat:@\"%@\",[hexDic objectForKey:key]]];\n            [hexString appendString:[NSString stringWithFormat:@\"%@\",[hexDic objectForKey:key]]];\n        }\n        return hexString;\n    }else\n        return nil;\n}\n@end\n\n```","source":"_posts/16-05-09-NSStringConvertNSData.md","raw":"title: 十六进制字符串NSString转换为NSData\ndate: 2016-05-09 11:43:58\ntags:\n---\n下面提供的是一个NSString的Category\n\n\n[下载Category代码](http://pan.baidu.com/s/1b0b5Jw)\n---\n.h文件如下，具体实现在下面一个代码块中\n---\n```\n#import <Foundation/Foundation.h>\n@interface NSString (Trans)\n/**\n *  十六 进制字符串转换为 data\n *  24211D3498FF62AF  -->  <24211D34 98FF62AF>\n *\n *  @param str 要转换的字符串\n *\n *  @return 转换后的数据\n */\n+ (NSData*)hexToBytes:(NSString *)str;\n/**\n *  data 转换为十六进制字符串\n *  <24211D34 98FF62AF>  -->  24211D3498FF62AF\n *\n *  @param data 要转换的data\n *\n *  @return 转换后的字符串\n */\n+ (NSString *)hexStringFromData:(NSData *)data;\n/**\n *  由byte转为字符串\n *\n *  @param byteVal byte\n *\n *  @return \n */\n+ (NSString *)stringFromByte:(Byte)byteVal;\n/**\n *  hex字符串转为ASC码  00 --> 3030\n *\n *  @param hex hex字符串\n *\n *  @return 转码后的ASC字符串\n */\n+ (NSString *)hexToAsc:(NSString *)hex;\n/**\n *  ASC码转为Hex字符串  3030 --> 00\n *\n *  @param asc ASC字符串\n *\n *  @return 转码后的Hex字符串\n */\n+ (NSString *)ascToHex:(NSString *)asc;\n/**\n *  十六进制字符串转二进制字符串\n *\n *  @param hex 十六进制字符串\n *\n *  @return 二进制字符串\n */\n+(NSString *)HexToBinary:(NSString *)hex;\n/**\n *  2进制字符串转16进制字符串,如 11110011 -> F3\n *\n *  @param Binary 二进制字符串\n *\n *  @return 16进制字符串\n */\n+(NSString *)BinaryToHex:(NSString *)Binary;\n@end\n```\n<!-- more -->\n.m文件如下  \n---\n```\n#import \"NSString+Trans.h\"****\n@implementation NSString (Trans)\n+(NSData*)hexToBytes:(NSString *)str{\n    NSMutableData* data = [NSMutableData data];\n    int idx;\n    for (idx = 0; idx+2 <= str.length; idx+=2) {\n        NSRange range = NSMakeRange(idx, 2);\n        NSString* hexStr = [str substringWithRange:range];\n        NSScanner* scanner = [NSScanner scannerWithString:hexStr];\n        unsigned int intValue;\n        [scanner scanHexInt:&intValue];\n        [data appendBytes:&intValue length:1];\n    }\n    return data;\n}\n+ (NSString *)hexStringFromData:(NSData *)data{\n    NSMutableString *str = [NSMutableString string];\n    Byte *byte = (Byte *)[data bytes];\n    for (int i = 0; i<[data length]; i++) {\n        // byte+i为指针\n        [str appendString:[self stringFromByte:*(byte+i)]];\n    }\n    return str;\n}\n+ (NSString *)stringFromByte:(Byte)byteVal{\n    NSMutableString *str = [NSMutableString string];\n    //取高四位\n    Byte byte1 = byteVal>>4;\n    //取低四位\n    Byte byte2 = byteVal & 0xf;\n    //拼接16进制字符串\n    [str appendFormat:@\"%x\",byte1];\n    [str appendFormat:@\"%x\",byte2];\n    return str;\n}\n/**\n *  hex字符串转为ASC码  00 --> 3030\n *\n *  @param hex hex字符串\n *\n *  @return 转码后的ASC字符串\n */\n+ (NSString *)hexToAsc:(NSString *)hex{\n    char szData[1024]={0};\n    const char *pBytes =  [hex UTF8String];\n    if(NULL != pBytes)\n    {\n        for(int i=0; i<hex.length; i++)\n        {\n            char tmp[16];\n            sprintf(tmp, \"%0.2X\",pBytes[i]);\n            strcat(szData, tmp);\n        }\n        return [NSString stringWithFormat:@\"%s\",szData];\n    }\n    return nil;\n}\n/**\n *  ASC吗转为Hex字符串  3030 --> 00\n *\n *  @param asc ASC字符串\n *\n *  @return 转码后的Hex字符串\n */\n+ (NSString *)ascToHex:(NSString *)asc{\n    char szData[1024]={0};\n    const char *ascBytes =  [asc UTF8String];\n    if (NULL != ascBytes) {\n        [self ascToHex:ascBytes len:asc.length outAscii:szData];\n        \n        return [NSString stringWithFormat:@\"%s\",szData];\n    }\n    return nil;\n}\n+ (void)ascToHex:(const char *)hex len:(NSUInteger)length outAscii:(char *)ascii\n{\n    for (int i = 0; i < length; i += 2)\n    {\n        if (hex[i] >= '0' && hex[i] <= '9')\n            ascii[i / 2] = (hex[i] - '0') << 4;\n        else if (hex[i] >= 'a' && hex[i] <= 'z')\n            ascii[i / 2] = (hex[i] - 'a' + 10) << 4;\n        else if (hex[i] >= 'A' && hex[i] <= 'Z')\n            ascii[i / 2] = (hex[i] - 'A' + 10) << 4;\n        \n        if (hex[i + 1] >= '0' && hex[i + 1] <= '9')\n            ascii[i / 2] += hex[i + 1] - '0';\n        else if (hex[i + 1] >= 'a' && hex[i + 1] <= 'z')\n            ascii[i / 2] += hex[i + 1] - 'a' + 10;\n        else if (hex[i + 1] >= 'A' && hex[i + 1] <= 'Z')\n            ascii[i / 2] += hex[i + 1] - 'A' + 10;\n    }\n}\n/**\n *  十六进制字符串转二进制字符串\n *\n *  @param hex 十六进制字符串\n *\n *  @return 二进制字符串\n */\n+(NSString *)HexToBinary:(NSString *)hex\n{\n    NSMutableDictionary *hexDic = [[NSMutableDictionary alloc] init];\n    hexDic = [[NSMutableDictionary alloc] initWithCapacity:16];\n    [hexDic setObject:@\"0000\" forKey:@\"0\"];\n    [hexDic setObject:@\"0001\" forKey:@\"1\"];\n    [hexDic setObject:@\"0010\" forKey:@\"2\"];\n    [hexDic setObject:@\"0011\" forKey:@\"3\"];\n    [hexDic setObject:@\"0100\" forKey:@\"4\"];\n    [hexDic setObject:@\"0101\" forKey:@\"5\"];\n    [hexDic setObject:@\"0110\" forKey:@\"6\"];\n    [hexDic setObject:@\"0111\" forKey:@\"7\"];\n    [hexDic setObject:@\"1000\" forKey:@\"8\"];\n    [hexDic setObject:@\"1001\" forKey:@\"9\"];\n    [hexDic setObject:@\"1010\" forKey:@\"A\"];\n    [hexDic setObject:@\"1011\" forKey:@\"B\"];\n    [hexDic setObject:@\"1100\" forKey:@\"C\"];\n    [hexDic setObject:@\"1101\" forKey:@\"D\"];\n    [hexDic setObject:@\"1110\" forKey:@\"E\"];\n    [hexDic setObject:@\"1111\" forKey:@\"F\"];\n    NSMutableString *binaryString=[[NSMutableString alloc] init];\n    for (int i=0; i<[hex length]; i++) {\n        NSString *key = [hex substringWithRange:NSMakeRange(i, 1)];\n        [binaryString appendString:[NSString stringWithFormat:@\"%@\",[hexDic objectForKey:key]]];\n    }\n    return binaryString;\n}\n/**\n *  2进制字符串转16进制字符串,如 11110011 -> F3\n *\n *  @param Binary 二进制字符串\n *\n *  @return 16进制字符串\n */\n+(NSString *)BinaryToHex:(NSString *)Binary\n{\n    if ([Binary length]%4 == 0) {\n        NSMutableDictionary *hexDic = [[NSMutableDictionary alloc] init];\n        hexDic = [[NSMutableDictionary alloc] initWithCapacity:16];\n        [hexDic setObject:@\"0\" forKey: @\"0000\"];\n        [hexDic setObject:@\"1\" forKey: @\"0001\"];\n        [hexDic setObject:@\"2\" forKey: @\"0010\"];\n        [hexDic setObject:@\"3\" forKey: @\"0011\"];\n        [hexDic setObject:@\"4\" forKey: @\"0100\"];\n        [hexDic setObject:@\"5\" forKey: @\"0101\"];\n        [hexDic setObject:@\"6\" forKey: @\"0110\"];\n        [hexDic setObject:@\"7\" forKey: @\"0111\"];\n        [hexDic setObject:@\"8\" forKey: @\"1000\"];\n        [hexDic setObject:@\"9\" forKey: @\"1001\"];\n        [hexDic setObject:@\"A\" forKey: @\"1010\"];\n        [hexDic setObject:@\"B\" forKey: @\"1011\"];\n        [hexDic setObject:@\"C\" forKey: @\"1100\"];\n        [hexDic setObject:@\"D\" forKey: @\"1101\"];\n        [hexDic setObject:@\"E\" forKey: @\"1110\"];\n        [hexDic setObject:@\"F\" forKey: @\"1111\"];\n        NSMutableString *hexString=[[NSMutableString alloc] init];\n        for (int i=0; i<[Binary length]/4; i++) {\n            NSString *key = [Binary substringWithRange:NSMakeRange(4*i, 4)];\n            //            hexString = [NSString stringWithFormat:@\"%@%@\",binaryString,[NSString stringWithFormat:@\"%@\",[hexDic objectForKey:key]]];\n            [hexString appendString:[NSString stringWithFormat:@\"%@\",[hexDic objectForKey:key]]];\n        }\n        return hexString;\n    }else\n        return nil;\n}\n@end\n\n```","slug":"16-05-09-NSStringConvertNSData","published":1,"updated":"2016-05-09T05:26:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jo50013pushxj4xuhtn"},{"title":"自定义Label行高和首行缩进","date":"2016-05-05T06:29:39.000Z","_content":"首行缩进和控制行距放到了**UILabel+LineSpacing_textIndex Category**里\n\n\n缩进和自定义行间距的效果如下图\n* ![首行缩进](http://7xrirn.com1.z0.glb.clouddn.com/Label2.png)\n* ![自定义行间距](http://7xrirn.com1.z0.glb.clouddn.com/Label1.png)\n\n<!-- more -->\n**下面的两段代码是方法调用，Category的具体代码，在文章的最后面，或是点击下载Category链接下载**\n---\n首行缩进使用，具体代码可以[下载Category](http://pan.baidu.com/s/1ge4APvP)\n---\n首行缩进是根据文字个数进行缩进，传的TypeNum为要缩进的文字数\n```\n#import \"UILabel+LineSpacing_textIndex.h\"\n#import \"ViewController.h\"\n@interface ViewController ()\n@property(weak, nonatomic) IBOutlet UILabel *contentLabel;\n@end\n@implementation ViewController\n- (void)viewDidLoad {\n  [super viewDidLoad];\n  self.contentLabel.text = @\"简单点说话的方式简单点\"\n                           @\"递进的情绪请省略\"\n                           @\"你又不是个演员\"\n                           @\"别设计那些情节\"\n                           @\"没意见我只想看看你怎么圆\"\n                           @\"你难过的太表面 像没天赋的演员\"\n                           @\"观众一眼能看见\"\n                           @\"该配合你演出的我演视而不见\"\n                           @\"在逼一个最爱你的人即兴表演\"\n                           @\"什么时候我们开始收起了底线\"\n                           @\"顺应时代的改变看那些拙劣的表演\"\n                           @\"可你曾经那么爱我干嘛演出细节\";\n  //首行缩进\n  [self.contentLabel textIndexWithTypeNum:2];\n}\n@end\n```\n---\n修改行间距的方法调用，具体代码可以[下载Category](http://pan.baidu.com/s/1ge4APvP)\n---\n```\n#import \"UILabel+LineSpacing_textIndex.h\"\n#import \"ViewController.h\"\n@interface ViewController ()\n@property(weak, nonatomic) IBOutlet UILabel *contentLabel;\n@end\n@implementation ViewController\n- (void)viewDidLoad {\n  [super viewDidLoad];\n  self.contentLabel.text = @\"简单点说话的方式简单点\"\n                           @\"递进的情绪请省略\"\n                           @\"你又不是个演员\"\n                           @\"别设计那些情节\"\n                           @\"没意见我只想看看你怎么圆\"\n                           @\"你难过的太表面 像没天赋的演员\"\n                           @\"观众一眼能看见\"\n                           @\"该配合你演出的我演视而不见\"\n                           @\"在逼一个最爱你的人即兴表演\"\n                           @\"什么时候我们开始收起了底线\"\n                           @\"顺应时代的改变看那些拙劣的表演\"\n                           @\"可你曾经那么爱我干嘛演出细节\";\n  //修改行距\n  [self.contentLabel lineSpaceingWithLineSpacingNum:12];\n}\n@end\n```\n下面是Category中的代码\n---\n\n首行缩进的方法调用\n---\n```\n/**\n *  根据传入的字数确认首行缩进的字数\n *\n *  @param typeNum 首行缩进的字数\n */\n- (void)textIndexWithTypeNum:(NSUInteger)typeNum {\n  NSMutableAttributedString *attributedString =\n      [[NSMutableAttributedString alloc] initWithString:self.text];\n  NSMutableParagraphStyle *paragraphStyle =\n      [[NSMutableParagraphStyle alloc] init];\n  paragraphStyle.alignment = NSTextAlignmentLeft;\n  CGFloat labelFont = [[self font] pointSize];\n  CGSize whSize = [self.text sizeWithAttributes:@{\n    NSFontAttributeName : [UIFont systemFontOfSize:labelFont]\n  }];\n  [paragraphStyle\n      setFirstLineHeadIndent:whSize.height * typeNum -\n                             typeNum *\n                                 2.5];  //首行缩进 根据用户昵称宽度在加5个像素\n  [attributedString addAttribute:NSParagraphStyleAttributeName\n                           value:paragraphStyle\n                           range:NSMakeRange(0, [self.text length])];\n  self.attributedText = attributedString;\n}\n```\n设置行间距\n---\n```\n/**\n *  设置行间距\n *\n *  @param lineSpacingNum 行间距值\n */\n- (void)lineSpaceingWithLineSpacingNum:(NSUInteger)lineSpacingNum {\n  NSMutableAttributedString *attributedString =\n      [[NSMutableAttributedString alloc] initWithString:self.text];\n  NSMutableParagraphStyle *paragraphStyle =\n      [[NSMutableParagraphStyle alloc] init];\n  paragraphStyle.maximumLineHeight = lineSpacingNum;  //最大的行高\n  [attributedString addAttribute:NSParagraphStyleAttributeName\n                           value:paragraphStyle\n                           range:NSMakeRange(0, [self.text length])];\n  self.attributedText = attributedString;\n  [self sizeToFit];\n}\n@end\n```","source":"_posts/16-05-05-labelLineHeightAndtextIndex.md","raw":"title: 自定义Label行高和首行缩进\ndate: 2016-05-05 14:29:39\ntags:\n---\n首行缩进和控制行距放到了**UILabel+LineSpacing_textIndex Category**里\n\n\n缩进和自定义行间距的效果如下图\n* ![首行缩进](http://7xrirn.com1.z0.glb.clouddn.com/Label2.png)\n* ![自定义行间距](http://7xrirn.com1.z0.glb.clouddn.com/Label1.png)\n\n<!-- more -->\n**下面的两段代码是方法调用，Category的具体代码，在文章的最后面，或是点击下载Category链接下载**\n---\n首行缩进使用，具体代码可以[下载Category](http://pan.baidu.com/s/1ge4APvP)\n---\n首行缩进是根据文字个数进行缩进，传的TypeNum为要缩进的文字数\n```\n#import \"UILabel+LineSpacing_textIndex.h\"\n#import \"ViewController.h\"\n@interface ViewController ()\n@property(weak, nonatomic) IBOutlet UILabel *contentLabel;\n@end\n@implementation ViewController\n- (void)viewDidLoad {\n  [super viewDidLoad];\n  self.contentLabel.text = @\"简单点说话的方式简单点\"\n                           @\"递进的情绪请省略\"\n                           @\"你又不是个演员\"\n                           @\"别设计那些情节\"\n                           @\"没意见我只想看看你怎么圆\"\n                           @\"你难过的太表面 像没天赋的演员\"\n                           @\"观众一眼能看见\"\n                           @\"该配合你演出的我演视而不见\"\n                           @\"在逼一个最爱你的人即兴表演\"\n                           @\"什么时候我们开始收起了底线\"\n                           @\"顺应时代的改变看那些拙劣的表演\"\n                           @\"可你曾经那么爱我干嘛演出细节\";\n  //首行缩进\n  [self.contentLabel textIndexWithTypeNum:2];\n}\n@end\n```\n---\n修改行间距的方法调用，具体代码可以[下载Category](http://pan.baidu.com/s/1ge4APvP)\n---\n```\n#import \"UILabel+LineSpacing_textIndex.h\"\n#import \"ViewController.h\"\n@interface ViewController ()\n@property(weak, nonatomic) IBOutlet UILabel *contentLabel;\n@end\n@implementation ViewController\n- (void)viewDidLoad {\n  [super viewDidLoad];\n  self.contentLabel.text = @\"简单点说话的方式简单点\"\n                           @\"递进的情绪请省略\"\n                           @\"你又不是个演员\"\n                           @\"别设计那些情节\"\n                           @\"没意见我只想看看你怎么圆\"\n                           @\"你难过的太表面 像没天赋的演员\"\n                           @\"观众一眼能看见\"\n                           @\"该配合你演出的我演视而不见\"\n                           @\"在逼一个最爱你的人即兴表演\"\n                           @\"什么时候我们开始收起了底线\"\n                           @\"顺应时代的改变看那些拙劣的表演\"\n                           @\"可你曾经那么爱我干嘛演出细节\";\n  //修改行距\n  [self.contentLabel lineSpaceingWithLineSpacingNum:12];\n}\n@end\n```\n下面是Category中的代码\n---\n\n首行缩进的方法调用\n---\n```\n/**\n *  根据传入的字数确认首行缩进的字数\n *\n *  @param typeNum 首行缩进的字数\n */\n- (void)textIndexWithTypeNum:(NSUInteger)typeNum {\n  NSMutableAttributedString *attributedString =\n      [[NSMutableAttributedString alloc] initWithString:self.text];\n  NSMutableParagraphStyle *paragraphStyle =\n      [[NSMutableParagraphStyle alloc] init];\n  paragraphStyle.alignment = NSTextAlignmentLeft;\n  CGFloat labelFont = [[self font] pointSize];\n  CGSize whSize = [self.text sizeWithAttributes:@{\n    NSFontAttributeName : [UIFont systemFontOfSize:labelFont]\n  }];\n  [paragraphStyle\n      setFirstLineHeadIndent:whSize.height * typeNum -\n                             typeNum *\n                                 2.5];  //首行缩进 根据用户昵称宽度在加5个像素\n  [attributedString addAttribute:NSParagraphStyleAttributeName\n                           value:paragraphStyle\n                           range:NSMakeRange(0, [self.text length])];\n  self.attributedText = attributedString;\n}\n```\n设置行间距\n---\n```\n/**\n *  设置行间距\n *\n *  @param lineSpacingNum 行间距值\n */\n- (void)lineSpaceingWithLineSpacingNum:(NSUInteger)lineSpacingNum {\n  NSMutableAttributedString *attributedString =\n      [[NSMutableAttributedString alloc] initWithString:self.text];\n  NSMutableParagraphStyle *paragraphStyle =\n      [[NSMutableParagraphStyle alloc] init];\n  paragraphStyle.maximumLineHeight = lineSpacingNum;  //最大的行高\n  [attributedString addAttribute:NSParagraphStyleAttributeName\n                           value:paragraphStyle\n                           range:NSMakeRange(0, [self.text length])];\n  self.attributedText = attributedString;\n  [self sizeToFit];\n}\n@end\n```","slug":"16-05-05-labelLineHeightAndtextIndex","published":1,"updated":"2016-05-05T07:43:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jo80014push1l2dxxmu"},{"title":"获取当前类所有属性","date":"2016-05-03T09:18:31.000Z","_content":"\n\n    **class_copyPropertyList**： 返回对象类的属性(@property声明的属性)\n    **class_copyIvarList**：返回类的所有属性和变量(包括在@interface大括号中声明的变量)\n\n\n    通过runtime获取当前类@property声明的属性列表\n\n```\n#import <objc/runtime.h>\n@implementation PayModel\n- (NSArray *)getPropertyNameList {\n  unsigned int count;\n  //  返回对象类的属性(@property声明的属性)\n  objc_property_t *properties = class_copyPropertyList([self class], &count);\n  //存储属性列表\n  NSMutableArray *propertyNameList = [NSMutableArray array];\n  for (int i = 0; i < count; i++) {\n    objc_property_t property = properties[i];\n    // property_getName返回一个CString\n    // 将CString转换为NSString\n    NSString *str = [NSString stringWithCString:property_getName(property)\n                                       encoding:NSUTF8StringEncoding];\n    [propertyNameList addObject:str];\n  }\n  free(properties);\n  return [propertyNameList copy];\n}\n@end\n```\n","source":"_posts/16-05-03-runtime-getPropertyNameList.md","raw":"title: 获取当前类所有属性\ndate: 2016-05-03 17:18:31\ntags:\n---\n\n\n    **class_copyPropertyList**： 返回对象类的属性(@property声明的属性)\n    **class_copyIvarList**：返回类的所有属性和变量(包括在@interface大括号中声明的变量)\n\n\n    通过runtime获取当前类@property声明的属性列表\n\n```\n#import <objc/runtime.h>\n@implementation PayModel\n- (NSArray *)getPropertyNameList {\n  unsigned int count;\n  //  返回对象类的属性(@property声明的属性)\n  objc_property_t *properties = class_copyPropertyList([self class], &count);\n  //存储属性列表\n  NSMutableArray *propertyNameList = [NSMutableArray array];\n  for (int i = 0; i < count; i++) {\n    objc_property_t property = properties[i];\n    // property_getName返回一个CString\n    // 将CString转换为NSString\n    NSString *str = [NSString stringWithCString:property_getName(property)\n                                       encoding:NSUTF8StringEncoding];\n    [propertyNameList addObject:str];\n  }\n  free(properties);\n  return [propertyNameList copy];\n}\n@end\n```\n","slug":"16-05-03-runtime-getPropertyNameList","published":1,"updated":"2016-05-03T09:20:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0joa0015pushau1gddj2"},{"title":"Bug记录-deflate_referenced_from","date":"2016-05-03T13:31:05.000Z","_content":"\ntitle: Bug记录-deflate,referenced from:\ndate: 2016-05-03 21:27:40\ntags:\n---\n\n[参考](http://my.oschina.net/joanfen/blog/150271)\n\n1. \n```\nUndefined symbols for architecture i386:\n\"_SCNetworkReachabilityCreateWithAddress\", referenced from:\n\"_SCNetworkReachabilityGetFlags\", referenced from:\n```\n\n    解决办法：添加SystemConfiguration.framework\n\n<!-- more -->\n2. 这个是引用NSDataAdditions时出现的bug，\n```\n\"_deflate\", referenced from:\n      -[NSData(NSDataAdditions) gzipDeflate] in NSDataAdditions.o\n  \"_deflateEnd\", referenced from:\n      -[NSData(NSDataAdditions) gzipDeflate] in NSDataAdditions.o\n  \"_deflateInit2_\", referenced from:\n      -[NSData(NSDataAdditions) gzipDeflate] in NSDataAdditions.o\n  \"_inflate\", referenced from:\n      -[NSData(NSDataAdditions) gzipInflate] in NSDataAdditions.o\n  \"_inflateEnd\", referenced from:\n      -[NSData(NSDataAdditions) gzipInflate] in NSDataAdditions.o\n  \"_inflateInit2_\", referenced from:\n      -[NSData(NSDataAdditions) gzipInflate] in NSDataAdditions.o\n```\n\n    解决办法：添加libz.dylib类库\n\n\n3. 'libxml/HTMLpraser.h' file not found\n\n    这个是一位网友在xcode4.3.2中编译没问题，但是在xcode4.6.3中编译是遇到的，给的解决步骤\n\n* 添加libxml2.2.dylib类库\n* 在Build Settings->Other Liner Flags此项中添加-lxml2,如下图\n* ![bug](http://7xrirn.com1.z0.glb.clouddn.com/Bug1.jpg)\n* 在Build Settings->Header Search Paths项添加/usr/include/libxml2,如下图\n* ![bug](http://7xrirn.com1.z0.glb.clouddn.com/Bug2.jpg)\n\n据这位网友讲，修复过后报错armv7s，armv7s的问题比较常见的解决办法是在Build Settings->Valid Architectures项中去除armv7s，如果还是未能解决，请谷歌armv7s查找具体解决办法\n\nPS：用第三方类库.a文件时很容易出现无法解决的armv7s问题，尤其是好多类库都比较老，但是苹果的类库和XCode一直在更新，很容易出现未知错误，建议用第三方库时导入.m文件，比较容易解决问题\n\n\n4. selector警告\n```\nperformSelector may cause a leak because its selector is unknown\n```\n触发原因\n```\nSEL sel = @selector(touch:);\n[self performSelector:sel withObject:textField];\n```\n解决办法\n```\n#import <objc/message.h>\nSEL sel = @selector(touch:);\nobjc_msgSend(self, sel, textField);// textField为touch：后跟的参数，如有多个参数，用','连接即可\n```\n\n\n\n\n\n\n\n\n","source":"_posts/16-05-03-bug.md","raw":"title: Bug记录-deflate_referenced_from\ndate: 2016-05-03 21:31:05\ntags:\n---\n\ntitle: Bug记录-deflate,referenced from:\ndate: 2016-05-03 21:27:40\ntags:\n---\n\n[参考](http://my.oschina.net/joanfen/blog/150271)\n\n1. \n```\nUndefined symbols for architecture i386:\n\"_SCNetworkReachabilityCreateWithAddress\", referenced from:\n\"_SCNetworkReachabilityGetFlags\", referenced from:\n```\n\n    解决办法：添加SystemConfiguration.framework\n\n<!-- more -->\n2. 这个是引用NSDataAdditions时出现的bug，\n```\n\"_deflate\", referenced from:\n      -[NSData(NSDataAdditions) gzipDeflate] in NSDataAdditions.o\n  \"_deflateEnd\", referenced from:\n      -[NSData(NSDataAdditions) gzipDeflate] in NSDataAdditions.o\n  \"_deflateInit2_\", referenced from:\n      -[NSData(NSDataAdditions) gzipDeflate] in NSDataAdditions.o\n  \"_inflate\", referenced from:\n      -[NSData(NSDataAdditions) gzipInflate] in NSDataAdditions.o\n  \"_inflateEnd\", referenced from:\n      -[NSData(NSDataAdditions) gzipInflate] in NSDataAdditions.o\n  \"_inflateInit2_\", referenced from:\n      -[NSData(NSDataAdditions) gzipInflate] in NSDataAdditions.o\n```\n\n    解决办法：添加libz.dylib类库\n\n\n3. 'libxml/HTMLpraser.h' file not found\n\n    这个是一位网友在xcode4.3.2中编译没问题，但是在xcode4.6.3中编译是遇到的，给的解决步骤\n\n* 添加libxml2.2.dylib类库\n* 在Build Settings->Other Liner Flags此项中添加-lxml2,如下图\n* ![bug](http://7xrirn.com1.z0.glb.clouddn.com/Bug1.jpg)\n* 在Build Settings->Header Search Paths项添加/usr/include/libxml2,如下图\n* ![bug](http://7xrirn.com1.z0.glb.clouddn.com/Bug2.jpg)\n\n据这位网友讲，修复过后报错armv7s，armv7s的问题比较常见的解决办法是在Build Settings->Valid Architectures项中去除armv7s，如果还是未能解决，请谷歌armv7s查找具体解决办法\n\nPS：用第三方类库.a文件时很容易出现无法解决的armv7s问题，尤其是好多类库都比较老，但是苹果的类库和XCode一直在更新，很容易出现未知错误，建议用第三方库时导入.m文件，比较容易解决问题\n\n\n4. selector警告\n```\nperformSelector may cause a leak because its selector is unknown\n```\n触发原因\n```\nSEL sel = @selector(touch:);\n[self performSelector:sel withObject:textField];\n```\n解决办法\n```\n#import <objc/message.h>\nSEL sel = @selector(touch:);\nobjc_msgSend(self, sel, textField);// textField为touch：后跟的参数，如有多个参数，用','连接即可\n```\n\n\n\n\n\n\n\n\n","slug":"16-05-03-bug","published":1,"updated":"2016-05-03T13:33:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0job0016pushvqdw01sm"},{"title":"迪士尼七宝","date":"2016-05-02T14:36:35.000Z","_content":"\n![迪士尼](http://7xrirn.com1.z0.glb.clouddn.com/DSN1.JPG)\n\n<!-- more -->\n![迪士尼](http://7xrirn.com1.z0.glb.clouddn.com/DSN3.JPG)\n![迪士尼](http://7xrirn.com1.z0.glb.clouddn.com/DSN4.JPG)\n![迪士尼](http://7xrirn.com1.z0.glb.clouddn.com/DSN5.JPG)\n![七宝](http://7xrirn.com1.z0.glb.clouddn.com/DSN6.JPG)\n![七宝](http://7xrirn.com1.z0.glb.clouddn.com/DSN7.JPG)\n![七宝](http://7xrirn.com1.z0.glb.clouddn.com/DSN8.JPG)\n","source":"_posts/16-05-02-迪士尼七宝.md","raw":"title: 迪士尼七宝\ndate: 2016-05-02 22:36:35\ntags: '随笔'\n---\n\n![迪士尼](http://7xrirn.com1.z0.glb.clouddn.com/DSN1.JPG)\n\n<!-- more -->\n![迪士尼](http://7xrirn.com1.z0.glb.clouddn.com/DSN3.JPG)\n![迪士尼](http://7xrirn.com1.z0.glb.clouddn.com/DSN4.JPG)\n![迪士尼](http://7xrirn.com1.z0.glb.clouddn.com/DSN5.JPG)\n![七宝](http://7xrirn.com1.z0.glb.clouddn.com/DSN6.JPG)\n![七宝](http://7xrirn.com1.z0.glb.clouddn.com/DSN7.JPG)\n![七宝](http://7xrirn.com1.z0.glb.clouddn.com/DSN8.JPG)\n","slug":"16-05-02-迪士尼七宝","published":1,"updated":"2016-05-02T14:47:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0joc0017push03ti3ipa"},{"title":"获取storyboard箭头指向的根控制器","date":"2016-05-02T11:56:16.000Z","_content":"```\n/**\n *  通过名称获取storyboard箭头指向的根控制器\n *\n *  @param sbName storyboard名字\n *\n *  @return storyboard instantiateInitialViewController\n */\n- (id)viewControllerWithSBName:(NSString*)sbName {\n//获取程序的名字\n  NSDictionary* info = [[NSBundle mainBundle] infoDictionary];\n  NSString* prodName = [info objectForKey:@\"CFBundleExecutable\"];\n  NSString* sbPath = [NSString stringWithFormat:@\"%@/%@/\", prodName, sbName];\n  //  NSLog(@\"%@\", [[UIStoryboard\n  //                   storyboardWithName:sbName\n  //                               bundle:[[NSBundle alloc]\n  //                               initWithPath:sbPath]]\n  //                   instantiateInitialViewController]);\n  return\n      [[UIStoryboard storyboardWithName:sbName\n                                 bundle:[[NSBundle alloc] initWithPath:sbPath]]\n          instantiateInitialViewController];\n}\n```","source":"_posts/16-05-02-获取storyboard箭头指向的根控制器.md","raw":"title: 获取storyboard箭头指向的根控制器\ndate: 2016-05-02 19:56:16\ntags:\n---\n```\n/**\n *  通过名称获取storyboard箭头指向的根控制器\n *\n *  @param sbName storyboard名字\n *\n *  @return storyboard instantiateInitialViewController\n */\n- (id)viewControllerWithSBName:(NSString*)sbName {\n//获取程序的名字\n  NSDictionary* info = [[NSBundle mainBundle] infoDictionary];\n  NSString* prodName = [info objectForKey:@\"CFBundleExecutable\"];\n  NSString* sbPath = [NSString stringWithFormat:@\"%@/%@/\", prodName, sbName];\n  //  NSLog(@\"%@\", [[UIStoryboard\n  //                   storyboardWithName:sbName\n  //                               bundle:[[NSBundle alloc]\n  //                               initWithPath:sbPath]]\n  //                   instantiateInitialViewController]);\n  return\n      [[UIStoryboard storyboardWithName:sbName\n                                 bundle:[[NSBundle alloc] initWithPath:sbPath]]\n          instantiateInitialViewController];\n}\n```","slug":"16-05-02-获取storyboard箭头指向的根控制器","published":1,"updated":"2016-05-02T11:56:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0joe0019push3wucjtjy"},{"title":"SSH公钥","date":"2016-05-02T07:42:40.000Z","_content":"\n\tSSH （ Secure Shell）是一种安全协议，在你的电脑与 GitHub 服务器进行通信时，我们使用 SSH 密钥（SSH Keys）认证的方式来保证通信安全。\n\n\tSSH 密钥的创建需要在终端（命令行）环境下进行，我们首先进入命令行环境。通常在 Mac OS X 和 Linux 平台下我们使用终端工具（Terminal），在 Windows 平台中，可以使用 Git Bash 工具。\n\n进入命令行环境后，我们执行以下操作来创建 SSH 密钥\n\n<!-- more -->\n1. 进入 SSH 目录\n--\n\n\t\tcd ~/.ssh\n\t\t如果还没有 /.ssh 目录，可以手工创建一个 mkdir /.ssh，之后再通过 cd /.ssh 进入 SSH 目录\n\t\t可以通过 ls 命令查看 SSH 目录下的文件，来确认你是否已经生成过 SSH 密钥；如果 SSH 目录为空，我们开始第二步，生成 SSH 密钥；如果存在 id_rsa.pub 这个文件，说明你之前生成过 SSH 密钥，可以跳过第二步，直接进行密钥的获取。\n\n2. 生成 SSH 密钥\n--\n\n我们通过下面的命令生成密钥，请将命令中的 YOUR_EMAIL@YOUREMAIL.COM 替换为你自己的 Email 地址。\n\n\tssh-keygen -t rsa -C \"YOUR_EMAIL@YOUREMAIL.COM\"\n在 SSH 生成过程中会出现以下信息，按屏幕的提示操作即可；当提示Enter passphrase ( empty for no passphrase ) : 时，可以直接按两次回车键输入一个空的 passphrase；也可以选择输入一个 passphrase 口令，如果此时你输入了一个 passphrase，请牢记，之后每次提交时都需要输入这个口令来确认。\n\n```\n`$ ssh-keygen -t rsa -C \"YOUR_EMAIL@YOUREMAIL.COM\"\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /Users/USERNAME/.ssh/id_rsa.\nYour public key has been saved in /Users/USERNAME/.ssh/id_rsa.pub.\nThe key fingerprint is:\n15:81:d2:7a:c6:6c:0f:ec:b0:b6:d4:18:b8:d1:41:48 YOUR_EMAIL@YOUREMAIL.COM\n```\n`\n一般情况下，在命令行中输入密码、口令一类的信息时是没有信息回显的。在我们这一步的操作中，输入 passphrase 口令时，命令行界面上不会随着键盘敲入密码而有什么反馈。\n\n3. 获取 SSH 公钥信息\n---\nSSH 秘钥生成结束后，你可以在 SSH 目录下看到私钥 id_rsa 和公钥 id_rsa.pub 这两个文件，不要把私钥文件 id_rsa 的信息透露给任何人。我们可以通过文本编辑器或 cat 命令来查看 id_rsa.pub 公钥信息。\n\n\t通过编辑器。使用你熟悉的文本编辑器，比如 记事本、Sublime Text 等软件打开 id_rsa.pub ，复制里面的所有内容以备下一步使用。\n\t通过 cat命令。在命令行中敲入**cat id_rsa.pub** ，回车执行后命令行界面中会显示 id_rsa.pub 文件里的内容，复制后在下一步使用。\n\n5. 测试 GitHub SSH 连接\n---\n完成上面的操作后，可以通过下面的命令来测试一下是否可以连接服务器。\n\n\tssh -T git@github.com\n如果你操作的电脑是第一次与 GitHub 建立连接，会出现以下警告，\n\n\tThe authenticity of host 'github.com (50.116.2.223)' can't be established.\n\t# RSA key fingerprint is     84:9e:c9:8e:7f:36:28:08:7e:13:bf:43:12:74:11:4e.\n\t# Are you sure you want to continue connecting (yes/no)?\n输入 yes 后回车。此时，如果你在生成 SSH 密钥时设置了 passphrase 口令，会提示你输入口令，输入后回车即可。\n\n最后，如果你看到以下信息，说明连接成功。\n\n\tHi USERNAME! You've successfully authenticated, but GitHub does not provide shell access.\n\n","source":"_posts/16-05-02-ssh公钥.md","raw":"title: SSH公钥\ndate: 2016-05-02 15:42:40\ntags:\n---\n\n\tSSH （ Secure Shell）是一种安全协议，在你的电脑与 GitHub 服务器进行通信时，我们使用 SSH 密钥（SSH Keys）认证的方式来保证通信安全。\n\n\tSSH 密钥的创建需要在终端（命令行）环境下进行，我们首先进入命令行环境。通常在 Mac OS X 和 Linux 平台下我们使用终端工具（Terminal），在 Windows 平台中，可以使用 Git Bash 工具。\n\n进入命令行环境后，我们执行以下操作来创建 SSH 密钥\n\n<!-- more -->\n1. 进入 SSH 目录\n--\n\n\t\tcd ~/.ssh\n\t\t如果还没有 /.ssh 目录，可以手工创建一个 mkdir /.ssh，之后再通过 cd /.ssh 进入 SSH 目录\n\t\t可以通过 ls 命令查看 SSH 目录下的文件，来确认你是否已经生成过 SSH 密钥；如果 SSH 目录为空，我们开始第二步，生成 SSH 密钥；如果存在 id_rsa.pub 这个文件，说明你之前生成过 SSH 密钥，可以跳过第二步，直接进行密钥的获取。\n\n2. 生成 SSH 密钥\n--\n\n我们通过下面的命令生成密钥，请将命令中的 YOUR_EMAIL@YOUREMAIL.COM 替换为你自己的 Email 地址。\n\n\tssh-keygen -t rsa -C \"YOUR_EMAIL@YOUREMAIL.COM\"\n在 SSH 生成过程中会出现以下信息，按屏幕的提示操作即可；当提示Enter passphrase ( empty for no passphrase ) : 时，可以直接按两次回车键输入一个空的 passphrase；也可以选择输入一个 passphrase 口令，如果此时你输入了一个 passphrase，请牢记，之后每次提交时都需要输入这个口令来确认。\n\n```\n`$ ssh-keygen -t rsa -C \"YOUR_EMAIL@YOUREMAIL.COM\"\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /Users/USERNAME/.ssh/id_rsa.\nYour public key has been saved in /Users/USERNAME/.ssh/id_rsa.pub.\nThe key fingerprint is:\n15:81:d2:7a:c6:6c:0f:ec:b0:b6:d4:18:b8:d1:41:48 YOUR_EMAIL@YOUREMAIL.COM\n```\n`\n一般情况下，在命令行中输入密码、口令一类的信息时是没有信息回显的。在我们这一步的操作中，输入 passphrase 口令时，命令行界面上不会随着键盘敲入密码而有什么反馈。\n\n3. 获取 SSH 公钥信息\n---\nSSH 秘钥生成结束后，你可以在 SSH 目录下看到私钥 id_rsa 和公钥 id_rsa.pub 这两个文件，不要把私钥文件 id_rsa 的信息透露给任何人。我们可以通过文本编辑器或 cat 命令来查看 id_rsa.pub 公钥信息。\n\n\t通过编辑器。使用你熟悉的文本编辑器，比如 记事本、Sublime Text 等软件打开 id_rsa.pub ，复制里面的所有内容以备下一步使用。\n\t通过 cat命令。在命令行中敲入**cat id_rsa.pub** ，回车执行后命令行界面中会显示 id_rsa.pub 文件里的内容，复制后在下一步使用。\n\n5. 测试 GitHub SSH 连接\n---\n完成上面的操作后，可以通过下面的命令来测试一下是否可以连接服务器。\n\n\tssh -T git@github.com\n如果你操作的电脑是第一次与 GitHub 建立连接，会出现以下警告，\n\n\tThe authenticity of host 'github.com (50.116.2.223)' can't be established.\n\t# RSA key fingerprint is     84:9e:c9:8e:7f:36:28:08:7e:13:bf:43:12:74:11:4e.\n\t# Are you sure you want to continue connecting (yes/no)?\n输入 yes 后回车。此时，如果你在生成 SSH 密钥时设置了 passphrase 口令，会提示你输入口令，输入后回车即可。\n\n最后，如果你看到以下信息，说明连接成功。\n\n\tHi USERNAME! You've successfully authenticated, but GitHub does not provide shell access.\n\n","slug":"16-05-02-ssh公钥","published":1,"updated":"2016-06-07T09:45:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jog001apushrifis8m6"},{"title":"图片压缩","date":"2016-05-02T12:02:22.000Z","_content":"\n**可以将如下两个方法写在分类中,方便不同项目的重复使用**\n\n```\n//压缩图片质量\n+ (UIImage*)reduceImage:(UIImage*)image percent:(float)percent {\n  NSData* imageData = UIImageJPEGRepresentation(image, percent);\n  UIImage* newImage = [UIImage imageWithData:imageData];\n  return newImage;\n}\n```\n\n<!-- more -->\n\n\n```\n//压缩图片尺寸\n+ (UIImage*)imageWithImageSimple:(UIImage*)image scaledToSize:(CGSize)newSize {\n  // Create a graphics image context\n  UIGraphicsBeginImageContext(newSize);\n  // new size\n  [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];\n  // Get the new image from the context\n  UIImage* newImage = UIGraphicsGetImageFromCurrentImageContext();\n  // End the context\n  UIGraphicsEndImageContext();\n  // Return the new image.\n  return newImage;\n}\n\n```","source":"_posts/16-05-02-pictureCompress.md","raw":"title: 图片压缩\ndate: 2016-05-02 20:02:22\ntags:\n---\n\n**可以将如下两个方法写在分类中,方便不同项目的重复使用**\n\n```\n//压缩图片质量\n+ (UIImage*)reduceImage:(UIImage*)image percent:(float)percent {\n  NSData* imageData = UIImageJPEGRepresentation(image, percent);\n  UIImage* newImage = [UIImage imageWithData:imageData];\n  return newImage;\n}\n```\n\n<!-- more -->\n\n\n```\n//压缩图片尺寸\n+ (UIImage*)imageWithImageSimple:(UIImage*)image scaledToSize:(CGSize)newSize {\n  // Create a graphics image context\n  UIGraphicsBeginImageContext(newSize);\n  // new size\n  [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];\n  // Get the new image from the context\n  UIImage* newImage = UIGraphicsGetImageFromCurrentImageContext();\n  // End the context\n  UIGraphicsEndImageContext();\n  // Return the new image.\n  return newImage;\n}\n\n```","slug":"16-05-02-pictureCompress","published":1,"updated":"2016-05-02T12:06:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0joj001bpushddy1sibr"},{"title":"博客迁移","date":"2016-04-29T06:02:58.000Z","_content":"原来的博客地址：http://irena.gitcafe.io  \n现在的博客地址：http://irenachou.github.io/\n\n\n第一次搭博客首选了gitcafe，是因为gitcafe访问相对快一些，github比较慢，转了一圈，最终又回到了github上来。\n\n前两天写了一篇关于UI-Touch的小短文发现gitcafe被coding收购了，5月31号前要把所有gitcafe上的项目都迁移到coding，接着就始迁移了，在coding部署要交费了，试了几天，实在很贵，也没有找到比较好的较便宜的方法，又放弃coding向github上迁移\n\n\n迁移的过程中还是遇到了一个小问题，以前在gitcafe的时候，使用的是gitcafe-pages子分支，也就想在github上直接使用这个子分支，但是将默认分支改成子分支后，访问的还是master分支，英文很烂，并且各种搜索后无解，最后只好曲线救国，先将博客指定到了master分支，有知道我问题的朋友，留言告诉我哦，谢谢了\n\n","source":"_posts/16-04-29-博客迁移.md","raw":"title: 博客迁移\ndate: 2016-04-29 14:02:58\ntags: '随笔'\n---\n原来的博客地址：http://irena.gitcafe.io  \n现在的博客地址：http://irenachou.github.io/\n\n\n第一次搭博客首选了gitcafe，是因为gitcafe访问相对快一些，github比较慢，转了一圈，最终又回到了github上来。\n\n前两天写了一篇关于UI-Touch的小短文发现gitcafe被coding收购了，5月31号前要把所有gitcafe上的项目都迁移到coding，接着就始迁移了，在coding部署要交费了，试了几天，实在很贵，也没有找到比较好的较便宜的方法，又放弃coding向github上迁移\n\n\n迁移的过程中还是遇到了一个小问题，以前在gitcafe的时候，使用的是gitcafe-pages子分支，也就想在github上直接使用这个子分支，但是将默认分支改成子分支后，访问的还是master分支，英文很烂，并且各种搜索后无解，最后只好曲线救国，先将博客指定到了master分支，有知道我问题的朋友，留言告诉我哦，谢谢了\n\n","slug":"16-04-29-博客迁移","published":1,"updated":"2016-04-29T06:48:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipfa0jol001cpushcg8uzvb0"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cipfa0jlz0005pushng36w5es","tag_id":"cipfa0jlz0006pushw37vf4bz","_id":"cipfa0jm30007pusht8mq9haw"},{"post_id":"cipfa0joc0017push03ti3ipa","tag_id":"cipfa0jlz0006pushw37vf4bz","_id":"cipfa0jod0018pusho2s9mur4"},{"post_id":"cipfa0jol001cpushcg8uzvb0","tag_id":"cipfa0jlz0006pushw37vf4bz","_id":"cipfa0jom001dpushm8c0hq61"}],"Tag":[{"name":"随笔","_id":"cipfa0jlz0006pushw37vf4bz"}]}}